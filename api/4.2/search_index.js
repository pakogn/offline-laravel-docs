var search_data = {
    'index': {
        'searchIndex': ["","illuminate","illuminate\\auth","illuminate\\auth\\console","illuminate\\auth\\reminders","illuminate\\cache","illuminate\\cache\\console","illuminate\\config","illuminate\\console","illuminate\\container","illuminate\\cookie","illuminate\\database","illuminate\\database\\capsule","illuminate\\database\\connectors","illuminate\\database\\console","illuminate\\database\\console\\migrations","illuminate\\database\\eloquent","illuminate\\database\\eloquent\\relations","illuminate\\database\\migrations","illuminate\\database\\query","illuminate\\database\\query\\grammars","illuminate\\database\\query\\processors","illuminate\\database\\schema","illuminate\\database\\schema\\grammars","illuminate\\encryption","illuminate\\events","illuminate\\exception","illuminate\\filesystem","illuminate\\foundation","illuminate\\foundation\\console","illuminate\\foundation\\providers","illuminate\\foundation\\testing","illuminate\\hashing","illuminate\\html","illuminate\\http","illuminate\\log","illuminate\\mail","illuminate\\mail\\transport","illuminate\\pagination","illuminate\\queue","illuminate\\queue\\capsule","illuminate\\queue\\connectors","illuminate\\queue\\console","illuminate\\queue\\failed","illuminate\\queue\\jobs","illuminate\\redis","illuminate\\remote","illuminate\\routing","illuminate\\routing\\console","illuminate\\routing\\generators","illuminate\\routing\\matching","illuminate\\session","illuminate\\session\\console","illuminate\\support","illuminate\\support\\contracts","illuminate\\support\\facades","illuminate\\support\\traits","illuminate\\translation","illuminate\\validation","illuminate\\view","illuminate\\view\\compilers","illuminate\\view\\engines","illuminate\\workbench","illuminate\\workbench\\console","illuminatequeueclosure","illuminate\\auth\\authmanager","illuminate\\auth\\authserviceprovider","illuminate\\auth\\console\\clearreminderscommand","illuminate\\auth\\console\\reminderscontrollercommand","illuminate\\auth\\console\\reminderstablecommand","illuminate\\auth\\databaseuserprovider","illuminate\\auth\\eloquentuserprovider","illuminate\\auth\\genericuser","illuminate\\auth\\guard","illuminate\\auth\\reminders\\databasereminderrepository","illuminate\\auth\\reminders\\passwordbroker","illuminate\\auth\\reminders\\remindableinterface","illuminate\\auth\\reminders\\remindabletrait","illuminate\\auth\\reminders\\reminderrepositoryinterface","illuminate\\auth\\reminders\\reminderserviceprovider","illuminate\\auth\\userinterface","illuminate\\auth\\userproviderinterface","illuminate\\auth\\usertrait","illuminate\\cache\\apcstore","illuminate\\cache\\apcwrapper","illuminate\\cache\\arraystore","illuminate\\cache\\cachemanager","illuminate\\cache\\cacheserviceprovider","illuminate\\cache\\console\\cachetablecommand","illuminate\\cache\\console\\clearcommand","illuminate\\cache\\databasestore","illuminate\\cache\\filestore","illuminate\\cache\\memcachedconnector","illuminate\\cache\\memcachedstore","illuminate\\cache\\nullstore","illuminate\\cache\\redisstore","illuminate\\cache\\redistaggedcache","illuminate\\cache\\repository","illuminate\\cache\\storeinterface","illuminate\\cache\\tagset","illuminate\\cache\\taggablestore","illuminate\\cache\\taggedcache","illuminate\\cache\\wincachestore","illuminate\\cache\\xcachestore","illuminate\\config\\environmentvariables","illuminate\\config\\environmentvariablesloaderinterface","illuminate\\config\\fileenvironmentvariablesloader","illuminate\\config\\fileloader","illuminate\\config\\loaderinterface","illuminate\\config\\repository","illuminate\\console\\application","illuminate\\console\\command","illuminate\\console\\confirmabletrait","illuminate\\container\\bindingresolutionexception","illuminate\\container\\container","illuminate\\cookie\\cookiejar","illuminate\\cookie\\cookieserviceprovider","illuminate\\cookie\\guard","illuminate\\cookie\\queue","illuminate\\database\\capsule\\manager","illuminate\\database\\connection","illuminate\\database\\connectioninterface","illuminate\\database\\connectionresolver","illuminate\\database\\connectionresolverinterface","illuminate\\database\\connectors\\connectionfactory","illuminate\\database\\connectors\\connector","illuminate\\database\\connectors\\connectorinterface","illuminate\\database\\connectors\\mysqlconnector","illuminate\\database\\connectors\\postgresconnector","illuminate\\database\\connectors\\sqliteconnector","illuminate\\database\\connectors\\sqlserverconnector","illuminate\\database\\console\\migrations\\basecommand","illuminate\\database\\console\\migrations\\installcommand","illuminate\\database\\console\\migrations\\migratecommand","illuminate\\database\\console\\migrations\\migratemakecommand","illuminate\\database\\console\\migrations\\refreshcommand","illuminate\\database\\console\\migrations\\resetcommand","illuminate\\database\\console\\migrations\\rollbackcommand","illuminate\\database\\console\\seedcommand","illuminate\\database\\databasemanager","illuminate\\database\\databaseserviceprovider","illuminate\\database\\eloquent\\builder","illuminate\\database\\eloquent\\collection","illuminate\\database\\eloquent\\massassignmentexception","illuminate\\database\\eloquent\\model","illuminate\\database\\eloquent\\modelnotfoundexception","illuminate\\database\\eloquent\\relations\\belongsto","illuminate\\database\\eloquent\\relations\\belongstomany","illuminate\\database\\eloquent\\relations\\hasmany","illuminate\\database\\eloquent\\relations\\hasmanythrough","illuminate\\database\\eloquent\\relations\\hasone","illuminate\\database\\eloquent\\relations\\hasoneormany","illuminate\\database\\eloquent\\relations\\morphmany","illuminate\\database\\eloquent\\relations\\morphone","illuminate\\database\\eloquent\\relations\\morphoneormany","illuminate\\database\\eloquent\\relations\\morphpivot","illuminate\\database\\eloquent\\relations\\morphto","illuminate\\database\\eloquent\\relations\\morphtomany","illuminate\\database\\eloquent\\relations\\pivot","illuminate\\database\\eloquent\\relations\\relation","illuminate\\database\\eloquent\\scopeinterface","illuminate\\database\\eloquent\\softdeletingscope","illuminate\\database\\eloquent\\softdeletingtrait","illuminate\\database\\grammar","illuminate\\database\\migrationserviceprovider","illuminate\\database\\migrations\\databasemigrationrepository","illuminate\\database\\migrations\\migration","illuminate\\database\\migrations\\migrationcreator","illuminate\\database\\migrations\\migrationrepositoryinterface","illuminate\\database\\migrations\\migrator","illuminate\\database\\mysqlconnection","illuminate\\database\\postgresconnection","illuminate\\database\\queryexception","illuminate\\database\\query\\builder","illuminate\\database\\query\\expression","illuminate\\database\\query\\grammars\\grammar","illuminate\\database\\query\\grammars\\mysqlgrammar","illuminate\\database\\query\\grammars\\postgresgrammar","illuminate\\database\\query\\grammars\\sqlitegrammar","illuminate\\database\\query\\grammars\\sqlservergrammar","illuminate\\database\\query\\joinclause","illuminate\\database\\query\\processors\\mysqlprocessor","illuminate\\database\\query\\processors\\postgresprocessor","illuminate\\database\\query\\processors\\processor","illuminate\\database\\query\\processors\\sqliteprocessor","illuminate\\database\\query\\processors\\sqlserverprocessor","illuminate\\database\\sqliteconnection","illuminate\\database\\schema\\blueprint","illuminate\\database\\schema\\builder","illuminate\\database\\schema\\grammars\\grammar","illuminate\\database\\schema\\grammars\\mysqlgrammar","illuminate\\database\\schema\\grammars\\postgresgrammar","illuminate\\database\\schema\\grammars\\sqlitegrammar","illuminate\\database\\schema\\grammars\\sqlservergrammar","illuminate\\database\\schema\\mysqlbuilder","illuminate\\database\\seedserviceprovider","illuminate\\database\\seeder","illuminate\\database\\sqlserverconnection","illuminate\\encryption\\decryptexception","illuminate\\encryption\\encrypter","illuminate\\encryption\\encryptionserviceprovider","illuminate\\events\\dispatcher","illuminate\\events\\eventserviceprovider","illuminate\\exception\\exceptiondisplayerinterface","illuminate\\exception\\exceptionserviceprovider","illuminate\\exception\\handler","illuminate\\exception\\plaindisplayer","illuminate\\exception\\symfonydisplayer","illuminate\\exception\\whoopsdisplayer","illuminate\\filesystem\\filenotfoundexception","illuminate\\filesystem\\filesystem","illuminate\\filesystem\\filesystemserviceprovider","illuminate\\foundation\\aliasloader","illuminate\\foundation\\application","illuminate\\foundation\\artisan","illuminate\\foundation\\assetpublisher","illuminate\\foundation\\composer","illuminate\\foundation\\configpublisher","illuminate\\foundation\\console\\assetpublishcommand","illuminate\\foundation\\console\\autoloadcommand","illuminate\\foundation\\console\\changescommand","illuminate\\foundation\\console\\clearcompiledcommand","illuminate\\foundation\\console\\commandmakecommand","illuminate\\foundation\\console\\configpublishcommand","illuminate\\foundation\\console\\downcommand","illuminate\\foundation\\console\\environmentcommand","illuminate\\foundation\\console\\keygeneratecommand","illuminate\\foundation\\console\\migratepublishcommand","illuminate\\foundation\\console\\optimizecommand","illuminate\\foundation\\console\\routescommand","illuminate\\foundation\\console\\servecommand","illuminate\\foundation\\console\\tailcommand","illuminate\\foundation\\console\\tinkercommand","illuminate\\foundation\\console\\upcommand","illuminate\\foundation\\console\\viewpublishcommand","illuminate\\foundation\\environmentdetector","illuminate\\foundation\\migrationpublisher","illuminate\\foundation\\providerrepository","illuminate\\foundation\\providers\\artisanserviceprovider","illuminate\\foundation\\providers\\commandcreatorserviceprovider","illuminate\\foundation\\providers\\composerserviceprovider","illuminate\\foundation\\providers\\consolesupportserviceprovider","illuminate\\foundation\\providers\\keygeneratorserviceprovider","illuminate\\foundation\\providers\\maintenanceserviceprovider","illuminate\\foundation\\providers\\optimizeserviceprovider","illuminate\\foundation\\providers\\publisherserviceprovider","illuminate\\foundation\\providers\\routelistserviceprovider","illuminate\\foundation\\providers\\serverserviceprovider","illuminate\\foundation\\providers\\tinkerserviceprovider","illuminate\\foundation\\testing\\applicationtrait","illuminate\\foundation\\testing\\assertionstrait","illuminate\\foundation\\testing\\client","illuminate\\foundation\\testing\\testcase","illuminate\\foundation\\viewpublisher","illuminate\\hashing\\bcrypthasher","illuminate\\hashing\\hashserviceprovider","illuminate\\hashing\\hasherinterface","illuminate\\html\\formbuilder","illuminate\\html\\htmlbuilder","illuminate\\html\\htmlserviceprovider","illuminate\\http\\frameguard","illuminate\\http\\jsonresponse","illuminate\\http\\redirectresponse","illuminate\\http\\request","illuminate\\http\\response","illuminate\\http\\responsetrait","illuminate\\log\\logserviceprovider","illuminate\\log\\writer","illuminate\\mail\\mailserviceprovider","illuminate\\mail\\mailer","illuminate\\mail\\message","illuminate\\mail\\transport\\logtransport","illuminate\\mail\\transport\\mailguntransport","illuminate\\mail\\transport\\mandrilltransport","illuminate\\pagination\\bootstrappresenter","illuminate\\pagination\\factory","illuminate\\pagination\\paginationserviceprovider","illuminate\\pagination\\paginator","illuminate\\pagination\\presenter","illuminate\\queue\\beanstalkdqueue","illuminate\\queue\\capsule\\manager","illuminate\\queue\\connectors\\beanstalkdconnector","illuminate\\queue\\connectors\\connectorinterface","illuminate\\queue\\connectors\\ironconnector","illuminate\\queue\\connectors\\redisconnector","illuminate\\queue\\connectors\\sqsconnector","illuminate\\queue\\connectors\\syncconnector","illuminate\\queue\\console\\failedtablecommand","illuminate\\queue\\console\\flushfailedcommand","illuminate\\queue\\console\\forgetfailedcommand","illuminate\\queue\\console\\listfailedcommand","illuminate\\queue\\console\\listencommand","illuminate\\queue\\console\\restartcommand","illuminate\\queue\\console\\retrycommand","illuminate\\queue\\console\\subscribecommand","illuminate\\queue\\console\\workcommand","illuminate\\queue\\failconsoleserviceprovider","illuminate\\queue\\failed\\databasefailedjobprovider","illuminate\\queue\\failed\\failedjobproviderinterface","illuminate\\queue\\ironqueue","illuminate\\queue\\jobs\\beanstalkdjob","illuminate\\queue\\jobs\\ironjob","illuminate\\queue\\jobs\\job","illuminate\\queue\\jobs\\redisjob","illuminate\\queue\\jobs\\sqsjob","illuminate\\queue\\jobs\\syncjob","illuminate\\queue\\listener","illuminate\\queue\\queue","illuminate\\queue\\queueinterface","illuminate\\queue\\queuemanager","illuminate\\queue\\queueserviceprovider","illuminate\\queue\\redisqueue","illuminate\\queue\\sqsqueue","illuminate\\queue\\syncqueue","illuminate\\queue\\worker","illuminate\\redis\\database","illuminate\\redis\\redisserviceprovider","illuminate\\remote\\connection","illuminate\\remote\\connectioninterface","illuminate\\remote\\gatewayinterface","illuminate\\remote\\multiconnection","illuminate\\remote\\remotemanager","illuminate\\remote\\remoteserviceprovider","illuminate\\remote\\seclibgateway","illuminate\\routing\\console\\makecontrollercommand","illuminate\\routing\\controller","illuminate\\routing\\controllerdispatcher","illuminate\\routing\\controllerinspector","illuminate\\routing\\controllerserviceprovider","illuminate\\routing\\generators\\controllergenerator","illuminate\\routing\\matching\\hostvalidator","illuminate\\routing\\matching\\methodvalidator","illuminate\\routing\\matching\\schemevalidator","illuminate\\routing\\matching\\urivalidator","illuminate\\routing\\matching\\validatorinterface","illuminate\\routing\\redirector","illuminate\\routing\\route","illuminate\\routing\\routecollection","illuminate\\routing\\routefiltererinterface","illuminate\\routing\\router","illuminate\\routing\\routingserviceprovider","illuminate\\routing\\urlgenerator","illuminate\\session\\cachebasedsessionhandler","illuminate\\session\\commandsserviceprovider","illuminate\\session\\console\\sessiontablecommand","illuminate\\session\\cookiesessionhandler","illuminate\\session\\databasesessionhandler","illuminate\\session\\existenceawareinterface","illuminate\\session\\filesessionhandler","illuminate\\session\\middleware","illuminate\\session\\sessioninterface","illuminate\\session\\sessionmanager","illuminate\\session\\sessionserviceprovider","illuminate\\session\\store","illuminate\\session\\tokenmismatchexception","illuminate\\support\\arr","illuminate\\support\\classloader","illuminate\\support\\collection","illuminate\\support\\contracts\\arrayableinterface","illuminate\\support\\contracts\\jsonableinterface","illuminate\\support\\contracts\\messageproviderinterface","illuminate\\support\\contracts\\renderableinterface","illuminate\\support\\contracts\\responsepreparerinterface","illuminate\\support\\facades\\app","illuminate\\support\\facades\\artisan","illuminate\\support\\facades\\auth","illuminate\\support\\facades\\blade","illuminate\\support\\facades\\cache","illuminate\\support\\facades\\config","illuminate\\support\\facades\\cookie","illuminate\\support\\facades\\crypt","illuminate\\support\\facades\\db","illuminate\\support\\facades\\event","illuminate\\support\\facades\\facade","illuminate\\support\\facades\\file","illuminate\\support\\facades\\form","illuminate\\support\\facades\\html","illuminate\\support\\facades\\hash","illuminate\\support\\facades\\input","illuminate\\support\\facades\\lang","illuminate\\support\\facades\\log","illuminate\\support\\facades\\mail","illuminate\\support\\facades\\paginator","illuminate\\support\\facades\\password","illuminate\\support\\facades\\queue","illuminate\\support\\facades\\redirect","illuminate\\support\\facades\\redis","illuminate\\support\\facades\\request","illuminate\\support\\facades\\response","illuminate\\support\\facades\\route","illuminate\\support\\facades\\ssh","illuminate\\support\\facades\\schema","illuminate\\support\\facades\\session","illuminate\\support\\facades\\url","illuminate\\support\\facades\\validator","illuminate\\support\\facades\\view","illuminate\\support\\fluent","illuminate\\support\\manager","illuminate\\support\\messagebag","illuminate\\support\\namespaceditemresolver","illuminate\\support\\pluralizer","illuminate\\support\\serializableclosure","illuminate\\support\\serviceprovider","illuminate\\support\\str","illuminate\\support\\traits\\capsulemanagertrait","illuminate\\support\\traits\\macroabletrait","illuminate\\support\\viewerrorbag","illuminate\\translation\\fileloader","illuminate\\translation\\loaderinterface","illuminate\\translation\\translationserviceprovider","illuminate\\translation\\translator","illuminate\\validation\\databasepresenceverifier","illuminate\\validation\\factory","illuminate\\validation\\presenceverifierinterface","illuminate\\validation\\validationserviceprovider","illuminate\\validation\\validator","illuminate\\view\\compilers\\bladecompiler","illuminate\\view\\compilers\\compiler","illuminate\\view\\compilers\\compilerinterface","illuminate\\view\\engines\\compilerengine","illuminate\\view\\engines\\engine","illuminate\\view\\engines\\engineinterface","illuminate\\view\\engines\\engineresolver","illuminate\\view\\engines\\phpengine","illuminate\\view\\factory","illuminate\\view\\fileviewfinder","illuminate\\view\\view","illuminate\\view\\viewfinderinterface","illuminate\\view\\viewserviceprovider","illuminate\\workbench\\console\\workbenchmakecommand","illuminate\\workbench\\package","illuminate\\workbench\\packagecreator","illuminate\\workbench\\starter","illuminate\\workbench\\workbenchserviceprovider","illuminatequeueclosure::__construct","illuminatequeueclosure::fire","illuminate\\auth\\authmanager::createdatabasedriver","illuminate\\auth\\authmanager::createeloquentdriver","illuminate\\auth\\authmanager::getdefaultdriver","illuminate\\auth\\authmanager::setdefaultdriver","illuminate\\auth\\authserviceprovider::register","illuminate\\auth\\authserviceprovider::provides","illuminate\\auth\\console\\clearreminderscommand::fire","illuminate\\auth\\console\\reminderscontrollercommand::__construct","illuminate\\auth\\console\\reminderscontrollercommand::fire","illuminate\\auth\\console\\reminderstablecommand::__construct","illuminate\\auth\\console\\reminderstablecommand::fire","illuminate\\auth\\databaseuserprovider::__construct","illuminate\\auth\\databaseuserprovider::retrievebyid","illuminate\\auth\\databaseuserprovider::retrievebytoken","illuminate\\auth\\databaseuserprovider::updateremembertoken","illuminate\\auth\\databaseuserprovider::retrievebycredentials","illuminate\\auth\\databaseuserprovider::validatecredentials","illuminate\\auth\\eloquentuserprovider::__construct","illuminate\\auth\\eloquentuserprovider::retrievebyid","illuminate\\auth\\eloquentuserprovider::retrievebytoken","illuminate\\auth\\eloquentuserprovider::updateremembertoken","illuminate\\auth\\eloquentuserprovider::retrievebycredentials","illuminate\\auth\\eloquentuserprovider::validatecredentials","illuminate\\auth\\eloquentuserprovider::createmodel","illuminate\\auth\\genericuser::__construct","illuminate\\auth\\genericuser::getauthidentifier","illuminate\\auth\\genericuser::getauthpassword","illuminate\\auth\\genericuser::getremembertoken","illuminate\\auth\\genericuser::setremembertoken","illuminate\\auth\\genericuser::getremembertokenname","illuminate\\auth\\genericuser::__get","illuminate\\auth\\genericuser::__set","illuminate\\auth\\genericuser::__isset","illuminate\\auth\\genericuser::__unset","illuminate\\auth\\guard::__construct","illuminate\\auth\\guard::check","illuminate\\auth\\guard::guest","illuminate\\auth\\guard::user","illuminate\\auth\\guard::id","illuminate\\auth\\guard::once","illuminate\\auth\\guard::validate","illuminate\\auth\\guard::basic","illuminate\\auth\\guard::oncebasic","illuminate\\auth\\guard::attempt","illuminate\\auth\\guard::attempting","illuminate\\auth\\guard::login","illuminate\\auth\\guard::loginusingid","illuminate\\auth\\guard::onceusingid","illuminate\\auth\\guard::logout","illuminate\\auth\\guard::getcookiejar","illuminate\\auth\\guard::setcookiejar","illuminate\\auth\\guard::getdispatcher","illuminate\\auth\\guard::setdispatcher","illuminate\\auth\\guard::getsession","illuminate\\auth\\guard::getprovider","illuminate\\auth\\guard::setprovider","illuminate\\auth\\guard::getuser","illuminate\\auth\\guard::setuser","illuminate\\auth\\guard::getrequest","illuminate\\auth\\guard::setrequest","illuminate\\auth\\guard::getlastattempted","illuminate\\auth\\guard::getname","illuminate\\auth\\guard::getrecallername","illuminate\\auth\\guard::viaremember","illuminate\\auth\\reminders\\databasereminderrepository::__construct","illuminate\\auth\\reminders\\databasereminderrepository::create","illuminate\\auth\\reminders\\databasereminderrepository::exists","illuminate\\auth\\reminders\\databasereminderrepository::delete","illuminate\\auth\\reminders\\databasereminderrepository::deleteexpired","illuminate\\auth\\reminders\\databasereminderrepository::createnewtoken","illuminate\\auth\\reminders\\databasereminderrepository::getconnection","illuminate\\auth\\reminders\\passwordbroker::__construct","illuminate\\auth\\reminders\\passwordbroker::remind","illuminate\\auth\\reminders\\passwordbroker::sendreminder","illuminate\\auth\\reminders\\passwordbroker::reset","illuminate\\auth\\reminders\\passwordbroker::validator","illuminate\\auth\\reminders\\passwordbroker::getuser","illuminate\\auth\\reminders\\remindableinterface::getreminderemail","illuminate\\auth\\reminders\\remindabletrait::getreminderemail","illuminate\\auth\\reminders\\reminderrepositoryinterface::create","illuminate\\auth\\reminders\\reminderrepositoryinterface::exists","illuminate\\auth\\reminders\\reminderrepositoryinterface::delete","illuminate\\auth\\reminders\\reminderrepositoryinterface::deleteexpired","illuminate\\auth\\reminders\\reminderserviceprovider::register","illuminate\\auth\\reminders\\reminderserviceprovider::provides","illuminate\\auth\\userinterface::getauthidentifier","illuminate\\auth\\userinterface::getauthpassword","illuminate\\auth\\userinterface::getremembertoken","illuminate\\auth\\userinterface::setremembertoken","illuminate\\auth\\userinterface::getremembertokenname","illuminate\\auth\\userproviderinterface::retrievebyid","illuminate\\auth\\userproviderinterface::retrievebytoken","illuminate\\auth\\userproviderinterface::updateremembertoken","illuminate\\auth\\userproviderinterface::retrievebycredentials","illuminate\\auth\\userproviderinterface::validatecredentials","illuminate\\auth\\usertrait::getauthidentifier","illuminate\\auth\\usertrait::getauthpassword","illuminate\\auth\\usertrait::getremembertoken","illuminate\\auth\\usertrait::setremembertoken","illuminate\\auth\\usertrait::getremembertokenname","illuminate\\cache\\apcstore::__construct","illuminate\\cache\\apcstore::get","illuminate\\cache\\apcstore::put","illuminate\\cache\\apcstore::increment","illuminate\\cache\\apcstore::decrement","illuminate\\cache\\apcstore::forever","illuminate\\cache\\apcstore::forget","illuminate\\cache\\apcstore::flush","illuminate\\cache\\apcstore::getprefix","illuminate\\cache\\apcwrapper::__construct","illuminate\\cache\\apcwrapper::get","illuminate\\cache\\apcwrapper::put","illuminate\\cache\\apcwrapper::increment","illuminate\\cache\\apcwrapper::decrement","illuminate\\cache\\apcwrapper::delete","illuminate\\cache\\apcwrapper::flush","illuminate\\cache\\arraystore::get","illuminate\\cache\\arraystore::put","illuminate\\cache\\arraystore::increment","illuminate\\cache\\arraystore::decrement","illuminate\\cache\\arraystore::forever","illuminate\\cache\\arraystore::forget","illuminate\\cache\\arraystore::flush","illuminate\\cache\\arraystore::getprefix","illuminate\\cache\\cachemanager::getprefix","illuminate\\cache\\cachemanager::setprefix","illuminate\\cache\\cachemanager::getdefaultdriver","illuminate\\cache\\cachemanager::setdefaultdriver","illuminate\\cache\\cacheserviceprovider::register","illuminate\\cache\\cacheserviceprovider::registercommands","illuminate\\cache\\cacheserviceprovider::provides","illuminate\\cache\\console\\cachetablecommand::__construct","illuminate\\cache\\console\\cachetablecommand::fire","illuminate\\cache\\console\\clearcommand::__construct","illuminate\\cache\\console\\clearcommand::fire","illuminate\\cache\\databasestore::__construct","illuminate\\cache\\databasestore::get","illuminate\\cache\\databasestore::put","illuminate\\cache\\databasestore::increment","illuminate\\cache\\databasestore::decrement","illuminate\\cache\\databasestore::forever","illuminate\\cache\\databasestore::forget","illuminate\\cache\\databasestore::flush","illuminate\\cache\\databasestore::getconnection","illuminate\\cache\\databasestore::getencrypter","illuminate\\cache\\databasestore::getprefix","illuminate\\cache\\filestore::__construct","illuminate\\cache\\filestore::get","illuminate\\cache\\filestore::put","illuminate\\cache\\filestore::increment","illuminate\\cache\\filestore::decrement","illuminate\\cache\\filestore::forever","illuminate\\cache\\filestore::forget","illuminate\\cache\\filestore::flush","illuminate\\cache\\filestore::getfilesystem","illuminate\\cache\\filestore::getdirectory","illuminate\\cache\\filestore::getprefix","illuminate\\cache\\memcachedconnector::connect","illuminate\\cache\\memcachedstore::__construct","illuminate\\cache\\memcachedstore::get","illuminate\\cache\\memcachedstore::put","illuminate\\cache\\memcachedstore::increment","illuminate\\cache\\memcachedstore::decrement","illuminate\\cache\\memcachedstore::forever","illuminate\\cache\\memcachedstore::forget","illuminate\\cache\\memcachedstore::flush","illuminate\\cache\\memcachedstore::getmemcached","illuminate\\cache\\memcachedstore::getprefix","illuminate\\cache\\nullstore::get","illuminate\\cache\\nullstore::put","illuminate\\cache\\nullstore::increment","illuminate\\cache\\nullstore::decrement","illuminate\\cache\\nullstore::forever","illuminate\\cache\\nullstore::forget","illuminate\\cache\\nullstore::flush","illuminate\\cache\\nullstore::getprefix","illuminate\\cache\\redisstore::__construct","illuminate\\cache\\redisstore::get","illuminate\\cache\\redisstore::put","illuminate\\cache\\redisstore::increment","illuminate\\cache\\redisstore::decrement","illuminate\\cache\\redisstore::forever","illuminate\\cache\\redisstore::forget","illuminate\\cache\\redisstore::flush","illuminate\\cache\\redisstore::tags","illuminate\\cache\\redisstore::connection","illuminate\\cache\\redisstore::setconnection","illuminate\\cache\\redisstore::getredis","illuminate\\cache\\redisstore::getprefix","illuminate\\cache\\redistaggedcache::forever","illuminate\\cache\\redistaggedcache::flush","illuminate\\cache\\repository::__construct","illuminate\\cache\\repository::has","illuminate\\cache\\repository::get","illuminate\\cache\\repository::pull","illuminate\\cache\\repository::put","illuminate\\cache\\repository::add","illuminate\\cache\\repository::remember","illuminate\\cache\\repository::sear","illuminate\\cache\\repository::rememberforever","illuminate\\cache\\repository::getdefaultcachetime","illuminate\\cache\\repository::setdefaultcachetime","illuminate\\cache\\repository::getstore","illuminate\\cache\\repository::offsetexists","illuminate\\cache\\repository::offsetget","illuminate\\cache\\repository::offsetset","illuminate\\cache\\repository::offsetunset","illuminate\\cache\\repository::__call","illuminate\\cache\\storeinterface::get","illuminate\\cache\\storeinterface::put","illuminate\\cache\\storeinterface::increment","illuminate\\cache\\storeinterface::decrement","illuminate\\cache\\storeinterface::forever","illuminate\\cache\\storeinterface::forget","illuminate\\cache\\storeinterface::flush","illuminate\\cache\\storeinterface::getprefix","illuminate\\cache\\tagset::__construct","illuminate\\cache\\tagset::reset","illuminate\\cache\\tagset::tagid","illuminate\\cache\\tagset::getnamespace","illuminate\\cache\\tagset::resettag","illuminate\\cache\\tagset::tagkey","illuminate\\cache\\taggablestore::section","illuminate\\cache\\taggablestore::tags","illuminate\\cache\\taggedcache::__construct","illuminate\\cache\\taggedcache::has","illuminate\\cache\\taggedcache::get","illuminate\\cache\\taggedcache::put","illuminate\\cache\\taggedcache::add","illuminate\\cache\\taggedcache::increment","illuminate\\cache\\taggedcache::decrement","illuminate\\cache\\taggedcache::forever","illuminate\\cache\\taggedcache::forget","illuminate\\cache\\taggedcache::flush","illuminate\\cache\\taggedcache::remember","illuminate\\cache\\taggedcache::sear","illuminate\\cache\\taggedcache::rememberforever","illuminate\\cache\\taggedcache::taggeditemkey","illuminate\\cache\\taggedcache::getprefix","illuminate\\cache\\wincachestore::__construct","illuminate\\cache\\wincachestore::get","illuminate\\cache\\wincachestore::put","illuminate\\cache\\wincachestore::increment","illuminate\\cache\\wincachestore::decrement","illuminate\\cache\\wincachestore::forever","illuminate\\cache\\wincachestore::forget","illuminate\\cache\\wincachestore::flush","illuminate\\cache\\wincachestore::getprefix","illuminate\\cache\\xcachestore::__construct","illuminate\\cache\\xcachestore::get","illuminate\\cache\\xcachestore::put","illuminate\\cache\\xcachestore::increment","illuminate\\cache\\xcachestore::decrement","illuminate\\cache\\xcachestore::forever","illuminate\\cache\\xcachestore::forget","illuminate\\cache\\xcachestore::flush","illuminate\\cache\\xcachestore::getprefix","illuminate\\config\\environmentvariables::__construct","illuminate\\config\\environmentvariables::load","illuminate\\config\\environmentvariablesloaderinterface::load","illuminate\\config\\fileenvironmentvariablesloader::__construct","illuminate\\config\\fileenvironmentvariablesloader::load","illuminate\\config\\fileloader::__construct","illuminate\\config\\fileloader::load","illuminate\\config\\fileloader::exists","illuminate\\config\\fileloader::cascadepackage","illuminate\\config\\fileloader::addnamespace","illuminate\\config\\fileloader::getnamespaces","illuminate\\config\\fileloader::getfilesystem","illuminate\\config\\loaderinterface::load","illuminate\\config\\loaderinterface::exists","illuminate\\config\\loaderinterface::addnamespace","illuminate\\config\\loaderinterface::getnamespaces","illuminate\\config\\loaderinterface::cascadepackage","illuminate\\config\\repository::__construct","illuminate\\config\\repository::has","illuminate\\config\\repository::hasgroup","illuminate\\config\\repository::get","illuminate\\config\\repository::set","illuminate\\config\\repository::package","illuminate\\config\\repository::afterloading","illuminate\\config\\repository::addnamespace","illuminate\\config\\repository::getnamespaces","illuminate\\config\\repository::getloader","illuminate\\config\\repository::setloader","illuminate\\config\\repository::getenvironment","illuminate\\config\\repository::getafterloadcallbacks","illuminate\\config\\repository::getitems","illuminate\\config\\repository::offsetexists","illuminate\\config\\repository::offsetget","illuminate\\config\\repository::offsetset","illuminate\\config\\repository::offsetunset","illuminate\\console\\application::start","illuminate\\console\\application::make","illuminate\\console\\application::boot","illuminate\\console\\application::call","illuminate\\console\\application::add","illuminate\\console\\application::resolve","illuminate\\console\\application::resolvecommands","illuminate\\console\\application::renderexception","illuminate\\console\\application::setexceptionhandler","illuminate\\console\\application::setlaravel","illuminate\\console\\application::setautoexit","illuminate\\console\\command::__construct","illuminate\\console\\command::run","illuminate\\console\\command::call","illuminate\\console\\command::callsilent","illuminate\\console\\command::argument","illuminate\\console\\command::option","illuminate\\console\\command::confirm","illuminate\\console\\command::ask","illuminate\\console\\command::askwithcompletion","illuminate\\console\\command::secret","illuminate\\console\\command::choice","illuminate\\console\\command::table","illuminate\\console\\command::info","illuminate\\console\\command::line","illuminate\\console\\command::comment","illuminate\\console\\command::question","illuminate\\console\\command::error","illuminate\\console\\command::getoutput","illuminate\\console\\command::getlaravel","illuminate\\console\\command::setlaravel","illuminate\\console\\confirmabletrait::confirmtoproceed","illuminate\\container\\container::bound","illuminate\\container\\container::resolved","illuminate\\container\\container::isalias","illuminate\\container\\container::bind","illuminate\\container\\container::bindif","illuminate\\container\\container::singleton","illuminate\\container\\container::share","illuminate\\container\\container::bindshared","illuminate\\container\\container::extend","illuminate\\container\\container::instance","illuminate\\container\\container::alias","illuminate\\container\\container::rebinding","illuminate\\container\\container::refresh","illuminate\\container\\container::make","illuminate\\container\\container::build","illuminate\\container\\container::resolving","illuminate\\container\\container::resolvingany","illuminate\\container\\container::isshared","illuminate\\container\\container::getbindings","illuminate\\container\\container::forgetinstance","illuminate\\container\\container::forgetinstances","illuminate\\container\\container::offsetexists","illuminate\\container\\container::offsetget","illuminate\\container\\container::offsetset","illuminate\\container\\container::offsetunset","illuminate\\container\\container::__get","illuminate\\container\\container::__set","illuminate\\cookie\\cookiejar::make","illuminate\\cookie\\cookiejar::forever","illuminate\\cookie\\cookiejar::forget","illuminate\\cookie\\cookiejar::hasqueued","illuminate\\cookie\\cookiejar::queued","illuminate\\cookie\\cookiejar::queue","illuminate\\cookie\\cookiejar::unqueue","illuminate\\cookie\\cookiejar::setdefaultpathanddomain","illuminate\\cookie\\cookiejar::getqueuedcookies","illuminate\\cookie\\cookieserviceprovider::register","illuminate\\cookie\\guard::__construct","illuminate\\cookie\\guard::handle","illuminate\\cookie\\queue::__construct","illuminate\\cookie\\queue::handle","illuminate\\database\\capsule\\manager::__construct","illuminate\\database\\capsule\\manager::connection","illuminate\\database\\capsule\\manager::table","illuminate\\database\\capsule\\manager::schema","illuminate\\database\\capsule\\manager::getconnection","illuminate\\database\\capsule\\manager::addconnection","illuminate\\database\\capsule\\manager::booteloquent","illuminate\\database\\capsule\\manager::setfetchmode","illuminate\\database\\capsule\\manager::getdatabasemanager","illuminate\\database\\capsule\\manager::geteventdispatcher","illuminate\\database\\capsule\\manager::seteventdispatcher","illuminate\\database\\capsule\\manager::getcachemanager","illuminate\\database\\capsule\\manager::setcachemanager","illuminate\\database\\capsule\\manager::__callstatic","illuminate\\database\\connection::__construct","illuminate\\database\\connection::usedefaultquerygrammar","illuminate\\database\\connection::usedefaultschemagrammar","illuminate\\database\\connection::usedefaultpostprocessor","illuminate\\database\\connection::getschemabuilder","illuminate\\database\\connection::table","illuminate\\database\\connection::raw","illuminate\\database\\connection::selectone","illuminate\\database\\connection::selectfromwriteconnection","illuminate\\database\\connection::select","illuminate\\database\\connection::insert","illuminate\\database\\connection::update","illuminate\\database\\connection::delete","illuminate\\database\\connection::statement","illuminate\\database\\connection::affectingstatement","illuminate\\database\\connection::unprepared","illuminate\\database\\connection::preparebindings","illuminate\\database\\connection::transaction","illuminate\\database\\connection::begintransaction","illuminate\\database\\connection::commit","illuminate\\database\\connection::rollback","illuminate\\database\\connection::transactionlevel","illuminate\\database\\connection::pretend","illuminate\\database\\connection::disconnect","illuminate\\database\\connection::reconnect","illuminate\\database\\connection::logquery","illuminate\\database\\connection::listen","illuminate\\database\\connection::getdoctrinecolumn","illuminate\\database\\connection::getdoctrineschemamanager","illuminate\\database\\connection::getdoctrineconnection","illuminate\\database\\connection::getpdo","illuminate\\database\\connection::getreadpdo","illuminate\\database\\connection::setpdo","illuminate\\database\\connection::setreadpdo","illuminate\\database\\connection::setreconnector","illuminate\\database\\connection::getname","illuminate\\database\\connection::getconfig","illuminate\\database\\connection::getdrivername","illuminate\\database\\connection::getquerygrammar","illuminate\\database\\connection::setquerygrammar","illuminate\\database\\connection::getschemagrammar","illuminate\\database\\connection::setschemagrammar","illuminate\\database\\connection::getpostprocessor","illuminate\\database\\connection::setpostprocessor","illuminate\\database\\connection::geteventdispatcher","illuminate\\database\\connection::seteventdispatcher","illuminate\\database\\connection::getpaginator","illuminate\\database\\connection::setpaginator","illuminate\\database\\connection::getcachemanager","illuminate\\database\\connection::setcachemanager","illuminate\\database\\connection::pretending","illuminate\\database\\connection::getfetchmode","illuminate\\database\\connection::setfetchmode","illuminate\\database\\connection::getquerylog","illuminate\\database\\connection::flushquerylog","illuminate\\database\\connection::enablequerylog","illuminate\\database\\connection::disablequerylog","illuminate\\database\\connection::logging","illuminate\\database\\connection::getdatabasename","illuminate\\database\\connection::setdatabasename","illuminate\\database\\connection::gettableprefix","illuminate\\database\\connection::settableprefix","illuminate\\database\\connection::withtableprefix","illuminate\\database\\connectioninterface::table","illuminate\\database\\connectioninterface::raw","illuminate\\database\\connectioninterface::selectone","illuminate\\database\\connectioninterface::select","illuminate\\database\\connectioninterface::insert","illuminate\\database\\connectioninterface::update","illuminate\\database\\connectioninterface::delete","illuminate\\database\\connectioninterface::statement","illuminate\\database\\connectioninterface::affectingstatement","illuminate\\database\\connectioninterface::unprepared","illuminate\\database\\connectioninterface::preparebindings","illuminate\\database\\connectioninterface::transaction","illuminate\\database\\connectioninterface::begintransaction","illuminate\\database\\connectioninterface::commit","illuminate\\database\\connectioninterface::rollback","illuminate\\database\\connectioninterface::transactionlevel","illuminate\\database\\connectioninterface::pretend","illuminate\\database\\connectionresolver::__construct","illuminate\\database\\connectionresolver::connection","illuminate\\database\\connectionresolver::addconnection","illuminate\\database\\connectionresolver::hasconnection","illuminate\\database\\connectionresolver::getdefaultconnection","illuminate\\database\\connectionresolver::setdefaultconnection","illuminate\\database\\connectionresolverinterface::connection","illuminate\\database\\connectionresolverinterface::getdefaultconnection","illuminate\\database\\connectionresolverinterface::setdefaultconnection","illuminate\\database\\connectors\\connectionfactory::__construct","illuminate\\database\\connectors\\connectionfactory::make","illuminate\\database\\connectors\\connectionfactory::createconnector","illuminate\\database\\connectors\\connector::getoptions","illuminate\\database\\connectors\\connector::createconnection","illuminate\\database\\connectors\\connector::getdefaultoptions","illuminate\\database\\connectors\\connector::setdefaultoptions","illuminate\\database\\connectors\\connectorinterface::connect","illuminate\\database\\connectors\\mysqlconnector::connect","illuminate\\database\\connectors\\postgresconnector::connect","illuminate\\database\\connectors\\sqliteconnector::connect","illuminate\\database\\connectors\\sqlserverconnector::connect","illuminate\\database\\console\\migrations\\installcommand::__construct","illuminate\\database\\console\\migrations\\installcommand::fire","illuminate\\database\\console\\migrations\\migratecommand::__construct","illuminate\\database\\console\\migrations\\migratecommand::fire","illuminate\\database\\console\\migrations\\migratemakecommand::__construct","illuminate\\database\\console\\migrations\\migratemakecommand::fire","illuminate\\database\\console\\migrations\\refreshcommand::fire","illuminate\\database\\console\\migrations\\resetcommand::__construct","illuminate\\database\\console\\migrations\\resetcommand::fire","illuminate\\database\\console\\migrations\\rollbackcommand::__construct","illuminate\\database\\console\\migrations\\rollbackcommand::fire","illuminate\\database\\console\\seedcommand::__construct","illuminate\\database\\console\\seedcommand::fire","illuminate\\database\\databasemanager::__construct","illuminate\\database\\databasemanager::connection","illuminate\\database\\databasemanager::purge","illuminate\\database\\databasemanager::disconnect","illuminate\\database\\databasemanager::reconnect","illuminate\\database\\databasemanager::getdefaultconnection","illuminate\\database\\databasemanager::setdefaultconnection","illuminate\\database\\databasemanager::extend","illuminate\\database\\databasemanager::getconnections","illuminate\\database\\databasemanager::__call","illuminate\\database\\databaseserviceprovider::boot","illuminate\\database\\databaseserviceprovider::register","illuminate\\database\\eloquent\\builder::__construct","illuminate\\database\\eloquent\\builder::find","illuminate\\database\\eloquent\\builder::findmany","illuminate\\database\\eloquent\\builder::findorfail","illuminate\\database\\eloquent\\builder::first","illuminate\\database\\eloquent\\builder::firstorfail","illuminate\\database\\eloquent\\builder::get","illuminate\\database\\eloquent\\builder::pluck","illuminate\\database\\eloquent\\builder::chunk","illuminate\\database\\eloquent\\builder::lists","illuminate\\database\\eloquent\\builder::paginate","illuminate\\database\\eloquent\\builder::simplepaginate","illuminate\\database\\eloquent\\builder::update","illuminate\\database\\eloquent\\builder::increment","illuminate\\database\\eloquent\\builder::decrement","illuminate\\database\\eloquent\\builder::delete","illuminate\\database\\eloquent\\builder::forcedelete","illuminate\\database\\eloquent\\builder::ondelete","illuminate\\database\\eloquent\\builder::getmodels","illuminate\\database\\eloquent\\builder::eagerloadrelations","illuminate\\database\\eloquent\\builder::getrelation","illuminate\\database\\eloquent\\builder::where","illuminate\\database\\eloquent\\builder::orwhere","illuminate\\database\\eloquent\\builder::has","illuminate\\database\\eloquent\\builder::wherehas","illuminate\\database\\eloquent\\builder::orhas","illuminate\\database\\eloquent\\builder::orwherehas","illuminate\\database\\eloquent\\builder::with","illuminate\\database\\eloquent\\builder::getquery","illuminate\\database\\eloquent\\builder::setquery","illuminate\\database\\eloquent\\builder::geteagerloads","illuminate\\database\\eloquent\\builder::seteagerloads","illuminate\\database\\eloquent\\builder::getmodel","illuminate\\database\\eloquent\\builder::setmodel","illuminate\\database\\eloquent\\builder::macro","illuminate\\database\\eloquent\\builder::getmacro","illuminate\\database\\eloquent\\builder::__call","illuminate\\database\\eloquent\\builder::__clone","illuminate\\database\\eloquent\\collection::find","illuminate\\database\\eloquent\\collection::load","illuminate\\database\\eloquent\\collection::add","illuminate\\database\\eloquent\\collection::contains","illuminate\\database\\eloquent\\collection::fetch","illuminate\\database\\eloquent\\collection::max","illuminate\\database\\eloquent\\collection::min","illuminate\\database\\eloquent\\collection::modelkeys","illuminate\\database\\eloquent\\collection::merge","illuminate\\database\\eloquent\\collection::diff","illuminate\\database\\eloquent\\collection::intersect","illuminate\\database\\eloquent\\collection::unique","illuminate\\database\\eloquent\\collection::only","illuminate\\database\\eloquent\\collection::except","illuminate\\database\\eloquent\\collection::getdictionary","illuminate\\database\\eloquent\\collection::tobase","illuminate\\database\\eloquent\\model::__construct","illuminate\\database\\eloquent\\model::addglobalscope","illuminate\\database\\eloquent\\model::hasglobalscope","illuminate\\database\\eloquent\\model::getglobalscope","illuminate\\database\\eloquent\\model::getglobalscopes","illuminate\\database\\eloquent\\model::observe","illuminate\\database\\eloquent\\model::fill","illuminate\\database\\eloquent\\model::newinstance","illuminate\\database\\eloquent\\model::newfrombuilder","illuminate\\database\\eloquent\\model::hydrate","illuminate\\database\\eloquent\\model::hydrateraw","illuminate\\database\\eloquent\\model::create","illuminate\\database\\eloquent\\model::firstorcreate","illuminate\\database\\eloquent\\model::firstornew","illuminate\\database\\eloquent\\model::updateorcreate","illuminate\\database\\eloquent\\model::query","illuminate\\database\\eloquent\\model::on","illuminate\\database\\eloquent\\model::all","illuminate\\database\\eloquent\\model::find","illuminate\\database\\eloquent\\model::findornew","illuminate\\database\\eloquent\\model::findorfail","illuminate\\database\\eloquent\\model::load","illuminate\\database\\eloquent\\model::with","illuminate\\database\\eloquent\\model::hasone","illuminate\\database\\eloquent\\model::morphone","illuminate\\database\\eloquent\\model::belongsto","illuminate\\database\\eloquent\\model::morphto","illuminate\\database\\eloquent\\model::hasmany","illuminate\\database\\eloquent\\model::hasmanythrough","illuminate\\database\\eloquent\\model::morphmany","illuminate\\database\\eloquent\\model::belongstomany","illuminate\\database\\eloquent\\model::morphtomany","illuminate\\database\\eloquent\\model::morphedbymany","illuminate\\database\\eloquent\\model::joiningtable","illuminate\\database\\eloquent\\model::destroy","illuminate\\database\\eloquent\\model::delete","illuminate\\database\\eloquent\\model::forcedelete","illuminate\\database\\eloquent\\model::saving","illuminate\\database\\eloquent\\model::saved","illuminate\\database\\eloquent\\model::updating","illuminate\\database\\eloquent\\model::updated","illuminate\\database\\eloquent\\model::creating","illuminate\\database\\eloquent\\model::created","illuminate\\database\\eloquent\\model::deleting","illuminate\\database\\eloquent\\model::deleted","illuminate\\database\\eloquent\\model::flusheventlisteners","illuminate\\database\\eloquent\\model::getobservableevents","illuminate\\database\\eloquent\\model::setobservableevents","illuminate\\database\\eloquent\\model::addobservableevents","illuminate\\database\\eloquent\\model::removeobservableevents","illuminate\\database\\eloquent\\model::update","illuminate\\database\\eloquent\\model::push","illuminate\\database\\eloquent\\model::save","illuminate\\database\\eloquent\\model::touchowners","illuminate\\database\\eloquent\\model::touches","illuminate\\database\\eloquent\\model::touch","illuminate\\database\\eloquent\\model::setcreatedat","illuminate\\database\\eloquent\\model::setupdatedat","illuminate\\database\\eloquent\\model::getcreatedatcolumn","illuminate\\database\\eloquent\\model::getupdatedatcolumn","illuminate\\database\\eloquent\\model::freshtimestamp","illuminate\\database\\eloquent\\model::freshtimestampstring","illuminate\\database\\eloquent\\model::newquery","illuminate\\database\\eloquent\\model::newquerywithoutscope","illuminate\\database\\eloquent\\model::newquerywithoutscopes","illuminate\\database\\eloquent\\model::applyglobalscopes","illuminate\\database\\eloquent\\model::removeglobalscopes","illuminate\\database\\eloquent\\model::neweloquentbuilder","illuminate\\database\\eloquent\\model::newcollection","illuminate\\database\\eloquent\\model::newpivot","illuminate\\database\\eloquent\\model::gettable","illuminate\\database\\eloquent\\model::settable","illuminate\\database\\eloquent\\model::getkey","illuminate\\database\\eloquent\\model::getkeyname","illuminate\\database\\eloquent\\model::setkeyname","illuminate\\database\\eloquent\\model::getqualifiedkeyname","illuminate\\database\\eloquent\\model::usestimestamps","illuminate\\database\\eloquent\\model::getmorphclass","illuminate\\database\\eloquent\\model::getperpage","illuminate\\database\\eloquent\\model::setperpage","illuminate\\database\\eloquent\\model::getforeignkey","illuminate\\database\\eloquent\\model::gethidden","illuminate\\database\\eloquent\\model::sethidden","illuminate\\database\\eloquent\\model::setvisible","illuminate\\database\\eloquent\\model::setappends","illuminate\\database\\eloquent\\model::getfillable","illuminate\\database\\eloquent\\model::fillable","illuminate\\database\\eloquent\\model::guard","illuminate\\database\\eloquent\\model::unguard","illuminate\\database\\eloquent\\model::reguard","illuminate\\database\\eloquent\\model::setunguardstate","illuminate\\database\\eloquent\\model::isfillable","illuminate\\database\\eloquent\\model::isguarded","illuminate\\database\\eloquent\\model::totallyguarded","illuminate\\database\\eloquent\\model::gettouchedrelations","illuminate\\database\\eloquent\\model::settouchedrelations","illuminate\\database\\eloquent\\model::getincrementing","illuminate\\database\\eloquent\\model::setincrementing","illuminate\\database\\eloquent\\model::tojson","illuminate\\database\\eloquent\\model::jsonserialize","illuminate\\database\\eloquent\\model::toarray","illuminate\\database\\eloquent\\model::attributestoarray","illuminate\\database\\eloquent\\model::relationstoarray","illuminate\\database\\eloquent\\model::getattribute","illuminate\\database\\eloquent\\model::hasgetmutator","illuminate\\database\\eloquent\\model::setattribute","illuminate\\database\\eloquent\\model::hassetmutator","illuminate\\database\\eloquent\\model::getdates","illuminate\\database\\eloquent\\model::fromdatetime","illuminate\\database\\eloquent\\model::replicate","illuminate\\database\\eloquent\\model::getattributes","illuminate\\database\\eloquent\\model::setrawattributes","illuminate\\database\\eloquent\\model::getoriginal","illuminate\\database\\eloquent\\model::syncoriginal","illuminate\\database\\eloquent\\model::syncoriginalattribute","illuminate\\database\\eloquent\\model::isdirty","illuminate\\database\\eloquent\\model::getdirty","illuminate\\database\\eloquent\\model::getrelations","illuminate\\database\\eloquent\\model::getrelation","illuminate\\database\\eloquent\\model::setrelation","illuminate\\database\\eloquent\\model::setrelations","illuminate\\database\\eloquent\\model::getconnection","illuminate\\database\\eloquent\\model::getconnectionname","illuminate\\database\\eloquent\\model::setconnection","illuminate\\database\\eloquent\\model::resolveconnection","illuminate\\database\\eloquent\\model::getconnectionresolver","illuminate\\database\\eloquent\\model::setconnectionresolver","illuminate\\database\\eloquent\\model::unsetconnectionresolver","illuminate\\database\\eloquent\\model::geteventdispatcher","illuminate\\database\\eloquent\\model::seteventdispatcher","illuminate\\database\\eloquent\\model::unseteventdispatcher","illuminate\\database\\eloquent\\model::getmutatedattributes","illuminate\\database\\eloquent\\model::__get","illuminate\\database\\eloquent\\model::__set","illuminate\\database\\eloquent\\model::offsetexists","illuminate\\database\\eloquent\\model::offsetget","illuminate\\database\\eloquent\\model::offsetset","illuminate\\database\\eloquent\\model::offsetunset","illuminate\\database\\eloquent\\model::__isset","illuminate\\database\\eloquent\\model::__unset","illuminate\\database\\eloquent\\model::__call","illuminate\\database\\eloquent\\model::__callstatic","illuminate\\database\\eloquent\\model::__tostring","illuminate\\database\\eloquent\\model::__wakeup","illuminate\\database\\eloquent\\modelnotfoundexception::setmodel","illuminate\\database\\eloquent\\modelnotfoundexception::getmodel","illuminate\\database\\eloquent\\relations\\belongsto::__construct","illuminate\\database\\eloquent\\relations\\belongsto::getresults","illuminate\\database\\eloquent\\relations\\belongsto::addconstraints","illuminate\\database\\eloquent\\relations\\belongsto::getrelationcountquery","illuminate\\database\\eloquent\\relations\\belongsto::addeagerconstraints","illuminate\\database\\eloquent\\relations\\belongsto::initrelation","illuminate\\database\\eloquent\\relations\\belongsto::match","illuminate\\database\\eloquent\\relations\\belongsto::associate","illuminate\\database\\eloquent\\relations\\belongsto::dissociate","illuminate\\database\\eloquent\\relations\\belongsto::update","illuminate\\database\\eloquent\\relations\\belongsto::getforeignkey","illuminate\\database\\eloquent\\relations\\belongsto::getqualifiedforeignkey","illuminate\\database\\eloquent\\relations\\belongsto::getotherkey","illuminate\\database\\eloquent\\relations\\belongsto::getqualifiedotherkeyname","illuminate\\database\\eloquent\\relations\\belongstomany::__construct","illuminate\\database\\eloquent\\relations\\belongstomany::getresults","illuminate\\database\\eloquent\\relations\\belongstomany::wherepivot","illuminate\\database\\eloquent\\relations\\belongstomany::orwherepivot","illuminate\\database\\eloquent\\relations\\belongstomany::first","illuminate\\database\\eloquent\\relations\\belongstomany::firstorfail","illuminate\\database\\eloquent\\relations\\belongstomany::get","illuminate\\database\\eloquent\\relations\\belongstomany::paginate","illuminate\\database\\eloquent\\relations\\belongstomany::addconstraints","illuminate\\database\\eloquent\\relations\\belongstomany::getrelationcountquery","illuminate\\database\\eloquent\\relations\\belongstomany::getrelationcountqueryforselfjoin","illuminate\\database\\eloquent\\relations\\belongstomany::getrelationcounthash","illuminate\\database\\eloquent\\relations\\belongstomany::addeagerconstraints","illuminate\\database\\eloquent\\relations\\belongstomany::initrelation","illuminate\\database\\eloquent\\relations\\belongstomany::match","illuminate\\database\\eloquent\\relations\\belongstomany::touch","illuminate\\database\\eloquent\\relations\\belongstomany::getrelatedids","illuminate\\database\\eloquent\\relations\\belongstomany::save","illuminate\\database\\eloquent\\relations\\belongstomany::savemany","illuminate\\database\\eloquent\\relations\\belongstomany::create","illuminate\\database\\eloquent\\relations\\belongstomany::createmany","illuminate\\database\\eloquent\\relations\\belongstomany::sync","illuminate\\database\\eloquent\\relations\\belongstomany::updateexistingpivot","illuminate\\database\\eloquent\\relations\\belongstomany::attach","illuminate\\database\\eloquent\\relations\\belongstomany::detach","illuminate\\database\\eloquent\\relations\\belongstomany::touchiftouching","illuminate\\database\\eloquent\\relations\\belongstomany::newpivotstatement","illuminate\\database\\eloquent\\relations\\belongstomany::newpivotstatementforid","illuminate\\database\\eloquent\\relations\\belongstomany::newpivot","illuminate\\database\\eloquent\\relations\\belongstomany::newexistingpivot","illuminate\\database\\eloquent\\relations\\belongstomany::withpivot","illuminate\\database\\eloquent\\relations\\belongstomany::withtimestamps","illuminate\\database\\eloquent\\relations\\belongstomany::getrelatedfreshupdate","illuminate\\database\\eloquent\\relations\\belongstomany::gethascomparekey","illuminate\\database\\eloquent\\relations\\belongstomany::getforeignkey","illuminate\\database\\eloquent\\relations\\belongstomany::getotherkey","illuminate\\database\\eloquent\\relations\\belongstomany::gettable","illuminate\\database\\eloquent\\relations\\belongstomany::getrelationname","illuminate\\database\\eloquent\\relations\\hasmany::getresults","illuminate\\database\\eloquent\\relations\\hasmany::initrelation","illuminate\\database\\eloquent\\relations\\hasmany::match","illuminate\\database\\eloquent\\relations\\hasmanythrough::__construct","illuminate\\database\\eloquent\\relations\\hasmanythrough::addconstraints","illuminate\\database\\eloquent\\relations\\hasmanythrough::getrelationcountquery","illuminate\\database\\eloquent\\relations\\hasmanythrough::addeagerconstraints","illuminate\\database\\eloquent\\relations\\hasmanythrough::initrelation","illuminate\\database\\eloquent\\relations\\hasmanythrough::match","illuminate\\database\\eloquent\\relations\\hasmanythrough::getresults","illuminate\\database\\eloquent\\relations\\hasmanythrough::get","illuminate\\database\\eloquent\\relations\\hasmanythrough::paginate","illuminate\\database\\eloquent\\relations\\hasmanythrough::gethascomparekey","illuminate\\database\\eloquent\\relations\\hasone::getresults","illuminate\\database\\eloquent\\relations\\hasone::initrelation","illuminate\\database\\eloquent\\relations\\hasone::match","illuminate\\database\\eloquent\\relations\\hasoneormany::__construct","illuminate\\database\\eloquent\\relations\\hasoneormany::addconstraints","illuminate\\database\\eloquent\\relations\\hasoneormany::addeagerconstraints","illuminate\\database\\eloquent\\relations\\hasoneormany::matchone","illuminate\\database\\eloquent\\relations\\hasoneormany::matchmany","illuminate\\database\\eloquent\\relations\\hasoneormany::save","illuminate\\database\\eloquent\\relations\\hasoneormany::savemany","illuminate\\database\\eloquent\\relations\\hasoneormany::create","illuminate\\database\\eloquent\\relations\\hasoneormany::createmany","illuminate\\database\\eloquent\\relations\\hasoneormany::update","illuminate\\database\\eloquent\\relations\\hasoneormany::gethascomparekey","illuminate\\database\\eloquent\\relations\\hasoneormany::getforeignkey","illuminate\\database\\eloquent\\relations\\hasoneormany::getplainforeignkey","illuminate\\database\\eloquent\\relations\\hasoneormany::getparentkey","illuminate\\database\\eloquent\\relations\\hasoneormany::getqualifiedparentkeyname","illuminate\\database\\eloquent\\relations\\morphmany::getresults","illuminate\\database\\eloquent\\relations\\morphmany::initrelation","illuminate\\database\\eloquent\\relations\\morphmany::match","illuminate\\database\\eloquent\\relations\\morphone::getresults","illuminate\\database\\eloquent\\relations\\morphone::initrelation","illuminate\\database\\eloquent\\relations\\morphone::match","illuminate\\database\\eloquent\\relations\\morphoneormany::__construct","illuminate\\database\\eloquent\\relations\\morphoneormany::addconstraints","illuminate\\database\\eloquent\\relations\\morphoneormany::getrelationcountquery","illuminate\\database\\eloquent\\relations\\morphoneormany::addeagerconstraints","illuminate\\database\\eloquent\\relations\\morphoneormany::save","illuminate\\database\\eloquent\\relations\\morphoneormany::create","illuminate\\database\\eloquent\\relations\\morphoneormany::getmorphtype","illuminate\\database\\eloquent\\relations\\morphoneormany::getplainmorphtype","illuminate\\database\\eloquent\\relations\\morphoneormany::getmorphclass","illuminate\\database\\eloquent\\relations\\morphpivot::delete","illuminate\\database\\eloquent\\relations\\morphpivot::setmorphtype","illuminate\\database\\eloquent\\relations\\morphpivot::setmorphclass","illuminate\\database\\eloquent\\relations\\morphto::__construct","illuminate\\database\\eloquent\\relations\\morphto::addeagerconstraints","illuminate\\database\\eloquent\\relations\\morphto::match","illuminate\\database\\eloquent\\relations\\morphto::associate","illuminate\\database\\eloquent\\relations\\morphto::geteager","illuminate\\database\\eloquent\\relations\\morphto::createmodelbytype","illuminate\\database\\eloquent\\relations\\morphto::getdictionary","illuminate\\database\\eloquent\\relations\\morphto::withtrashed","illuminate\\database\\eloquent\\relations\\morphtomany::__construct","illuminate\\database\\eloquent\\relations\\morphtomany::getrelationcountquery","illuminate\\database\\eloquent\\relations\\morphtomany::addeagerconstraints","illuminate\\database\\eloquent\\relations\\morphtomany::newpivot","illuminate\\database\\eloquent\\relations\\morphtomany::getmorphtype","illuminate\\database\\eloquent\\relations\\morphtomany::getmorphclass","illuminate\\database\\eloquent\\relations\\pivot::__construct","illuminate\\database\\eloquent\\relations\\pivot::delete","illuminate\\database\\eloquent\\relations\\pivot::getforeignkey","illuminate\\database\\eloquent\\relations\\pivot::getotherkey","illuminate\\database\\eloquent\\relations\\pivot::setpivotkeys","illuminate\\database\\eloquent\\relations\\pivot::hastimestampattributes","illuminate\\database\\eloquent\\relations\\pivot::getcreatedatcolumn","illuminate\\database\\eloquent\\relations\\pivot::getupdatedatcolumn","illuminate\\database\\eloquent\\relations\\relation::__construct","illuminate\\database\\eloquent\\relations\\relation::addconstraints","illuminate\\database\\eloquent\\relations\\relation::addeagerconstraints","illuminate\\database\\eloquent\\relations\\relation::initrelation","illuminate\\database\\eloquent\\relations\\relation::match","illuminate\\database\\eloquent\\relations\\relation::getresults","illuminate\\database\\eloquent\\relations\\relation::geteager","illuminate\\database\\eloquent\\relations\\relation::touch","illuminate\\database\\eloquent\\relations\\relation::rawupdate","illuminate\\database\\eloquent\\relations\\relation::getrelationcountquery","illuminate\\database\\eloquent\\relations\\relation::noconstraints","illuminate\\database\\eloquent\\relations\\relation::getquery","illuminate\\database\\eloquent\\relations\\relation::getbasequery","illuminate\\database\\eloquent\\relations\\relation::getparent","illuminate\\database\\eloquent\\relations\\relation::getrelated","illuminate\\database\\eloquent\\relations\\relation::createdat","illuminate\\database\\eloquent\\relations\\relation::updatedat","illuminate\\database\\eloquent\\relations\\relation::relatedupdatedat","illuminate\\database\\eloquent\\relations\\relation::wrap","illuminate\\database\\eloquent\\relations\\relation::__call","illuminate\\database\\eloquent\\scopeinterface::apply","illuminate\\database\\eloquent\\scopeinterface::remove","illuminate\\database\\eloquent\\softdeletingscope::apply","illuminate\\database\\eloquent\\softdeletingscope::remove","illuminate\\database\\eloquent\\softdeletingscope::extend","illuminate\\database\\eloquent\\softdeletingtrait::bootsoftdeletingtrait","illuminate\\database\\eloquent\\softdeletingtrait::forcedelete","illuminate\\database\\eloquent\\softdeletingtrait::restore","illuminate\\database\\eloquent\\softdeletingtrait::trashed","illuminate\\database\\eloquent\\softdeletingtrait::withtrashed","illuminate\\database\\eloquent\\softdeletingtrait::onlytrashed","illuminate\\database\\eloquent\\softdeletingtrait::restoring","illuminate\\database\\eloquent\\softdeletingtrait::restored","illuminate\\database\\eloquent\\softdeletingtrait::getdeletedatcolumn","illuminate\\database\\eloquent\\softdeletingtrait::getqualifieddeletedatcolumn","illuminate\\database\\grammar::wraparray","illuminate\\database\\grammar::wraptable","illuminate\\database\\grammar::wrap","illuminate\\database\\grammar::columnize","illuminate\\database\\grammar::parameterize","illuminate\\database\\grammar::parameter","illuminate\\database\\grammar::getvalue","illuminate\\database\\grammar::isexpression","illuminate\\database\\grammar::getdateformat","illuminate\\database\\grammar::gettableprefix","illuminate\\database\\grammar::settableprefix","illuminate\\database\\migrationserviceprovider::register","illuminate\\database\\migrationserviceprovider::provides","illuminate\\database\\migrations\\databasemigrationrepository::__construct","illuminate\\database\\migrations\\databasemigrationrepository::getran","illuminate\\database\\migrations\\databasemigrationrepository::getlast","illuminate\\database\\migrations\\databasemigrationrepository::log","illuminate\\database\\migrations\\databasemigrationrepository::delete","illuminate\\database\\migrations\\databasemigrationrepository::getnextbatchnumber","illuminate\\database\\migrations\\databasemigrationrepository::getlastbatchnumber","illuminate\\database\\migrations\\databasemigrationrepository::createrepository","illuminate\\database\\migrations\\databasemigrationrepository::repositoryexists","illuminate\\database\\migrations\\databasemigrationrepository::getconnectionresolver","illuminate\\database\\migrations\\databasemigrationrepository::getconnection","illuminate\\database\\migrations\\databasemigrationrepository::setsource","illuminate\\database\\migrations\\migration::getconnection","illuminate\\database\\migrations\\migrationcreator::__construct","illuminate\\database\\migrations\\migrationcreator::create","illuminate\\database\\migrations\\migrationcreator::aftercreate","illuminate\\database\\migrations\\migrationcreator::getstubpath","illuminate\\database\\migrations\\migrationcreator::getfilesystem","illuminate\\database\\migrations\\migrationrepositoryinterface::getran","illuminate\\database\\migrations\\migrationrepositoryinterface::getlast","illuminate\\database\\migrations\\migrationrepositoryinterface::log","illuminate\\database\\migrations\\migrationrepositoryinterface::delete","illuminate\\database\\migrations\\migrationrepositoryinterface::getnextbatchnumber","illuminate\\database\\migrations\\migrationrepositoryinterface::createrepository","illuminate\\database\\migrations\\migrationrepositoryinterface::repositoryexists","illuminate\\database\\migrations\\migrationrepositoryinterface::setsource","illuminate\\database\\migrations\\migrator::__construct","illuminate\\database\\migrations\\migrator::run","illuminate\\database\\migrations\\migrator::runmigrationlist","illuminate\\database\\migrations\\migrator::rollback","illuminate\\database\\migrations\\migrator::getmigrationfiles","illuminate\\database\\migrations\\migrator::requirefiles","illuminate\\database\\migrations\\migrator::resolve","illuminate\\database\\migrations\\migrator::getnotes","illuminate\\database\\migrations\\migrator::resolveconnection","illuminate\\database\\migrations\\migrator::setconnection","illuminate\\database\\migrations\\migrator::getrepository","illuminate\\database\\migrations\\migrator::repositoryexists","illuminate\\database\\migrations\\migrator::getfilesystem","illuminate\\database\\mysqlconnection::getschemabuilder","illuminate\\database\\queryexception::__construct","illuminate\\database\\queryexception::getsql","illuminate\\database\\queryexception::getbindings","illuminate\\database\\query\\builder::__construct","illuminate\\database\\query\\builder::select","illuminate\\database\\query\\builder::selectraw","illuminate\\database\\query\\builder::addselect","illuminate\\database\\query\\builder::distinct","illuminate\\database\\query\\builder::from","illuminate\\database\\query\\builder::join","illuminate\\database\\query\\builder::joinwhere","illuminate\\database\\query\\builder::leftjoin","illuminate\\database\\query\\builder::leftjoinwhere","illuminate\\database\\query\\builder::rightjoin","illuminate\\database\\query\\builder::rightjoinwhere","illuminate\\database\\query\\builder::where","illuminate\\database\\query\\builder::orwhere","illuminate\\database\\query\\builder::whereraw","illuminate\\database\\query\\builder::orwhereraw","illuminate\\database\\query\\builder::wherebetween","illuminate\\database\\query\\builder::orwherebetween","illuminate\\database\\query\\builder::wherenotbetween","illuminate\\database\\query\\builder::orwherenotbetween","illuminate\\database\\query\\builder::wherenested","illuminate\\database\\query\\builder::addnestedwherequery","illuminate\\database\\query\\builder::whereexists","illuminate\\database\\query\\builder::orwhereexists","illuminate\\database\\query\\builder::wherenotexists","illuminate\\database\\query\\builder::orwherenotexists","illuminate\\database\\query\\builder::wherein","illuminate\\database\\query\\builder::orwherein","illuminate\\database\\query\\builder::wherenotin","illuminate\\database\\query\\builder::orwherenotin","illuminate\\database\\query\\builder::wherenull","illuminate\\database\\query\\builder::orwherenull","illuminate\\database\\query\\builder::wherenotnull","illuminate\\database\\query\\builder::orwherenotnull","illuminate\\database\\query\\builder::whereday","illuminate\\database\\query\\builder::wheremonth","illuminate\\database\\query\\builder::whereyear","illuminate\\database\\query\\builder::dynamicwhere","illuminate\\database\\query\\builder::groupby","illuminate\\database\\query\\builder::having","illuminate\\database\\query\\builder::orhaving","illuminate\\database\\query\\builder::havingraw","illuminate\\database\\query\\builder::orhavingraw","illuminate\\database\\query\\builder::orderby","illuminate\\database\\query\\builder::latest","illuminate\\database\\query\\builder::oldest","illuminate\\database\\query\\builder::orderbyraw","illuminate\\database\\query\\builder::offset","illuminate\\database\\query\\builder::skip","illuminate\\database\\query\\builder::limit","illuminate\\database\\query\\builder::take","illuminate\\database\\query\\builder::forpage","illuminate\\database\\query\\builder::union","illuminate\\database\\query\\builder::unionall","illuminate\\database\\query\\builder::lock","illuminate\\database\\query\\builder::lockforupdate","illuminate\\database\\query\\builder::sharedlock","illuminate\\database\\query\\builder::tosql","illuminate\\database\\query\\builder::remember","illuminate\\database\\query\\builder::rememberforever","illuminate\\database\\query\\builder::cachetags","illuminate\\database\\query\\builder::cachedriver","illuminate\\database\\query\\builder::find","illuminate\\database\\query\\builder::pluck","illuminate\\database\\query\\builder::first","illuminate\\database\\query\\builder::get","illuminate\\database\\query\\builder::getfresh","illuminate\\database\\query\\builder::getcached","illuminate\\database\\query\\builder::getcachekey","illuminate\\database\\query\\builder::generatecachekey","illuminate\\database\\query\\builder::chunk","illuminate\\database\\query\\builder::lists","illuminate\\database\\query\\builder::implode","illuminate\\database\\query\\builder::paginate","illuminate\\database\\query\\builder::buildrawpaginator","illuminate\\database\\query\\builder::getpaginationcount","illuminate\\database\\query\\builder::simplepaginate","illuminate\\database\\query\\builder::exists","illuminate\\database\\query\\builder::count","illuminate\\database\\query\\builder::min","illuminate\\database\\query\\builder::max","illuminate\\database\\query\\builder::sum","illuminate\\database\\query\\builder::avg","illuminate\\database\\query\\builder::aggregate","illuminate\\database\\query\\builder::insert","illuminate\\database\\query\\builder::insertgetid","illuminate\\database\\query\\builder::update","illuminate\\database\\query\\builder::increment","illuminate\\database\\query\\builder::decrement","illuminate\\database\\query\\builder::delete","illuminate\\database\\query\\builder::truncate","illuminate\\database\\query\\builder::newquery","illuminate\\database\\query\\builder::mergewheres","illuminate\\database\\query\\builder::raw","illuminate\\database\\query\\builder::getbindings","illuminate\\database\\query\\builder::getrawbindings","illuminate\\database\\query\\builder::setbindings","illuminate\\database\\query\\builder::addbinding","illuminate\\database\\query\\builder::mergebindings","illuminate\\database\\query\\builder::getconnection","illuminate\\database\\query\\builder::getprocessor","illuminate\\database\\query\\builder::getgrammar","illuminate\\database\\query\\builder::__call","illuminate\\database\\query\\expression::__construct","illuminate\\database\\query\\expression::getvalue","illuminate\\database\\query\\expression::__tostring","illuminate\\database\\query\\grammars\\grammar::compileselect","illuminate\\database\\query\\grammars\\grammar::compileinsert","illuminate\\database\\query\\grammars\\grammar::compileinsertgetid","illuminate\\database\\query\\grammars\\grammar::compileupdate","illuminate\\database\\query\\grammars\\grammar::compiledelete","illuminate\\database\\query\\grammars\\grammar::compiletruncate","illuminate\\database\\query\\grammars\\mysqlgrammar::compileselect","illuminate\\database\\query\\grammars\\mysqlgrammar::compileupdate","illuminate\\database\\query\\grammars\\mysqlgrammar::compiledelete","illuminate\\database\\query\\grammars\\postgresgrammar::compileupdate","illuminate\\database\\query\\grammars\\postgresgrammar::compileinsertgetid","illuminate\\database\\query\\grammars\\postgresgrammar::compiletruncate","illuminate\\database\\query\\grammars\\sqlitegrammar::compileinsert","illuminate\\database\\query\\grammars\\sqlitegrammar::compiletruncate","illuminate\\database\\query\\grammars\\sqlservergrammar::compileselect","illuminate\\database\\query\\grammars\\sqlservergrammar::compiletruncate","illuminate\\database\\query\\grammars\\sqlservergrammar::getdateformat","illuminate\\database\\query\\joinclause::__construct","illuminate\\database\\query\\joinclause::on","illuminate\\database\\query\\joinclause::oron","illuminate\\database\\query\\joinclause::where","illuminate\\database\\query\\joinclause::orwhere","illuminate\\database\\query\\joinclause::wherenull","illuminate\\database\\query\\processors\\mysqlprocessor::processcolumnlisting","illuminate\\database\\query\\processors\\postgresprocessor::processinsertgetid","illuminate\\database\\query\\processors\\postgresprocessor::processcolumnlisting","illuminate\\database\\query\\processors\\processor::processselect","illuminate\\database\\query\\processors\\processor::processinsertgetid","illuminate\\database\\query\\processors\\processor::processcolumnlisting","illuminate\\database\\query\\processors\\sqliteprocessor::processcolumnlisting","illuminate\\database\\query\\processors\\sqlserverprocessor::processinsertgetid","illuminate\\database\\query\\processors\\sqlserverprocessor::processcolumnlisting","illuminate\\database\\schema\\blueprint::__construct","illuminate\\database\\schema\\blueprint::build","illuminate\\database\\schema\\blueprint::tosql","illuminate\\database\\schema\\blueprint::create","illuminate\\database\\schema\\blueprint::drop","illuminate\\database\\schema\\blueprint::dropifexists","illuminate\\database\\schema\\blueprint::dropcolumn","illuminate\\database\\schema\\blueprint::renamecolumn","illuminate\\database\\schema\\blueprint::dropprimary","illuminate\\database\\schema\\blueprint::dropunique","illuminate\\database\\schema\\blueprint::dropindex","illuminate\\database\\schema\\blueprint::dropforeign","illuminate\\database\\schema\\blueprint::droptimestamps","illuminate\\database\\schema\\blueprint::dropsoftdeletes","illuminate\\database\\schema\\blueprint::rename","illuminate\\database\\schema\\blueprint::primary","illuminate\\database\\schema\\blueprint::unique","illuminate\\database\\schema\\blueprint::index","illuminate\\database\\schema\\blueprint::foreign","illuminate\\database\\schema\\blueprint::increments","illuminate\\database\\schema\\blueprint::bigincrements","illuminate\\database\\schema\\blueprint::char","illuminate\\database\\schema\\blueprint::string","illuminate\\database\\schema\\blueprint::text","illuminate\\database\\schema\\blueprint::mediumtext","illuminate\\database\\schema\\blueprint::longtext","illuminate\\database\\schema\\blueprint::integer","illuminate\\database\\schema\\blueprint::biginteger","illuminate\\database\\schema\\blueprint::mediuminteger","illuminate\\database\\schema\\blueprint::tinyinteger","illuminate\\database\\schema\\blueprint::smallinteger","illuminate\\database\\schema\\blueprint::unsignedinteger","illuminate\\database\\schema\\blueprint::unsignedbiginteger","illuminate\\database\\schema\\blueprint::float","illuminate\\database\\schema\\blueprint::double","illuminate\\database\\schema\\blueprint::decimal","illuminate\\database\\schema\\blueprint::boolean","illuminate\\database\\schema\\blueprint::enum","illuminate\\database\\schema\\blueprint::date","illuminate\\database\\schema\\blueprint::datetime","illuminate\\database\\schema\\blueprint::time","illuminate\\database\\schema\\blueprint::timestamp","illuminate\\database\\schema\\blueprint::nullabletimestamps","illuminate\\database\\schema\\blueprint::timestamps","illuminate\\database\\schema\\blueprint::softdeletes","illuminate\\database\\schema\\blueprint::binary","illuminate\\database\\schema\\blueprint::morphs","illuminate\\database\\schema\\blueprint::remembertoken","illuminate\\database\\schema\\blueprint::removecolumn","illuminate\\database\\schema\\blueprint::gettable","illuminate\\database\\schema\\blueprint::getcolumns","illuminate\\database\\schema\\blueprint::getcommands","illuminate\\database\\schema\\builder::__construct","illuminate\\database\\schema\\builder::hastable","illuminate\\database\\schema\\builder::hascolumn","illuminate\\database\\schema\\builder::getcolumnlisting","illuminate\\database\\schema\\builder::table","illuminate\\database\\schema\\builder::create","illuminate\\database\\schema\\builder::drop","illuminate\\database\\schema\\builder::dropifexists","illuminate\\database\\schema\\builder::rename","illuminate\\database\\schema\\builder::getconnection","illuminate\\database\\schema\\builder::setconnection","illuminate\\database\\schema\\builder::blueprintresolver","illuminate\\database\\schema\\grammars\\grammar::compilerenamecolumn","illuminate\\database\\schema\\grammars\\grammar::compileforeign","illuminate\\database\\schema\\grammars\\grammar::prefixarray","illuminate\\database\\schema\\grammars\\grammar::wraptable","illuminate\\database\\schema\\grammars\\grammar::wrap","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiletableexists","illuminate\\database\\schema\\grammars\\mysqlgrammar::compilecolumnexists","illuminate\\database\\schema\\grammars\\mysqlgrammar::compilecreate","illuminate\\database\\schema\\grammars\\mysqlgrammar::compileadd","illuminate\\database\\schema\\grammars\\mysqlgrammar::compileprimary","illuminate\\database\\schema\\grammars\\mysqlgrammar::compileunique","illuminate\\database\\schema\\grammars\\mysqlgrammar::compileindex","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledrop","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropifexists","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropcolumn","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropprimary","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropunique","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropindex","illuminate\\database\\schema\\grammars\\mysqlgrammar::compiledropforeign","illuminate\\database\\schema\\grammars\\mysqlgrammar::compilerename","illuminate\\database\\schema\\grammars\\postgresgrammar::compiletableexists","illuminate\\database\\schema\\grammars\\postgresgrammar::compilecolumnexists","illuminate\\database\\schema\\grammars\\postgresgrammar::compilecreate","illuminate\\database\\schema\\grammars\\postgresgrammar::compileadd","illuminate\\database\\schema\\grammars\\postgresgrammar::compileprimary","illuminate\\database\\schema\\grammars\\postgresgrammar::compileunique","illuminate\\database\\schema\\grammars\\postgresgrammar::compileindex","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledrop","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropifexists","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropcolumn","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropprimary","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropunique","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropindex","illuminate\\database\\schema\\grammars\\postgresgrammar::compiledropforeign","illuminate\\database\\schema\\grammars\\postgresgrammar::compilerename","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiletableexists","illuminate\\database\\schema\\grammars\\sqlitegrammar::compilecolumnexists","illuminate\\database\\schema\\grammars\\sqlitegrammar::compilecreate","illuminate\\database\\schema\\grammars\\sqlitegrammar::compileadd","illuminate\\database\\schema\\grammars\\sqlitegrammar::compileunique","illuminate\\database\\schema\\grammars\\sqlitegrammar::compileindex","illuminate\\database\\schema\\grammars\\sqlitegrammar::compileforeign","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiledrop","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiledropifexists","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiledropcolumn","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiledropunique","illuminate\\database\\schema\\grammars\\sqlitegrammar::compiledropindex","illuminate\\database\\schema\\grammars\\sqlitegrammar::compilerename","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiletableexists","illuminate\\database\\schema\\grammars\\sqlservergrammar::compilecolumnexists","illuminate\\database\\schema\\grammars\\sqlservergrammar::compilecreate","illuminate\\database\\schema\\grammars\\sqlservergrammar::compileadd","illuminate\\database\\schema\\grammars\\sqlservergrammar::compileprimary","illuminate\\database\\schema\\grammars\\sqlservergrammar::compileunique","illuminate\\database\\schema\\grammars\\sqlservergrammar::compileindex","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledrop","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledropcolumn","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledropprimary","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledropunique","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledropindex","illuminate\\database\\schema\\grammars\\sqlservergrammar::compiledropforeign","illuminate\\database\\schema\\grammars\\sqlservergrammar::compilerename","illuminate\\database\\schema\\mysqlbuilder::hastable","illuminate\\database\\schema\\mysqlbuilder::getcolumnlisting","illuminate\\database\\seedserviceprovider::register","illuminate\\database\\seedserviceprovider::provides","illuminate\\database\\seeder::run","illuminate\\database\\seeder::call","illuminate\\database\\seeder::setcontainer","illuminate\\database\\seeder::setcommand","illuminate\\database\\sqlserverconnection::transaction","illuminate\\encryption\\encrypter::__construct","illuminate\\encryption\\encrypter::encrypt","illuminate\\encryption\\encrypter::decrypt","illuminate\\encryption\\encrypter::setkey","illuminate\\encryption\\encrypter::setcipher","illuminate\\encryption\\encrypter::setmode","illuminate\\encryption\\encryptionserviceprovider::register","illuminate\\events\\dispatcher::__construct","illuminate\\events\\dispatcher::listen","illuminate\\events\\dispatcher::haslisteners","illuminate\\events\\dispatcher::queue","illuminate\\events\\dispatcher::subscribe","illuminate\\events\\dispatcher::until","illuminate\\events\\dispatcher::flush","illuminate\\events\\dispatcher::firing","illuminate\\events\\dispatcher::fire","illuminate\\events\\dispatcher::getlisteners","illuminate\\events\\dispatcher::makelistener","illuminate\\events\\dispatcher::createclasslistener","illuminate\\events\\dispatcher::forget","illuminate\\events\\dispatcher::forgetqueued","illuminate\\events\\eventserviceprovider::register","illuminate\\exception\\exceptiondisplayerinterface::display","illuminate\\exception\\exceptionserviceprovider::register","illuminate\\exception\\handler::__construct","illuminate\\exception\\handler::register","illuminate\\exception\\handler::handleerror","illuminate\\exception\\handler::handleexception","illuminate\\exception\\handler::handleuncaughtexception","illuminate\\exception\\handler::handleshutdown","illuminate\\exception\\handler::handleconsole","illuminate\\exception\\handler::error","illuminate\\exception\\handler::pusherror","illuminate\\exception\\handler::runninginconsole","illuminate\\exception\\handler::setdebug","illuminate\\exception\\plaindisplayer::display","illuminate\\exception\\symfonydisplayer::__construct","illuminate\\exception\\symfonydisplayer::display","illuminate\\exception\\whoopsdisplayer::__construct","illuminate\\exception\\whoopsdisplayer::display","illuminate\\filesystem\\filesystem::exists","illuminate\\filesystem\\filesystem::get","illuminate\\filesystem\\filesystem::getrequire","illuminate\\filesystem\\filesystem::requireonce","illuminate\\filesystem\\filesystem::put","illuminate\\filesystem\\filesystem::prepend","illuminate\\filesystem\\filesystem::append","illuminate\\filesystem\\filesystem::delete","illuminate\\filesystem\\filesystem::move","illuminate\\filesystem\\filesystem::copy","illuminate\\filesystem\\filesystem::extension","illuminate\\filesystem\\filesystem::type","illuminate\\filesystem\\filesystem::size","illuminate\\filesystem\\filesystem::lastmodified","illuminate\\filesystem\\filesystem::isdirectory","illuminate\\filesystem\\filesystem::iswritable","illuminate\\filesystem\\filesystem::isfile","illuminate\\filesystem\\filesystem::glob","illuminate\\filesystem\\filesystem::files","illuminate\\filesystem\\filesystem::allfiles","illuminate\\filesystem\\filesystem::directories","illuminate\\filesystem\\filesystem::makedirectory","illuminate\\filesystem\\filesystem::copydirectory","illuminate\\filesystem\\filesystem::deletedirectory","illuminate\\filesystem\\filesystem::cleandirectory","illuminate\\filesystem\\filesystemserviceprovider::register","illuminate\\foundation\\aliasloader::__construct","illuminate\\foundation\\aliasloader::getinstance","illuminate\\foundation\\aliasloader::load","illuminate\\foundation\\aliasloader::alias","illuminate\\foundation\\aliasloader::register","illuminate\\foundation\\aliasloader::getaliases","illuminate\\foundation\\aliasloader::setaliases","illuminate\\foundation\\aliasloader::isregistered","illuminate\\foundation\\aliasloader::setregistered","illuminate\\foundation\\aliasloader::setinstance","illuminate\\foundation\\application::__construct","illuminate\\foundation\\application::bindinstallpaths","illuminate\\foundation\\application::getbootstrapfile","illuminate\\foundation\\application::startexceptionhandling","illuminate\\foundation\\application::environment","illuminate\\foundation\\application::islocal","illuminate\\foundation\\application::detectenvironment","illuminate\\foundation\\application::runninginconsole","illuminate\\foundation\\application::runningunittests","illuminate\\foundation\\application::forceregister","illuminate\\foundation\\application::register","illuminate\\foundation\\application::getregistered","illuminate\\foundation\\application::resolveproviderclass","illuminate\\foundation\\application::loaddeferredproviders","illuminate\\foundation\\application::registerdeferredprovider","illuminate\\foundation\\application::make","illuminate\\foundation\\application::bound","illuminate\\foundation\\application::extend","illuminate\\foundation\\application::before","illuminate\\foundation\\application::after","illuminate\\foundation\\application::finish","illuminate\\foundation\\application::shutdown","illuminate\\foundation\\application::usearraysessions","illuminate\\foundation\\application::isbooted","illuminate\\foundation\\application::boot","illuminate\\foundation\\application::booting","illuminate\\foundation\\application::booted","illuminate\\foundation\\application::run","illuminate\\foundation\\application::middleware","illuminate\\foundation\\application::forgetmiddleware","illuminate\\foundation\\application::handle","illuminate\\foundation\\application::dispatch","illuminate\\foundation\\application::terminate","illuminate\\foundation\\application::callfinishcallbacks","illuminate\\foundation\\application::preparerequest","illuminate\\foundation\\application::prepareresponse","illuminate\\foundation\\application::readyforresponses","illuminate\\foundation\\application::isdownformaintenance","illuminate\\foundation\\application::down","illuminate\\foundation\\application::abort","illuminate\\foundation\\application::missing","illuminate\\foundation\\application::error","illuminate\\foundation\\application::pusherror","illuminate\\foundation\\application::fatal","illuminate\\foundation\\application::getconfigloader","illuminate\\foundation\\application::getenvironmentvariablesloader","illuminate\\foundation\\application::getproviderrepository","illuminate\\foundation\\application::getloadedproviders","illuminate\\foundation\\application::setdeferredservices","illuminate\\foundation\\application::isdeferredservice","illuminate\\foundation\\application::requestclass","illuminate\\foundation\\application::setrequestforconsoleenvironment","illuminate\\foundation\\application::onrequest","illuminate\\foundation\\application::getlocale","illuminate\\foundation\\application::setlocale","illuminate\\foundation\\application::registercorecontaineraliases","illuminate\\foundation\\artisan::__construct","illuminate\\foundation\\artisan::__call","illuminate\\foundation\\assetpublisher::__construct","illuminate\\foundation\\assetpublisher::publish","illuminate\\foundation\\assetpublisher::publishpackage","illuminate\\foundation\\assetpublisher::setpackagepath","illuminate\\foundation\\composer::__construct","illuminate\\foundation\\composer::dumpautoloads","illuminate\\foundation\\composer::dumpoptimized","illuminate\\foundation\\composer::setworkingpath","illuminate\\foundation\\configpublisher::__construct","illuminate\\foundation\\configpublisher::publish","illuminate\\foundation\\configpublisher::publishpackage","illuminate\\foundation\\configpublisher::alreadypublished","illuminate\\foundation\\configpublisher::getdestinationpath","illuminate\\foundation\\configpublisher::setpackagepath","illuminate\\foundation\\console\\assetpublishcommand::__construct","illuminate\\foundation\\console\\assetpublishcommand::fire","illuminate\\foundation\\console\\autoloadcommand::__construct","illuminate\\foundation\\console\\autoloadcommand::fire","illuminate\\foundation\\console\\changescommand::fire","illuminate\\foundation\\console\\clearcompiledcommand::fire","illuminate\\foundation\\console\\commandmakecommand::__construct","illuminate\\foundation\\console\\commandmakecommand::fire","illuminate\\foundation\\console\\configpublishcommand::__construct","illuminate\\foundation\\console\\configpublishcommand::fire","illuminate\\foundation\\console\\downcommand::fire","illuminate\\foundation\\console\\environmentcommand::fire","illuminate\\foundation\\console\\keygeneratecommand::__construct","illuminate\\foundation\\console\\keygeneratecommand::fire","illuminate\\foundation\\console\\migratepublishcommand::fire","illuminate\\foundation\\console\\optimizecommand::__construct","illuminate\\foundation\\console\\optimizecommand::fire","illuminate\\foundation\\console\\routescommand::__construct","illuminate\\foundation\\console\\routescommand::fire","illuminate\\foundation\\console\\servecommand::fire","illuminate\\foundation\\console\\tailcommand::fire","illuminate\\foundation\\console\\tinkercommand::fire","illuminate\\foundation\\console\\upcommand::fire","illuminate\\foundation\\console\\viewpublishcommand::__construct","illuminate\\foundation\\console\\viewpublishcommand::fire","illuminate\\foundation\\environmentdetector::detect","illuminate\\foundation\\environmentdetector::ismachine","illuminate\\foundation\\migrationpublisher::__construct","illuminate\\foundation\\migrationpublisher::publish","illuminate\\foundation\\migrationpublisher::migrationexists","illuminate\\foundation\\migrationpublisher::getexistingmigrationnames","illuminate\\foundation\\providerrepository::__construct","illuminate\\foundation\\providerrepository::load","illuminate\\foundation\\providerrepository::createprovider","illuminate\\foundation\\providerrepository::shouldrecompile","illuminate\\foundation\\providerrepository::loadmanifest","illuminate\\foundation\\providerrepository::writemanifest","illuminate\\foundation\\providerrepository::getfilesystem","illuminate\\foundation\\providers\\artisanserviceprovider::register","illuminate\\foundation\\providers\\artisanserviceprovider::provides","illuminate\\foundation\\providers\\commandcreatorserviceprovider::register","illuminate\\foundation\\providers\\commandcreatorserviceprovider::provides","illuminate\\foundation\\providers\\composerserviceprovider::register","illuminate\\foundation\\providers\\composerserviceprovider::provides","illuminate\\foundation\\providers\\consolesupportserviceprovider::register","illuminate\\foundation\\providers\\consolesupportserviceprovider::provides","illuminate\\foundation\\providers\\keygeneratorserviceprovider::register","illuminate\\foundation\\providers\\keygeneratorserviceprovider::provides","illuminate\\foundation\\providers\\maintenanceserviceprovider::register","illuminate\\foundation\\providers\\maintenanceserviceprovider::provides","illuminate\\foundation\\providers\\optimizeserviceprovider::register","illuminate\\foundation\\providers\\optimizeserviceprovider::provides","illuminate\\foundation\\providers\\publisherserviceprovider::register","illuminate\\foundation\\providers\\publisherserviceprovider::provides","illuminate\\foundation\\providers\\routelistserviceprovider::register","illuminate\\foundation\\providers\\routelistserviceprovider::provides","illuminate\\foundation\\providers\\serverserviceprovider::register","illuminate\\foundation\\providers\\serverserviceprovider::provides","illuminate\\foundation\\providers\\tinkerserviceprovider::register","illuminate\\foundation\\providers\\tinkerserviceprovider::provides","illuminate\\foundation\\testing\\applicationtrait::call","illuminate\\foundation\\testing\\applicationtrait::callsecure","illuminate\\foundation\\testing\\applicationtrait::action","illuminate\\foundation\\testing\\applicationtrait::route","illuminate\\foundation\\testing\\applicationtrait::session","illuminate\\foundation\\testing\\applicationtrait::flushsession","illuminate\\foundation\\testing\\applicationtrait::be","illuminate\\foundation\\testing\\applicationtrait::seed","illuminate\\foundation\\testing\\assertionstrait::assertresponseok","illuminate\\foundation\\testing\\assertionstrait::assertresponsestatus","illuminate\\foundation\\testing\\assertionstrait::assertviewhas","illuminate\\foundation\\testing\\assertionstrait::assertviewhasall","illuminate\\foundation\\testing\\assertionstrait::assertviewmissing","illuminate\\foundation\\testing\\assertionstrait::assertredirectedto","illuminate\\foundation\\testing\\assertionstrait::assertredirectedtoroute","illuminate\\foundation\\testing\\assertionstrait::assertredirectedtoaction","illuminate\\foundation\\testing\\assertionstrait::assertsessionhas","illuminate\\foundation\\testing\\assertionstrait::assertsessionhasall","illuminate\\foundation\\testing\\assertionstrait::assertsessionhaserrors","illuminate\\foundation\\testing\\assertionstrait::asserthasoldinput","illuminate\\foundation\\testing\\testcase::setup","illuminate\\foundation\\testing\\testcase::createapplication","illuminate\\foundation\\viewpublisher::__construct","illuminate\\foundation\\viewpublisher::publish","illuminate\\foundation\\viewpublisher::publishpackage","illuminate\\foundation\\viewpublisher::setpackagepath","illuminate\\hashing\\bcrypthasher::make","illuminate\\hashing\\bcrypthasher::check","illuminate\\hashing\\bcrypthasher::needsrehash","illuminate\\hashing\\hashserviceprovider::register","illuminate\\hashing\\hashserviceprovider::provides","illuminate\\hashing\\hasherinterface::make","illuminate\\hashing\\hasherinterface::check","illuminate\\hashing\\hasherinterface::needsrehash","illuminate\\html\\formbuilder::__construct","illuminate\\html\\formbuilder::open","illuminate\\html\\formbuilder::model","illuminate\\html\\formbuilder::setmodel","illuminate\\html\\formbuilder::close","illuminate\\html\\formbuilder::token","illuminate\\html\\formbuilder::label","illuminate\\html\\formbuilder::input","illuminate\\html\\formbuilder::text","illuminate\\html\\formbuilder::password","illuminate\\html\\formbuilder::hidden","illuminate\\html\\formbuilder::email","illuminate\\html\\formbuilder::url","illuminate\\html\\formbuilder::file","illuminate\\html\\formbuilder::textarea","illuminate\\html\\formbuilder::number","illuminate\\html\\formbuilder::select","illuminate\\html\\formbuilder::selectrange","illuminate\\html\\formbuilder::selectyear","illuminate\\html\\formbuilder::selectmonth","illuminate\\html\\formbuilder::getselectoption","illuminate\\html\\formbuilder::checkbox","illuminate\\html\\formbuilder::radio","illuminate\\html\\formbuilder::reset","illuminate\\html\\formbuilder::image","illuminate\\html\\formbuilder::submit","illuminate\\html\\formbuilder::button","illuminate\\html\\formbuilder::getidattribute","illuminate\\html\\formbuilder::getvalueattribute","illuminate\\html\\formbuilder::old","illuminate\\html\\formbuilder::oldinputisempty","illuminate\\html\\formbuilder::getsessionstore","illuminate\\html\\formbuilder::setsessionstore","illuminate\\html\\htmlbuilder::__construct","illuminate\\html\\htmlbuilder::entities","illuminate\\html\\htmlbuilder::decode","illuminate\\html\\htmlbuilder::script","illuminate\\html\\htmlbuilder::style","illuminate\\html\\htmlbuilder::image","illuminate\\html\\htmlbuilder::link","illuminate\\html\\htmlbuilder::securelink","illuminate\\html\\htmlbuilder::linkasset","illuminate\\html\\htmlbuilder::linksecureasset","illuminate\\html\\htmlbuilder::linkroute","illuminate\\html\\htmlbuilder::linkaction","illuminate\\html\\htmlbuilder::mailto","illuminate\\html\\htmlbuilder::email","illuminate\\html\\htmlbuilder::ol","illuminate\\html\\htmlbuilder::ul","illuminate\\html\\htmlbuilder::attributes","illuminate\\html\\htmlbuilder::obfuscate","illuminate\\html\\htmlserviceprovider::register","illuminate\\html\\htmlserviceprovider::provides","illuminate\\http\\frameguard::__construct","illuminate\\http\\frameguard::handle","illuminate\\http\\jsonresponse::__construct","illuminate\\http\\jsonresponse::getdata","illuminate\\http\\jsonresponse::setdata","illuminate\\http\\jsonresponse::getjsonoptions","illuminate\\http\\jsonresponse::setjsonoptions","illuminate\\http\\redirectresponse::header","illuminate\\http\\redirectresponse::with","illuminate\\http\\redirectresponse::withcookie","illuminate\\http\\redirectresponse::withinput","illuminate\\http\\redirectresponse::onlyinput","illuminate\\http\\redirectresponse::exceptinput","illuminate\\http\\redirectresponse::witherrors","illuminate\\http\\redirectresponse::getrequest","illuminate\\http\\redirectresponse::setrequest","illuminate\\http\\redirectresponse::getsession","illuminate\\http\\redirectresponse::setsession","illuminate\\http\\redirectresponse::__call","illuminate\\http\\request::instance","illuminate\\http\\request::method","illuminate\\http\\request::root","illuminate\\http\\request::url","illuminate\\http\\request::fullurl","illuminate\\http\\request::path","illuminate\\http\\request::decodedpath","illuminate\\http\\request::segment","illuminate\\http\\request::segments","illuminate\\http\\request::is","illuminate\\http\\request::ajax","illuminate\\http\\request::secure","illuminate\\http\\request::ip","illuminate\\http\\request::ips","illuminate\\http\\request::exists","illuminate\\http\\request::has","illuminate\\http\\request::all","illuminate\\http\\request::input","illuminate\\http\\request::only","illuminate\\http\\request::except","illuminate\\http\\request::query","illuminate\\http\\request::hascookie","illuminate\\http\\request::cookie","illuminate\\http\\request::file","illuminate\\http\\request::hasfile","illuminate\\http\\request::header","illuminate\\http\\request::server","illuminate\\http\\request::old","illuminate\\http\\request::flash","illuminate\\http\\request::flashonly","illuminate\\http\\request::flashexcept","illuminate\\http\\request::flush","illuminate\\http\\request::merge","illuminate\\http\\request::replace","illuminate\\http\\request::json","illuminate\\http\\request::isjson","illuminate\\http\\request::wantsjson","illuminate\\http\\request::format","illuminate\\http\\request::createfrombase","illuminate\\http\\request::session","illuminate\\http\\response::setcontent","illuminate\\http\\response::getoriginalcontent","illuminate\\http\\responsetrait::header","illuminate\\http\\responsetrait::withcookie","illuminate\\log\\logserviceprovider::register","illuminate\\log\\logserviceprovider::provides","illuminate\\log\\writer::__construct","illuminate\\log\\writer::usefiles","illuminate\\log\\writer::usedailyfiles","illuminate\\log\\writer::useerrorlog","illuminate\\log\\writer::listen","illuminate\\log\\writer::getmonolog","illuminate\\log\\writer::geteventdispatcher","illuminate\\log\\writer::seteventdispatcher","illuminate\\log\\writer::write","illuminate\\log\\writer::__call","illuminate\\mail\\mailserviceprovider::register","illuminate\\mail\\mailserviceprovider::registerswiftmailer","illuminate\\mail\\mailserviceprovider::provides","illuminate\\mail\\mailer::__construct","illuminate\\mail\\mailer::alwaysfrom","illuminate\\mail\\mailer::plain","illuminate\\mail\\mailer::send","illuminate\\mail\\mailer::queue","illuminate\\mail\\mailer::queueon","illuminate\\mail\\mailer::later","illuminate\\mail\\mailer::lateron","illuminate\\mail\\mailer::handlequeuedmessage","illuminate\\mail\\mailer::pretend","illuminate\\mail\\mailer::ispretending","illuminate\\mail\\mailer::getviewfactory","illuminate\\mail\\mailer::getswiftmailer","illuminate\\mail\\mailer::failures","illuminate\\mail\\mailer::setswiftmailer","illuminate\\mail\\mailer::setlogger","illuminate\\mail\\mailer::setqueue","illuminate\\mail\\mailer::setcontainer","illuminate\\mail\\message::__construct","illuminate\\mail\\message::from","illuminate\\mail\\message::sender","illuminate\\mail\\message::returnpath","illuminate\\mail\\message::to","illuminate\\mail\\message::cc","illuminate\\mail\\message::bcc","illuminate\\mail\\message::replyto","illuminate\\mail\\message::subject","illuminate\\mail\\message::priority","illuminate\\mail\\message::attach","illuminate\\mail\\message::attachdata","illuminate\\mail\\message::embed","illuminate\\mail\\message::embeddata","illuminate\\mail\\message::getswiftmessage","illuminate\\mail\\message::__call","illuminate\\mail\\transport\\logtransport::__construct","illuminate\\mail\\transport\\logtransport::isstarted","illuminate\\mail\\transport\\logtransport::start","illuminate\\mail\\transport\\logtransport::stop","illuminate\\mail\\transport\\logtransport::send","illuminate\\mail\\transport\\logtransport::registerplugin","illuminate\\mail\\transport\\mailguntransport::__construct","illuminate\\mail\\transport\\mailguntransport::isstarted","illuminate\\mail\\transport\\mailguntransport::start","illuminate\\mail\\transport\\mailguntransport::stop","illuminate\\mail\\transport\\mailguntransport::send","illuminate\\mail\\transport\\mailguntransport::registerplugin","illuminate\\mail\\transport\\mailguntransport::getkey","illuminate\\mail\\transport\\mailguntransport::setkey","illuminate\\mail\\transport\\mailguntransport::getdomain","illuminate\\mail\\transport\\mailguntransport::setdomain","illuminate\\mail\\transport\\mandrilltransport::__construct","illuminate\\mail\\transport\\mandrilltransport::isstarted","illuminate\\mail\\transport\\mandrilltransport::start","illuminate\\mail\\transport\\mandrilltransport::stop","illuminate\\mail\\transport\\mandrilltransport::send","illuminate\\mail\\transport\\mandrilltransport::registerplugin","illuminate\\mail\\transport\\mandrilltransport::getkey","illuminate\\mail\\transport\\mandrilltransport::setkey","illuminate\\pagination\\bootstrappresenter::getpagelinkwrapper","illuminate\\pagination\\bootstrappresenter::getdisabledtextwrapper","illuminate\\pagination\\bootstrappresenter::getactivepagewrapper","illuminate\\pagination\\factory::__construct","illuminate\\pagination\\factory::make","illuminate\\pagination\\factory::getpaginationview","illuminate\\pagination\\factory::getcurrentpage","illuminate\\pagination\\factory::setcurrentpage","illuminate\\pagination\\factory::getcurrenturl","illuminate\\pagination\\factory::setbaseurl","illuminate\\pagination\\factory::setpagename","illuminate\\pagination\\factory::getpagename","illuminate\\pagination\\factory::getviewname","illuminate\\pagination\\factory::setviewname","illuminate\\pagination\\factory::getlocale","illuminate\\pagination\\factory::setlocale","illuminate\\pagination\\factory::getrequest","illuminate\\pagination\\factory::setrequest","illuminate\\pagination\\factory::getviewfactory","illuminate\\pagination\\factory::setviewfactory","illuminate\\pagination\\factory::gettranslator","illuminate\\pagination\\paginationserviceprovider::register","illuminate\\pagination\\paginationserviceprovider::provides","illuminate\\pagination\\paginator::__construct","illuminate\\pagination\\paginator::setuppaginationcontext","illuminate\\pagination\\paginator::links","illuminate\\pagination\\paginator::geturl","illuminate\\pagination\\paginator::fragment","illuminate\\pagination\\paginator::appends","illuminate\\pagination\\paginator::addquery","illuminate\\pagination\\paginator::isquickpaginating","illuminate\\pagination\\paginator::getcurrentpage","illuminate\\pagination\\paginator::getlastpage","illuminate\\pagination\\paginator::getfrom","illuminate\\pagination\\paginator::getto","illuminate\\pagination\\paginator::getperpage","illuminate\\pagination\\paginator::getcollection","illuminate\\pagination\\paginator::getitems","illuminate\\pagination\\paginator::setitems","illuminate\\pagination\\paginator::gettotal","illuminate\\pagination\\paginator::setbaseurl","illuminate\\pagination\\paginator::getfactory","illuminate\\pagination\\paginator::getiterator","illuminate\\pagination\\paginator::isempty","illuminate\\pagination\\paginator::count","illuminate\\pagination\\paginator::offsetexists","illuminate\\pagination\\paginator::offsetget","illuminate\\pagination\\paginator::offsetset","illuminate\\pagination\\paginator::offsetunset","illuminate\\pagination\\paginator::toarray","illuminate\\pagination\\paginator::tojson","illuminate\\pagination\\paginator::__call","illuminate\\pagination\\presenter::__construct","illuminate\\pagination\\presenter::getpagelinkwrapper","illuminate\\pagination\\presenter::getdisabledtextwrapper","illuminate\\pagination\\presenter::getactivepagewrapper","illuminate\\pagination\\presenter::render","illuminate\\pagination\\presenter::getpagerange","illuminate\\pagination\\presenter::getadjacentrange","illuminate\\pagination\\presenter::getstart","illuminate\\pagination\\presenter::getfinish","illuminate\\pagination\\presenter::getprevious","illuminate\\pagination\\presenter::getnext","illuminate\\pagination\\presenter::getdots","illuminate\\pagination\\presenter::getlink","illuminate\\pagination\\presenter::setcurrentpage","illuminate\\pagination\\presenter::setlastpage","illuminate\\queue\\beanstalkdqueue::__construct","illuminate\\queue\\beanstalkdqueue::push","illuminate\\queue\\beanstalkdqueue::pushraw","illuminate\\queue\\beanstalkdqueue::later","illuminate\\queue\\beanstalkdqueue::pop","illuminate\\queue\\beanstalkdqueue::deletemessage","illuminate\\queue\\beanstalkdqueue::getqueue","illuminate\\queue\\beanstalkdqueue::getpheanstalk","illuminate\\queue\\capsule\\manager::__construct","illuminate\\queue\\capsule\\manager::connection","illuminate\\queue\\capsule\\manager::push","illuminate\\queue\\capsule\\manager::bulk","illuminate\\queue\\capsule\\manager::later","illuminate\\queue\\capsule\\manager::getconnection","illuminate\\queue\\capsule\\manager::addconnection","illuminate\\queue\\capsule\\manager::getqueuemanager","illuminate\\queue\\capsule\\manager::__call","illuminate\\queue\\capsule\\manager::__callstatic","illuminate\\queue\\connectors\\beanstalkdconnector::connect","illuminate\\queue\\connectors\\connectorinterface::connect","illuminate\\queue\\connectors\\ironconnector::__construct","illuminate\\queue\\connectors\\ironconnector::connect","illuminate\\queue\\connectors\\redisconnector::__construct","illuminate\\queue\\connectors\\redisconnector::connect","illuminate\\queue\\connectors\\sqsconnector::connect","illuminate\\queue\\connectors\\syncconnector::connect","illuminate\\queue\\console\\failedtablecommand::__construct","illuminate\\queue\\console\\failedtablecommand::fire","illuminate\\queue\\console\\flushfailedcommand::fire","illuminate\\queue\\console\\forgetfailedcommand::fire","illuminate\\queue\\console\\listfailedcommand::fire","illuminate\\queue\\console\\listencommand::__construct","illuminate\\queue\\console\\listencommand::fire","illuminate\\queue\\console\\restartcommand::fire","illuminate\\queue\\console\\retrycommand::fire","illuminate\\queue\\console\\subscribecommand::fire","illuminate\\queue\\console\\workcommand::__construct","illuminate\\queue\\console\\workcommand::fire","illuminate\\queue\\failconsoleserviceprovider::register","illuminate\\queue\\failconsoleserviceprovider::provides","illuminate\\queue\\failed\\databasefailedjobprovider::__construct","illuminate\\queue\\failed\\databasefailedjobprovider::log","illuminate\\queue\\failed\\databasefailedjobprovider::all","illuminate\\queue\\failed\\databasefailedjobprovider::find","illuminate\\queue\\failed\\databasefailedjobprovider::forget","illuminate\\queue\\failed\\databasefailedjobprovider::flush","illuminate\\queue\\failed\\failedjobproviderinterface::log","illuminate\\queue\\failed\\failedjobproviderinterface::all","illuminate\\queue\\failed\\failedjobproviderinterface::find","illuminate\\queue\\failed\\failedjobproviderinterface::forget","illuminate\\queue\\failed\\failedjobproviderinterface::flush","illuminate\\queue\\ironqueue::__construct","illuminate\\queue\\ironqueue::push","illuminate\\queue\\ironqueue::pushraw","illuminate\\queue\\ironqueue::recreate","illuminate\\queue\\ironqueue::later","illuminate\\queue\\ironqueue::pop","illuminate\\queue\\ironqueue::deletemessage","illuminate\\queue\\ironqueue::marshal","illuminate\\queue\\ironqueue::getqueue","illuminate\\queue\\ironqueue::getiron","illuminate\\queue\\ironqueue::getrequest","illuminate\\queue\\ironqueue::setrequest","illuminate\\queue\\jobs\\beanstalkdjob::__construct","illuminate\\queue\\jobs\\beanstalkdjob::fire","illuminate\\queue\\jobs\\beanstalkdjob::getrawbody","illuminate\\queue\\jobs\\beanstalkdjob::delete","illuminate\\queue\\jobs\\beanstalkdjob::release","illuminate\\queue\\jobs\\beanstalkdjob::bury","illuminate\\queue\\jobs\\beanstalkdjob::attempts","illuminate\\queue\\jobs\\beanstalkdjob::getjobid","illuminate\\queue\\jobs\\beanstalkdjob::getcontainer","illuminate\\queue\\jobs\\beanstalkdjob::getpheanstalk","illuminate\\queue\\jobs\\beanstalkdjob::getpheanstalkjob","illuminate\\queue\\jobs\\ironjob::__construct","illuminate\\queue\\jobs\\ironjob::fire","illuminate\\queue\\jobs\\ironjob::getrawbody","illuminate\\queue\\jobs\\ironjob::delete","illuminate\\queue\\jobs\\ironjob::release","illuminate\\queue\\jobs\\ironjob::attempts","illuminate\\queue\\jobs\\ironjob::getjobid","illuminate\\queue\\jobs\\ironjob::getcontainer","illuminate\\queue\\jobs\\ironjob::getiron","illuminate\\queue\\jobs\\ironjob::getironjob","illuminate\\queue\\jobs\\ironjob::getqueue","illuminate\\queue\\jobs\\job::fire","illuminate\\queue\\jobs\\job::delete","illuminate\\queue\\jobs\\job::isdeleted","illuminate\\queue\\jobs\\job::release","illuminate\\queue\\jobs\\job::attempts","illuminate\\queue\\jobs\\job::getrawbody","illuminate\\queue\\jobs\\job::autodelete","illuminate\\queue\\jobs\\job::getname","illuminate\\queue\\jobs\\job::getqueue","illuminate\\queue\\jobs\\redisjob::__construct","illuminate\\queue\\jobs\\redisjob::fire","illuminate\\queue\\jobs\\redisjob::getrawbody","illuminate\\queue\\jobs\\redisjob::delete","illuminate\\queue\\jobs\\redisjob::release","illuminate\\queue\\jobs\\redisjob::attempts","illuminate\\queue\\jobs\\redisjob::getjobid","illuminate\\queue\\jobs\\redisjob::getcontainer","illuminate\\queue\\jobs\\redisjob::getredisqueue","illuminate\\queue\\jobs\\redisjob::getredisjob","illuminate\\queue\\jobs\\sqsjob::__construct","illuminate\\queue\\jobs\\sqsjob::fire","illuminate\\queue\\jobs\\sqsjob::getrawbody","illuminate\\queue\\jobs\\sqsjob::delete","illuminate\\queue\\jobs\\sqsjob::release","illuminate\\queue\\jobs\\sqsjob::attempts","illuminate\\queue\\jobs\\sqsjob::getjobid","illuminate\\queue\\jobs\\sqsjob::getcontainer","illuminate\\queue\\jobs\\sqsjob::getsqs","illuminate\\queue\\jobs\\sqsjob::getsqsjob","illuminate\\queue\\jobs\\syncjob::__construct","illuminate\\queue\\jobs\\syncjob::fire","illuminate\\queue\\jobs\\syncjob::getrawbody","illuminate\\queue\\jobs\\syncjob::release","illuminate\\queue\\jobs\\syncjob::attempts","illuminate\\queue\\jobs\\syncjob::getjobid","illuminate\\queue\\listener::__construct","illuminate\\queue\\listener::listen","illuminate\\queue\\listener::runprocess","illuminate\\queue\\listener::makeprocess","illuminate\\queue\\listener::memoryexceeded","illuminate\\queue\\listener::stop","illuminate\\queue\\listener::setoutputhandler","illuminate\\queue\\listener::getenvironment","illuminate\\queue\\listener::setenvironment","illuminate\\queue\\listener::getsleep","illuminate\\queue\\listener::setsleep","illuminate\\queue\\listener::setmaxtries","illuminate\\queue\\queue::marshal","illuminate\\queue\\queue::bulk","illuminate\\queue\\queue::gettime","illuminate\\queue\\queue::setcontainer","illuminate\\queue\\queue::setencrypter","illuminate\\queue\\queueinterface::push","illuminate\\queue\\queueinterface::pushraw","illuminate\\queue\\queueinterface::later","illuminate\\queue\\queueinterface::pop","illuminate\\queue\\queuemanager::__construct","illuminate\\queue\\queuemanager::looping","illuminate\\queue\\queuemanager::failing","illuminate\\queue\\queuemanager::stopping","illuminate\\queue\\queuemanager::connected","illuminate\\queue\\queuemanager::connection","illuminate\\queue\\queuemanager::extend","illuminate\\queue\\queuemanager::addconnector","illuminate\\queue\\queuemanager::getdefaultdriver","illuminate\\queue\\queuemanager::setdefaultdriver","illuminate\\queue\\queuemanager::getname","illuminate\\queue\\queuemanager::isdownformaintenance","illuminate\\queue\\queuemanager::__call","illuminate\\queue\\queueserviceprovider::register","illuminate\\queue\\queueserviceprovider::registerrestartcommand","illuminate\\queue\\queueserviceprovider::registerconnectors","illuminate\\queue\\queueserviceprovider::provides","illuminate\\queue\\redisqueue::__construct","illuminate\\queue\\redisqueue::push","illuminate\\queue\\redisqueue::pushraw","illuminate\\queue\\redisqueue::later","illuminate\\queue\\redisqueue::release","illuminate\\queue\\redisqueue::pop","illuminate\\queue\\redisqueue::deletereserved","illuminate\\queue\\redisqueue::migrateexpiredjobs","illuminate\\queue\\redisqueue::getredis","illuminate\\queue\\sqsqueue::__construct","illuminate\\queue\\sqsqueue::push","illuminate\\queue\\sqsqueue::pushraw","illuminate\\queue\\sqsqueue::later","illuminate\\queue\\sqsqueue::pop","illuminate\\queue\\sqsqueue::getqueue","illuminate\\queue\\sqsqueue::getsqs","illuminate\\queue\\syncqueue::push","illuminate\\queue\\syncqueue::pushraw","illuminate\\queue\\syncqueue::later","illuminate\\queue\\syncqueue::pop","illuminate\\queue\\worker::__construct","illuminate\\queue\\worker::daemon","illuminate\\queue\\worker::pop","illuminate\\queue\\worker::process","illuminate\\queue\\worker::memoryexceeded","illuminate\\queue\\worker::stop","illuminate\\queue\\worker::sleep","illuminate\\queue\\worker::setdaemonexceptionhandler","illuminate\\queue\\worker::setcache","illuminate\\queue\\worker::getmanager","illuminate\\queue\\worker::setmanager","illuminate\\redis\\database::__construct","illuminate\\redis\\database::connection","illuminate\\redis\\database::command","illuminate\\redis\\database::__call","illuminate\\redis\\redisserviceprovider::register","illuminate\\redis\\redisserviceprovider::provides","illuminate\\remote\\connection::__construct","illuminate\\remote\\connection::define","illuminate\\remote\\connection::task","illuminate\\remote\\connection::run","illuminate\\remote\\connection::get","illuminate\\remote\\connection::getstring","illuminate\\remote\\connection::put","illuminate\\remote\\connection::putstring","illuminate\\remote\\connection::display","illuminate\\remote\\connection::status","illuminate\\remote\\connection::getgateway","illuminate\\remote\\connection::getoutput","illuminate\\remote\\connection::setoutput","illuminate\\remote\\connectioninterface::define","illuminate\\remote\\connectioninterface::task","illuminate\\remote\\connectioninterface::run","illuminate\\remote\\connectioninterface::put","illuminate\\remote\\connectioninterface::putstring","illuminate\\remote\\gatewayinterface::connect","illuminate\\remote\\gatewayinterface::connected","illuminate\\remote\\gatewayinterface::run","illuminate\\remote\\gatewayinterface::put","illuminate\\remote\\gatewayinterface::putstring","illuminate\\remote\\gatewayinterface::nextline","illuminate\\remote\\gatewayinterface::status","illuminate\\remote\\multiconnection::__construct","illuminate\\remote\\multiconnection::define","illuminate\\remote\\multiconnection::task","illuminate\\remote\\multiconnection::run","illuminate\\remote\\multiconnection::put","illuminate\\remote\\multiconnection::putstring","illuminate\\remote\\remotemanager::__construct","illuminate\\remote\\remotemanager::into","illuminate\\remote\\remotemanager::connection","illuminate\\remote\\remotemanager::group","illuminate\\remote\\remotemanager::multiple","illuminate\\remote\\remotemanager::resolve","illuminate\\remote\\remotemanager::getdefaultconnection","illuminate\\remote\\remotemanager::setdefaultconnection","illuminate\\remote\\remotemanager::__call","illuminate\\remote\\remoteserviceprovider::register","illuminate\\remote\\remoteserviceprovider::provides","illuminate\\remote\\seclibgateway::__construct","illuminate\\remote\\seclibgateway::connect","illuminate\\remote\\seclibgateway::connected","illuminate\\remote\\seclibgateway::run","illuminate\\remote\\seclibgateway::get","illuminate\\remote\\seclibgateway::getstring","illuminate\\remote\\seclibgateway::put","illuminate\\remote\\seclibgateway::putstring","illuminate\\remote\\seclibgateway::nextline","illuminate\\remote\\seclibgateway::getagent","illuminate\\remote\\seclibgateway::getnewkey","illuminate\\remote\\seclibgateway::status","illuminate\\remote\\seclibgateway::gethost","illuminate\\remote\\seclibgateway::getport","illuminate\\remote\\seclibgateway::getconnection","illuminate\\routing\\console\\makecontrollercommand::__construct","illuminate\\routing\\console\\makecontrollercommand::fire","illuminate\\routing\\controller::beforefilter","illuminate\\routing\\controller::afterfilter","illuminate\\routing\\controller::forgetbeforefilter","illuminate\\routing\\controller::forgetafterfilter","illuminate\\routing\\controller::getbeforefilters","illuminate\\routing\\controller::getafterfilters","illuminate\\routing\\controller::getfilterer","illuminate\\routing\\controller::setfilterer","illuminate\\routing\\controller::callaction","illuminate\\routing\\controller::missingmethod","illuminate\\routing\\controller::__call","illuminate\\routing\\controllerdispatcher::__construct","illuminate\\routing\\controllerdispatcher::dispatch","illuminate\\routing\\controllerinspector::getroutable","illuminate\\routing\\controllerinspector::isroutable","illuminate\\routing\\controllerinspector::getmethoddata","illuminate\\routing\\controllerinspector::getverb","illuminate\\routing\\controllerinspector::getplainuri","illuminate\\routing\\controllerinspector::adduriwildcards","illuminate\\routing\\controllerserviceprovider::register","illuminate\\routing\\controllerserviceprovider::provides","illuminate\\routing\\generators\\controllergenerator::__construct","illuminate\\routing\\generators\\controllergenerator::make","illuminate\\routing\\matching\\hostvalidator::matches","illuminate\\routing\\matching\\methodvalidator::matches","illuminate\\routing\\matching\\schemevalidator::matches","illuminate\\routing\\matching\\urivalidator::matches","illuminate\\routing\\matching\\validatorinterface::matches","illuminate\\routing\\redirector::__construct","illuminate\\routing\\redirector::home","illuminate\\routing\\redirector::back","illuminate\\routing\\redirector::refresh","illuminate\\routing\\redirector::guest","illuminate\\routing\\redirector::intended","illuminate\\routing\\redirector::to","illuminate\\routing\\redirector::away","illuminate\\routing\\redirector::secure","illuminate\\routing\\redirector::route","illuminate\\routing\\redirector::action","illuminate\\routing\\redirector::geturlgenerator","illuminate\\routing\\redirector::setsession","illuminate\\routing\\route::__construct","illuminate\\routing\\route::run","illuminate\\routing\\route::matches","illuminate\\routing\\route::beforefilters","illuminate\\routing\\route::afterfilters","illuminate\\routing\\route::parsefilters","illuminate\\routing\\route::parsefilter","illuminate\\routing\\route::getparameter","illuminate\\routing\\route::parameter","illuminate\\routing\\route::setparameter","illuminate\\routing\\route::forgetparameter","illuminate\\routing\\route::parameters","illuminate\\routing\\route::parameterswithoutnulls","illuminate\\routing\\route::parameternames","illuminate\\routing\\route::bind","illuminate\\routing\\route::bindparameters","illuminate\\routing\\route::getvalidators","illuminate\\routing\\route::before","illuminate\\routing\\route::after","illuminate\\routing\\route::defaults","illuminate\\routing\\route::where","illuminate\\routing\\route::prefix","illuminate\\routing\\route::getpath","illuminate\\routing\\route::uri","illuminate\\routing\\route::getmethods","illuminate\\routing\\route::methods","illuminate\\routing\\route::httponly","illuminate\\routing\\route::httpsonly","illuminate\\routing\\route::secure","illuminate\\routing\\route::domain","illuminate\\routing\\route::geturi","illuminate\\routing\\route::seturi","illuminate\\routing\\route::getprefix","illuminate\\routing\\route::getname","illuminate\\routing\\route::getactionname","illuminate\\routing\\route::getaction","illuminate\\routing\\route::setaction","illuminate\\routing\\route::getcompiled","illuminate\\routing\\routecollection::add","illuminate\\routing\\routecollection::match","illuminate\\routing\\routecollection::hasnamedroute","illuminate\\routing\\routecollection::getbyname","illuminate\\routing\\routecollection::getbyaction","illuminate\\routing\\routecollection::getroutes","illuminate\\routing\\routecollection::getiterator","illuminate\\routing\\routecollection::count","illuminate\\routing\\routefiltererinterface::filter","illuminate\\routing\\routefiltererinterface::callroutefilter","illuminate\\routing\\router::__construct","illuminate\\routing\\router::get","illuminate\\routing\\router::post","illuminate\\routing\\router::put","illuminate\\routing\\router::patch","illuminate\\routing\\router::delete","illuminate\\routing\\router::options","illuminate\\routing\\router::any","illuminate\\routing\\router::match","illuminate\\routing\\router::controllers","illuminate\\routing\\router::controller","illuminate\\routing\\router::resource","illuminate\\routing\\router::getresourceuri","illuminate\\routing\\router::getresourcewildcard","illuminate\\routing\\router::group","illuminate\\routing\\router::mergewithlastgroup","illuminate\\routing\\router::mergegroup","illuminate\\routing\\router::dispatch","illuminate\\routing\\router::dispatchtoroute","illuminate\\routing\\router::matched","illuminate\\routing\\router::before","illuminate\\routing\\router::after","illuminate\\routing\\router::filter","illuminate\\routing\\router::when","illuminate\\routing\\router::whenregex","illuminate\\routing\\router::model","illuminate\\routing\\router::bind","illuminate\\routing\\router::createclassbinding","illuminate\\routing\\router::pattern","illuminate\\routing\\router::patterns","illuminate\\routing\\router::callroutebefore","illuminate\\routing\\router::findpatternfilters","illuminate\\routing\\router::callrouteafter","illuminate\\routing\\router::callroutefilter","illuminate\\routing\\router::withoutfilters","illuminate\\routing\\router::enablefilters","illuminate\\routing\\router::disablefilters","illuminate\\routing\\router::input","illuminate\\routing\\router::getcurrentroute","illuminate\\routing\\router::current","illuminate\\routing\\router::has","illuminate\\routing\\router::currentroutename","illuminate\\routing\\router::is","illuminate\\routing\\router::currentroutenamed","illuminate\\routing\\router::currentrouteaction","illuminate\\routing\\router::uses","illuminate\\routing\\router::currentrouteuses","illuminate\\routing\\router::getcurrentrequest","illuminate\\routing\\router::getroutes","illuminate\\routing\\router::getcontrollerdispatcher","illuminate\\routing\\router::setcontrollerdispatcher","illuminate\\routing\\router::getinspector","illuminate\\routing\\router::getpatterns","illuminate\\routing\\router::handle","illuminate\\routing\\routingserviceprovider::register","illuminate\\routing\\urlgenerator::__construct","illuminate\\routing\\urlgenerator::full","illuminate\\routing\\urlgenerator::current","illuminate\\routing\\urlgenerator::previous","illuminate\\routing\\urlgenerator::to","illuminate\\routing\\urlgenerator::secure","illuminate\\routing\\urlgenerator::asset","illuminate\\routing\\urlgenerator::secureasset","illuminate\\routing\\urlgenerator::forceschema","illuminate\\routing\\urlgenerator::route","illuminate\\routing\\urlgenerator::action","illuminate\\routing\\urlgenerator::forcerooturl","illuminate\\routing\\urlgenerator::isvalidurl","illuminate\\routing\\urlgenerator::getrequest","illuminate\\routing\\urlgenerator::setrequest","illuminate\\session\\cachebasedsessionhandler::__construct","illuminate\\session\\cachebasedsessionhandler::open","illuminate\\session\\cachebasedsessionhandler::close","illuminate\\session\\cachebasedsessionhandler::read","illuminate\\session\\cachebasedsessionhandler::write","illuminate\\session\\cachebasedsessionhandler::destroy","illuminate\\session\\cachebasedsessionhandler::gc","illuminate\\session\\cachebasedsessionhandler::getcache","illuminate\\session\\commandsserviceprovider::register","illuminate\\session\\commandsserviceprovider::provides","illuminate\\session\\console\\sessiontablecommand::__construct","illuminate\\session\\console\\sessiontablecommand::fire","illuminate\\session\\cookiesessionhandler::__construct","illuminate\\session\\cookiesessionhandler::open","illuminate\\session\\cookiesessionhandler::close","illuminate\\session\\cookiesessionhandler::read","illuminate\\session\\cookiesessionhandler::write","illuminate\\session\\cookiesessionhandler::destroy","illuminate\\session\\cookiesessionhandler::gc","illuminate\\session\\cookiesessionhandler::setrequest","illuminate\\session\\databasesessionhandler::__construct","illuminate\\session\\databasesessionhandler::open","illuminate\\session\\databasesessionhandler::close","illuminate\\session\\databasesessionhandler::read","illuminate\\session\\databasesessionhandler::write","illuminate\\session\\databasesessionhandler::destroy","illuminate\\session\\databasesessionhandler::gc","illuminate\\session\\databasesessionhandler::setexists","illuminate\\session\\existenceawareinterface::setexists","illuminate\\session\\filesessionhandler::__construct","illuminate\\session\\filesessionhandler::open","illuminate\\session\\filesessionhandler::close","illuminate\\session\\filesessionhandler::read","illuminate\\session\\filesessionhandler::write","illuminate\\session\\filesessionhandler::destroy","illuminate\\session\\filesessionhandler::gc","illuminate\\session\\middleware::__construct","illuminate\\session\\middleware::handle","illuminate\\session\\middleware::checkrequestforarraysessions","illuminate\\session\\middleware::getsession","illuminate\\session\\sessioninterface::gethandler","illuminate\\session\\sessioninterface::handlerneedsrequest","illuminate\\session\\sessioninterface::setrequestonhandler","illuminate\\session\\sessionmanager::getsessionconfig","illuminate\\session\\sessionmanager::getdefaultdriver","illuminate\\session\\sessionmanager::setdefaultdriver","illuminate\\session\\sessionserviceprovider::register","illuminate\\session\\store::__construct","illuminate\\session\\store::start","illuminate\\session\\store::getid","illuminate\\session\\store::setid","illuminate\\session\\store::isvalidid","illuminate\\session\\store::getname","illuminate\\session\\store::setname","illuminate\\session\\store::invalidate","illuminate\\session\\store::migrate","illuminate\\session\\store::regenerate","illuminate\\session\\store::save","illuminate\\session\\store::ageflashdata","illuminate\\session\\store::has","illuminate\\session\\store::get","illuminate\\session\\store::pull","illuminate\\session\\store::hasoldinput","illuminate\\session\\store::getoldinput","illuminate\\session\\store::set","illuminate\\session\\store::put","illuminate\\session\\store::push","illuminate\\session\\store::flash","illuminate\\session\\store::flashinput","illuminate\\session\\store::reflash","illuminate\\session\\store::keep","illuminate\\session\\store::all","illuminate\\session\\store::replace","illuminate\\session\\store::remove","illuminate\\session\\store::forget","illuminate\\session\\store::clear","illuminate\\session\\store::flush","illuminate\\session\\store::isstarted","illuminate\\session\\store::registerbag","illuminate\\session\\store::getbag","illuminate\\session\\store::getmetadatabag","illuminate\\session\\store::getbagdata","illuminate\\session\\store::token","illuminate\\session\\store::gettoken","illuminate\\session\\store::regeneratetoken","illuminate\\session\\store::setexists","illuminate\\session\\store::gethandler","illuminate\\session\\store::handlerneedsrequest","illuminate\\session\\store::setrequestonhandler","illuminate\\support\\arr::add","illuminate\\support\\arr::build","illuminate\\support\\arr::divide","illuminate\\support\\arr::dot","illuminate\\support\\arr::except","illuminate\\support\\arr::fetch","illuminate\\support\\arr::first","illuminate\\support\\arr::last","illuminate\\support\\arr::flatten","illuminate\\support\\arr::forget","illuminate\\support\\arr::get","illuminate\\support\\arr::only","illuminate\\support\\arr::pluck","illuminate\\support\\arr::pull","illuminate\\support\\arr::set","illuminate\\support\\arr::sort","illuminate\\support\\arr::where","illuminate\\support\\classloader::load","illuminate\\support\\classloader::normalizeclass","illuminate\\support\\classloader::register","illuminate\\support\\classloader::adddirectories","illuminate\\support\\classloader::removedirectories","illuminate\\support\\classloader::getdirectories","illuminate\\support\\collection::__construct","illuminate\\support\\collection::make","illuminate\\support\\collection::all","illuminate\\support\\collection::collapse","illuminate\\support\\collection::contains","illuminate\\support\\collection::diff","illuminate\\support\\collection::each","illuminate\\support\\collection::fetch","illuminate\\support\\collection::filter","illuminate\\support\\collection::first","illuminate\\support\\collection::flatten","illuminate\\support\\collection::flip","illuminate\\support\\collection::forget","illuminate\\support\\collection::get","illuminate\\support\\collection::groupby","illuminate\\support\\collection::keyby","illuminate\\support\\collection::has","illuminate\\support\\collection::implode","illuminate\\support\\collection::intersect","illuminate\\support\\collection::isempty","illuminate\\support\\collection::keys","illuminate\\support\\collection::last","illuminate\\support\\collection::lists","illuminate\\support\\collection::map","illuminate\\support\\collection::merge","illuminate\\support\\collection::pop","illuminate\\support\\collection::prepend","illuminate\\support\\collection::push","illuminate\\support\\collection::pull","illuminate\\support\\collection::put","illuminate\\support\\collection::random","illuminate\\support\\collection::reduce","illuminate\\support\\collection::reject","illuminate\\support\\collection::reverse","illuminate\\support\\collection::search","illuminate\\support\\collection::shift","illuminate\\support\\collection::shuffle","illuminate\\support\\collection::slice","illuminate\\support\\collection::chunk","illuminate\\support\\collection::sort","illuminate\\support\\collection::sortby","illuminate\\support\\collection::sortbydesc","illuminate\\support\\collection::splice","illuminate\\support\\collection::sum","illuminate\\support\\collection::take","illuminate\\support\\collection::transform","illuminate\\support\\collection::unique","illuminate\\support\\collection::values","illuminate\\support\\collection::toarray","illuminate\\support\\collection::jsonserialize","illuminate\\support\\collection::tojson","illuminate\\support\\collection::getiterator","illuminate\\support\\collection::getcachingiterator","illuminate\\support\\collection::count","illuminate\\support\\collection::offsetexists","illuminate\\support\\collection::offsetget","illuminate\\support\\collection::offsetset","illuminate\\support\\collection::offsetunset","illuminate\\support\\collection::__tostring","illuminate\\support\\contracts\\arrayableinterface::toarray","illuminate\\support\\contracts\\jsonableinterface::tojson","illuminate\\support\\contracts\\messageproviderinterface::getmessagebag","illuminate\\support\\contracts\\renderableinterface::render","illuminate\\support\\contracts\\responsepreparerinterface::prepareresponse","illuminate\\support\\contracts\\responsepreparerinterface::readyforresponses","illuminate\\support\\facades\\cookie::has","illuminate\\support\\facades\\cookie::get","illuminate\\support\\facades\\facade::swap","illuminate\\support\\facades\\facade::shouldreceive","illuminate\\support\\facades\\facade::getfacaderoot","illuminate\\support\\facades\\facade::clearresolvedinstance","illuminate\\support\\facades\\facade::clearresolvedinstances","illuminate\\support\\facades\\facade::getfacadeapplication","illuminate\\support\\facades\\facade::setfacadeapplication","illuminate\\support\\facades\\facade::__callstatic","illuminate\\support\\facades\\input::get","illuminate\\support\\facades\\response::make","illuminate\\support\\facades\\response::view","illuminate\\support\\facades\\response::json","illuminate\\support\\facades\\response::jsonp","illuminate\\support\\facades\\response::stream","illuminate\\support\\facades\\response::download","illuminate\\support\\facades\\schema::connection","illuminate\\support\\fluent::__construct","illuminate\\support\\fluent::get","illuminate\\support\\fluent::getattributes","illuminate\\support\\fluent::toarray","illuminate\\support\\fluent::jsonserialize","illuminate\\support\\fluent::tojson","illuminate\\support\\fluent::offsetexists","illuminate\\support\\fluent::offsetget","illuminate\\support\\fluent::offsetset","illuminate\\support\\fluent::offsetunset","illuminate\\support\\fluent::__call","illuminate\\support\\fluent::__get","illuminate\\support\\fluent::__set","illuminate\\support\\fluent::__isset","illuminate\\support\\fluent::__unset","illuminate\\support\\manager::__construct","illuminate\\support\\manager::getdefaultdriver","illuminate\\support\\manager::driver","illuminate\\support\\manager::extend","illuminate\\support\\manager::getdrivers","illuminate\\support\\manager::__call","illuminate\\support\\messagebag::__construct","illuminate\\support\\messagebag::add","illuminate\\support\\messagebag::merge","illuminate\\support\\messagebag::has","illuminate\\support\\messagebag::first","illuminate\\support\\messagebag::get","illuminate\\support\\messagebag::all","illuminate\\support\\messagebag::getmessages","illuminate\\support\\messagebag::getmessagebag","illuminate\\support\\messagebag::getformat","illuminate\\support\\messagebag::setformat","illuminate\\support\\messagebag::isempty","illuminate\\support\\messagebag::any","illuminate\\support\\messagebag::count","illuminate\\support\\messagebag::toarray","illuminate\\support\\messagebag::jsonserialize","illuminate\\support\\messagebag::tojson","illuminate\\support\\messagebag::__tostring","illuminate\\support\\namespaceditemresolver::parsekey","illuminate\\support\\namespaceditemresolver::setparsedkey","illuminate\\support\\pluralizer::singular","illuminate\\support\\pluralizer::plural","illuminate\\support\\serializableclosure::getcode","illuminate\\support\\serializableclosure::getvariables","illuminate\\support\\serviceprovider::__construct","illuminate\\support\\serviceprovider::boot","illuminate\\support\\serviceprovider::register","illuminate\\support\\serviceprovider::package","illuminate\\support\\serviceprovider::guesspackagepath","illuminate\\support\\serviceprovider::commands","illuminate\\support\\serviceprovider::provides","illuminate\\support\\serviceprovider::when","illuminate\\support\\serviceprovider::isdeferred","illuminate\\support\\str::ascii","illuminate\\support\\str::camel","illuminate\\support\\str::contains","illuminate\\support\\str::endswith","illuminate\\support\\str::finish","illuminate\\support\\str::is","illuminate\\support\\str::length","illuminate\\support\\str::limit","illuminate\\support\\str::lower","illuminate\\support\\str::words","illuminate\\support\\str::parsecallback","illuminate\\support\\str::plural","illuminate\\support\\str::random","illuminate\\support\\str::quickrandom","illuminate\\support\\str::upper","illuminate\\support\\str::title","illuminate\\support\\str::singular","illuminate\\support\\str::slug","illuminate\\support\\str::snake","illuminate\\support\\str::startswith","illuminate\\support\\str::studly","illuminate\\support\\traits\\capsulemanagertrait::setasglobal","illuminate\\support\\traits\\capsulemanagertrait::getcontainer","illuminate\\support\\traits\\capsulemanagertrait::setcontainer","illuminate\\support\\traits\\macroabletrait::macro","illuminate\\support\\traits\\macroabletrait::hasmacro","illuminate\\support\\traits\\macroabletrait::__callstatic","illuminate\\support\\traits\\macroabletrait::__call","illuminate\\support\\viewerrorbag::hasbag","illuminate\\support\\viewerrorbag::getbag","illuminate\\support\\viewerrorbag::put","illuminate\\support\\viewerrorbag::count","illuminate\\support\\viewerrorbag::__call","illuminate\\support\\viewerrorbag::__get","illuminate\\support\\viewerrorbag::__set","illuminate\\translation\\fileloader::__construct","illuminate\\translation\\fileloader::load","illuminate\\translation\\fileloader::addnamespace","illuminate\\translation\\loaderinterface::load","illuminate\\translation\\loaderinterface::addnamespace","illuminate\\translation\\translationserviceprovider::register","illuminate\\translation\\translationserviceprovider::provides","illuminate\\translation\\translator::__construct","illuminate\\translation\\translator::has","illuminate\\translation\\translator::get","illuminate\\translation\\translator::choice","illuminate\\translation\\translator::trans","illuminate\\translation\\translator::transchoice","illuminate\\translation\\translator::load","illuminate\\translation\\translator::addnamespace","illuminate\\translation\\translator::parsekey","illuminate\\translation\\translator::getselector","illuminate\\translation\\translator::setselector","illuminate\\translation\\translator::getloader","illuminate\\translation\\translator::locale","illuminate\\translation\\translator::getlocale","illuminate\\translation\\translator::setlocale","illuminate\\translation\\translator::getfallback","illuminate\\translation\\translator::setfallback","illuminate\\validation\\databasepresenceverifier::__construct","illuminate\\validation\\databasepresenceverifier::getcount","illuminate\\validation\\databasepresenceverifier::getmulticount","illuminate\\validation\\databasepresenceverifier::setconnection","illuminate\\validation\\factory::__construct","illuminate\\validation\\factory::make","illuminate\\validation\\factory::extend","illuminate\\validation\\factory::extendimplicit","illuminate\\validation\\factory::replacer","illuminate\\validation\\factory::resolver","illuminate\\validation\\factory::gettranslator","illuminate\\validation\\factory::getpresenceverifier","illuminate\\validation\\factory::setpresenceverifier","illuminate\\validation\\presenceverifierinterface::getcount","illuminate\\validation\\presenceverifierinterface::getmulticount","illuminate\\validation\\validationserviceprovider::register","illuminate\\validation\\validationserviceprovider::provides","illuminate\\validation\\validator::__construct","illuminate\\validation\\validator::sometimes","illuminate\\validation\\validator::each","illuminate\\validation\\validator::mergerules","illuminate\\validation\\validator::passes","illuminate\\validation\\validator::fails","illuminate\\validation\\validator::valid","illuminate\\validation\\validator::invalid","illuminate\\validation\\validator::getdisplayablevalue","illuminate\\validation\\validator::getextensions","illuminate\\validation\\validator::addextensions","illuminate\\validation\\validator::addimplicitextensions","illuminate\\validation\\validator::addextension","illuminate\\validation\\validator::addimplicitextension","illuminate\\validation\\validator::getreplacers","illuminate\\validation\\validator::addreplacers","illuminate\\validation\\validator::addreplacer","illuminate\\validation\\validator::getdata","illuminate\\validation\\validator::setdata","illuminate\\validation\\validator::getrules","illuminate\\validation\\validator::setrules","illuminate\\validation\\validator::setattributenames","illuminate\\validation\\validator::setvaluenames","illuminate\\validation\\validator::getfiles","illuminate\\validation\\validator::setfiles","illuminate\\validation\\validator::getpresenceverifier","illuminate\\validation\\validator::setpresenceverifier","illuminate\\validation\\validator::gettranslator","illuminate\\validation\\validator::settranslator","illuminate\\validation\\validator::getcustommessages","illuminate\\validation\\validator::setcustommessages","illuminate\\validation\\validator::getcustomattributes","illuminate\\validation\\validator::addcustomattributes","illuminate\\validation\\validator::getcustomvalues","illuminate\\validation\\validator::addcustomvalues","illuminate\\validation\\validator::getfallbackmessages","illuminate\\validation\\validator::setfallbackmessages","illuminate\\validation\\validator::failed","illuminate\\validation\\validator::messages","illuminate\\validation\\validator::errors","illuminate\\validation\\validator::getmessagebag","illuminate\\validation\\validator::setcontainer","illuminate\\validation\\validator::__call","illuminate\\view\\compilers\\bladecompiler::compile","illuminate\\view\\compilers\\bladecompiler::getpath","illuminate\\view\\compilers\\bladecompiler::setpath","illuminate\\view\\compilers\\bladecompiler::compilestring","illuminate\\view\\compilers\\bladecompiler::compileechodefaults","illuminate\\view\\compilers\\bladecompiler::extend","illuminate\\view\\compilers\\bladecompiler::creatematcher","illuminate\\view\\compilers\\bladecompiler::createopenmatcher","illuminate\\view\\compilers\\bladecompiler::createplainmatcher","illuminate\\view\\compilers\\bladecompiler::setcontenttags","illuminate\\view\\compilers\\bladecompiler::setescapedcontenttags","illuminate\\view\\compilers\\bladecompiler::getcontenttags","illuminate\\view\\compilers\\bladecompiler::getescapedcontenttags","illuminate\\view\\compilers\\compiler::__construct","illuminate\\view\\compilers\\compiler::getcompiledpath","illuminate\\view\\compilers\\compiler::isexpired","illuminate\\view\\compilers\\compilerinterface::getcompiledpath","illuminate\\view\\compilers\\compilerinterface::isexpired","illuminate\\view\\compilers\\compilerinterface::compile","illuminate\\view\\engines\\compilerengine::__construct","illuminate\\view\\engines\\compilerengine::get","illuminate\\view\\engines\\compilerengine::getcompiler","illuminate\\view\\engines\\engine::getlastrendered","illuminate\\view\\engines\\engineinterface::get","illuminate\\view\\engines\\engineresolver::register","illuminate\\view\\engines\\engineresolver::resolve","illuminate\\view\\engines\\phpengine::get","illuminate\\view\\factory::__construct","illuminate\\view\\factory::make","illuminate\\view\\factory::of","illuminate\\view\\factory::name","illuminate\\view\\factory::alias","illuminate\\view\\factory::exists","illuminate\\view\\factory::rendereach","illuminate\\view\\factory::getenginefrompath","illuminate\\view\\factory::share","illuminate\\view\\factory::creator","illuminate\\view\\factory::composers","illuminate\\view\\factory::composer","illuminate\\view\\factory::callcomposer","illuminate\\view\\factory::callcreator","illuminate\\view\\factory::startsection","illuminate\\view\\factory::inject","illuminate\\view\\factory::yieldsection","illuminate\\view\\factory::stopsection","illuminate\\view\\factory::appendsection","illuminate\\view\\factory::yieldcontent","illuminate\\view\\factory::flushsections","illuminate\\view\\factory::flushsectionsifdonerendering","illuminate\\view\\factory::incrementrender","illuminate\\view\\factory::decrementrender","illuminate\\view\\factory::donerendering","illuminate\\view\\factory::addlocation","illuminate\\view\\factory::addnamespace","illuminate\\view\\factory::prependnamespace","illuminate\\view\\factory::addextension","illuminate\\view\\factory::getextensions","illuminate\\view\\factory::getengineresolver","illuminate\\view\\factory::getfinder","illuminate\\view\\factory::setfinder","illuminate\\view\\factory::getdispatcher","illuminate\\view\\factory::setdispatcher","illuminate\\view\\factory::getcontainer","illuminate\\view\\factory::setcontainer","illuminate\\view\\factory::shared","illuminate\\view\\factory::getshared","illuminate\\view\\factory::getsections","illuminate\\view\\factory::getnames","illuminate\\view\\fileviewfinder::__construct","illuminate\\view\\fileviewfinder::find","illuminate\\view\\fileviewfinder::addlocation","illuminate\\view\\fileviewfinder::addnamespace","illuminate\\view\\fileviewfinder::prependnamespace","illuminate\\view\\fileviewfinder::addextension","illuminate\\view\\fileviewfinder::hashintinformation","illuminate\\view\\fileviewfinder::getfilesystem","illuminate\\view\\fileviewfinder::getpaths","illuminate\\view\\fileviewfinder::gethints","illuminate\\view\\fileviewfinder::getextensions","illuminate\\view\\view::__construct","illuminate\\view\\view::render","illuminate\\view\\view::rendersections","illuminate\\view\\view::with","illuminate\\view\\view::nest","illuminate\\view\\view::witherrors","illuminate\\view\\view::getfactory","illuminate\\view\\view::getengine","illuminate\\view\\view::getname","illuminate\\view\\view::getdata","illuminate\\view\\view::getpath","illuminate\\view\\view::setpath","illuminate\\view\\view::offsetexists","illuminate\\view\\view::offsetget","illuminate\\view\\view::offsetset","illuminate\\view\\view::offsetunset","illuminate\\view\\view::__get","illuminate\\view\\view::__set","illuminate\\view\\view::__isset","illuminate\\view\\view::__unset","illuminate\\view\\view::__call","illuminate\\view\\view::__tostring","illuminate\\view\\viewfinderinterface::find","illuminate\\view\\viewfinderinterface::addlocation","illuminate\\view\\viewfinderinterface::addnamespace","illuminate\\view\\viewfinderinterface::prependnamespace","illuminate\\view\\viewfinderinterface::addextension","illuminate\\view\\viewserviceprovider::register","illuminate\\view\\viewserviceprovider::registerengineresolver","illuminate\\view\\viewserviceprovider::registerphpengine","illuminate\\view\\viewserviceprovider::registerbladeengine","illuminate\\view\\viewserviceprovider::registerviewfinder","illuminate\\view\\viewserviceprovider::registerfactory","illuminate\\view\\viewserviceprovider::sessionhaserrors","illuminate\\workbench\\console\\workbenchmakecommand::__construct","illuminate\\workbench\\console\\workbenchmakecommand::fire","illuminate\\workbench\\package::__construct","illuminate\\workbench\\package::getfullname","illuminate\\workbench\\packagecreator::__construct","illuminate\\workbench\\packagecreator::create","illuminate\\workbench\\packagecreator::createwithresources","illuminate\\workbench\\packagecreator::writesupportfiles","illuminate\\workbench\\packagecreator::writeignorefile","illuminate\\workbench\\packagecreator::writesupportdirectories","illuminate\\workbench\\packagecreator::writepublicdirectory","illuminate\\workbench\\packagecreator::writetestdirectory","illuminate\\workbench\\packagecreator::writeserviceprovider","illuminate\\workbench\\starter::start","illuminate\\workbench\\workbenchserviceprovider::register","illuminate\\workbench\\workbenchserviceprovider::provides"],
        'info': [["","",".html","","",3],["Illuminate","","Illuminate.html","","",3],["Illuminate\\Auth","","Illuminate\/Auth.html","","",3],["Illuminate\\Auth\\Console","","Illuminate\/Auth\/Console.html","","",3],["Illuminate\\Auth\\Reminders","","Illuminate\/Auth\/Reminders.html","","",3],["Illuminate\\Cache","","Illuminate\/Cache.html","","",3],["Illuminate\\Cache\\Console","","Illuminate\/Cache\/Console.html","","",3],["Illuminate\\Config","","Illuminate\/Config.html","","",3],["Illuminate\\Console","","Illuminate\/Console.html","","",3],["Illuminate\\Container","","Illuminate\/Container.html","","",3],["Illuminate\\Cookie","","Illuminate\/Cookie.html","","",3],["Illuminate\\Database","","Illuminate\/Database.html","","",3],["Illuminate\\Database\\Capsule","","Illuminate\/Database\/Capsule.html","","",3],["Illuminate\\Database\\Connectors","","Illuminate\/Database\/Connectors.html","","",3],["Illuminate\\Database\\Console","","Illuminate\/Database\/Console.html","","",3],["Illuminate\\Database\\Console\\Migrations","","Illuminate\/Database\/Console\/Migrations.html","","",3],["Illuminate\\Database\\Eloquent","","Illuminate\/Database\/Eloquent.html","","",3],["Illuminate\\Database\\Eloquent\\Relations","","Illuminate\/Database\/Eloquent\/Relations.html","","",3],["Illuminate\\Database\\Migrations","","Illuminate\/Database\/Migrations.html","","",3],["Illuminate\\Database\\Query","","Illuminate\/Database\/Query.html","","",3],["Illuminate\\Database\\Query\\Grammars","","Illuminate\/Database\/Query\/Grammars.html","","",3],["Illuminate\\Database\\Query\\Processors","","Illuminate\/Database\/Query\/Processors.html","","",3],["Illuminate\\Database\\Schema","","Illuminate\/Database\/Schema.html","","",3],["Illuminate\\Database\\Schema\\Grammars","","Illuminate\/Database\/Schema\/Grammars.html","","",3],["Illuminate\\Encryption","","Illuminate\/Encryption.html","","",3],["Illuminate\\Events","","Illuminate\/Events.html","","",3],["Illuminate\\Exception","","Illuminate\/Exception.html","","",3],["Illuminate\\Filesystem","","Illuminate\/Filesystem.html","","",3],["Illuminate\\Foundation","","Illuminate\/Foundation.html","","",3],["Illuminate\\Foundation\\Console","","Illuminate\/Foundation\/Console.html","","",3],["Illuminate\\Foundation\\Providers","","Illuminate\/Foundation\/Providers.html","","",3],["Illuminate\\Foundation\\Testing","","Illuminate\/Foundation\/Testing.html","","",3],["Illuminate\\Hashing","","Illuminate\/Hashing.html","","",3],["Illuminate\\Html","","Illuminate\/Html.html","","",3],["Illuminate\\Http","","Illuminate\/Http.html","","",3],["Illuminate\\Log","","Illuminate\/Log.html","","",3],["Illuminate\\Mail","","Illuminate\/Mail.html","","",3],["Illuminate\\Mail\\Transport","","Illuminate\/Mail\/Transport.html","","",3],["Illuminate\\Pagination","","Illuminate\/Pagination.html","","",3],["Illuminate\\Queue","","Illuminate\/Queue.html","","",3],["Illuminate\\Queue\\Capsule","","Illuminate\/Queue\/Capsule.html","","",3],["Illuminate\\Queue\\Connectors","","Illuminate\/Queue\/Connectors.html","","",3],["Illuminate\\Queue\\Console","","Illuminate\/Queue\/Console.html","","",3],["Illuminate\\Queue\\Failed","","Illuminate\/Queue\/Failed.html","","",3],["Illuminate\\Queue\\Jobs","","Illuminate\/Queue\/Jobs.html","","",3],["Illuminate\\Redis","","Illuminate\/Redis.html","","",3],["Illuminate\\Remote","","Illuminate\/Remote.html","","",3],["Illuminate\\Routing","","Illuminate\/Routing.html","","",3],["Illuminate\\Routing\\Console","","Illuminate\/Routing\/Console.html","","",3],["Illuminate\\Routing\\Generators","","Illuminate\/Routing\/Generators.html","","",3],["Illuminate\\Routing\\Matching","","Illuminate\/Routing\/Matching.html","","",3],["Illuminate\\Session","","Illuminate\/Session.html","","",3],["Illuminate\\Session\\Console","","Illuminate\/Session\/Console.html","","",3],["Illuminate\\Support","","Illuminate\/Support.html","","",3],["Illuminate\\Support\\Contracts","","Illuminate\/Support\/Contracts.html","","",3],["Illuminate\\Support\\Facades","","Illuminate\/Support\/Facades.html","","",3],["Illuminate\\Support\\Traits","","Illuminate\/Support\/Traits.html","","",3],["Illuminate\\Translation","","Illuminate\/Translation.html","","",3],["Illuminate\\Validation","","Illuminate\/Validation.html","","",3],["Illuminate\\View","","Illuminate\/View.html","","",3],["Illuminate\\View\\Compilers","","Illuminate\/View\/Compilers.html","","",3],["Illuminate\\View\\Engines","","Illuminate\/View\/Engines.html","","",3],["Illuminate\\Workbench","","Illuminate\/Workbench.html","","",3],["Illuminate\\Workbench\\Console","","Illuminate\/Workbench\/Console.html","","",3],["IlluminateQueueClosure","","IlluminateQueueClosure.html","","",1],["AuthManager","Illuminate\\Auth","Illuminate\/Auth\/AuthManager.html"," < Manager","",1],["AuthServiceProvider","Illuminate\\Auth","Illuminate\/Auth\/AuthServiceProvider.html"," < ServiceProvider","",1],["ClearRemindersCommand","Illuminate\\Auth\\Console","Illuminate\/Auth\/Console\/ClearRemindersCommand.html"," < Command","",1],["RemindersControllerCommand","Illuminate\\Auth\\Console","Illuminate\/Auth\/Console\/RemindersControllerCommand.html"," < Command","",1],["RemindersTableCommand","Illuminate\\Auth\\Console","Illuminate\/Auth\/Console\/RemindersTableCommand.html"," < Command","",1],["DatabaseUserProvider","Illuminate\\Auth","Illuminate\/Auth\/DatabaseUserProvider.html","","",1],["EloquentUserProvider","Illuminate\\Auth","Illuminate\/Auth\/EloquentUserProvider.html","","",1],["GenericUser","Illuminate\\Auth","Illuminate\/Auth\/GenericUser.html","","",1],["Guard","Illuminate\\Auth","Illuminate\/Auth\/Guard.html","","",1],["DatabaseReminderRepository","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html","","",1],["PasswordBroker","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/PasswordBroker.html","","",1],["RemindableInterface","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/RemindableInterface.html","","",1],["RemindableTrait","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/RemindableTrait.html","","",1],["ReminderRepositoryInterface","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html","","",1],["ReminderServiceProvider","Illuminate\\Auth\\Reminders","Illuminate\/Auth\/Reminders\/ReminderServiceProvider.html"," < ServiceProvider","",1],["UserInterface","Illuminate\\Auth","Illuminate\/Auth\/UserInterface.html","","",1],["UserProviderInterface","Illuminate\\Auth","Illuminate\/Auth\/UserProviderInterface.html","","",1],["UserTrait","Illuminate\\Auth","Illuminate\/Auth\/UserTrait.html","","",1],["ApcStore","Illuminate\\Cache","Illuminate\/Cache\/ApcStore.html"," < TaggableStore","",1],["ApcWrapper","Illuminate\\Cache","Illuminate\/Cache\/ApcWrapper.html","","",1],["ArrayStore","Illuminate\\Cache","Illuminate\/Cache\/ArrayStore.html"," < TaggableStore","",1],["CacheManager","Illuminate\\Cache","Illuminate\/Cache\/CacheManager.html"," < Manager","",1],["CacheServiceProvider","Illuminate\\Cache","Illuminate\/Cache\/CacheServiceProvider.html"," < ServiceProvider","",1],["CacheTableCommand","Illuminate\\Cache\\Console","Illuminate\/Cache\/Console\/CacheTableCommand.html"," < Command","",1],["ClearCommand","Illuminate\\Cache\\Console","Illuminate\/Cache\/Console\/ClearCommand.html"," < Command","",1],["DatabaseStore","Illuminate\\Cache","Illuminate\/Cache\/DatabaseStore.html","","",1],["FileStore","Illuminate\\Cache","Illuminate\/Cache\/FileStore.html","","",1],["MemcachedConnector","Illuminate\\Cache","Illuminate\/Cache\/MemcachedConnector.html","","",1],["MemcachedStore","Illuminate\\Cache","Illuminate\/Cache\/MemcachedStore.html"," < TaggableStore","",1],["NullStore","Illuminate\\Cache","Illuminate\/Cache\/NullStore.html"," < TaggableStore","",1],["RedisStore","Illuminate\\Cache","Illuminate\/Cache\/RedisStore.html"," < TaggableStore","",1],["RedisTaggedCache","Illuminate\\Cache","Illuminate\/Cache\/RedisTaggedCache.html"," < TaggedCache","",1],["Repository","Illuminate\\Cache","Illuminate\/Cache\/Repository.html","","",1],["StoreInterface","Illuminate\\Cache","Illuminate\/Cache\/StoreInterface.html","","",1],["TagSet","Illuminate\\Cache","Illuminate\/Cache\/TagSet.html","","",1],["TaggableStore","Illuminate\\Cache","Illuminate\/Cache\/TaggableStore.html","","",1],["TaggedCache","Illuminate\\Cache","Illuminate\/Cache\/TaggedCache.html","","",1],["WinCacheStore","Illuminate\\Cache","Illuminate\/Cache\/WinCacheStore.html"," < TaggableStore","",1],["XCacheStore","Illuminate\\Cache","Illuminate\/Cache\/XCacheStore.html"," < TaggableStore","",1],["EnvironmentVariables","Illuminate\\Config","Illuminate\/Config\/EnvironmentVariables.html","","PHP $_ENV loader for protecting sensitive configuration",1],["EnvironmentVariablesLoaderInterface","Illuminate\\Config","Illuminate\/Config\/EnvironmentVariablesLoaderInterface.html","","",1],["FileEnvironmentVariablesLoader","Illuminate\\Config","Illuminate\/Config\/FileEnvironmentVariablesLoader.html","","",1],["FileLoader","Illuminate\\Config","Illuminate\/Config\/FileLoader.html","","",1],["LoaderInterface","Illuminate\\Config","Illuminate\/Config\/LoaderInterface.html","","",1],["Repository","Illuminate\\Config","Illuminate\/Config\/Repository.html"," < NamespacedItemResolver","",1],["Application","Illuminate\\Console","Illuminate\/Console\/Application.html"," < Application","",1],["Command","Illuminate\\Console","Illuminate\/Console\/Command.html"," < Command","",1],["ConfirmableTrait","Illuminate\\Console","Illuminate\/Console\/ConfirmableTrait.html","","",1],["BindingResolutionException","Illuminate\\Container","Illuminate\/Container\/BindingResolutionException.html"," < Exception","",1],["Container","Illuminate\\Container","Illuminate\/Container\/Container.html","","",1],["CookieJar","Illuminate\\Cookie","Illuminate\/Cookie\/CookieJar.html","","",1],["CookieServiceProvider","Illuminate\\Cookie","Illuminate\/Cookie\/CookieServiceProvider.html"," < ServiceProvider","",1],["Guard","Illuminate\\Cookie","Illuminate\/Cookie\/Guard.html","","",1],["Queue","Illuminate\\Cookie","Illuminate\/Cookie\/Queue.html","","",1],["Manager","Illuminate\\Database\\Capsule","Illuminate\/Database\/Capsule\/Manager.html","","",1],["Connection","Illuminate\\Database","Illuminate\/Database\/Connection.html","","",1],["ConnectionInterface","Illuminate\\Database","Illuminate\/Database\/ConnectionInterface.html","","",1],["ConnectionResolver","Illuminate\\Database","Illuminate\/Database\/ConnectionResolver.html","","",1],["ConnectionResolverInterface","Illuminate\\Database","Illuminate\/Database\/ConnectionResolverInterface.html","","",1],["ConnectionFactory","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/ConnectionFactory.html","","",1],["Connector","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/Connector.html","","",1],["ConnectorInterface","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/ConnectorInterface.html","","",1],["MySqlConnector","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/MySqlConnector.html"," < Connector","",1],["PostgresConnector","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/PostgresConnector.html"," < Connector","",1],["SQLiteConnector","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/SQLiteConnector.html"," < Connector","",1],["SqlServerConnector","Illuminate\\Database\\Connectors","Illuminate\/Database\/Connectors\/SqlServerConnector.html"," < Connector","",1],["BaseCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/BaseCommand.html"," < Command","",1],["InstallCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/InstallCommand.html"," < Command","",1],["MigrateCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/MigrateCommand.html"," < BaseCommand","",1],["MigrateMakeCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/MigrateMakeCommand.html"," < BaseCommand","",1],["RefreshCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/RefreshCommand.html"," < Command","",1],["ResetCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/ResetCommand.html"," < Command","",1],["RollbackCommand","Illuminate\\Database\\Console\\Migrations","Illuminate\/Database\/Console\/Migrations\/RollbackCommand.html"," < Command","",1],["SeedCommand","Illuminate\\Database\\Console","Illuminate\/Database\/Console\/SeedCommand.html"," < Command","",1],["DatabaseManager","Illuminate\\Database","Illuminate\/Database\/DatabaseManager.html","","",1],["DatabaseServiceProvider","Illuminate\\Database","Illuminate\/Database\/DatabaseServiceProvider.html"," < ServiceProvider","",1],["Builder","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/Builder.html","","",1],["Collection","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/Collection.html"," < Collection","",1],["MassAssignmentException","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/MassAssignmentException.html"," < RuntimeException","",1],["Model","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/Model.html","","",1],["ModelNotFoundException","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/ModelNotFoundException.html"," < RuntimeException","",1],["BelongsTo","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html"," < Relation","",1],["BelongsToMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html"," < Relation","",1],["HasMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/HasMany.html"," < HasOneOrMany","",1],["HasManyThrough","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html"," < Relation","",1],["HasOne","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/HasOne.html"," < HasOneOrMany","",1],["HasOneOrMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html"," < Relation","",1],["MorphMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphMany.html"," < MorphOneOrMany","",1],["MorphOne","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphOne.html"," < MorphOneOrMany","",1],["MorphOneOrMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html"," < HasOneOrMany","",1],["MorphPivot","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphPivot.html"," < Pivot","",1],["MorphTo","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html"," < BelongsTo","",1],["MorphToMany","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html"," < BelongsToMany","",1],["Pivot","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html"," < Model","",1],["Relation","Illuminate\\Database\\Eloquent\\Relations","Illuminate\/Database\/Eloquent\/Relations\/Relation.html","","",1],["ScopeInterface","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/ScopeInterface.html","","",1],["SoftDeletingScope","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/SoftDeletingScope.html","","",1],["SoftDeletingTrait","Illuminate\\Database\\Eloquent","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html","","",1],["Grammar","Illuminate\\Database","Illuminate\/Database\/Grammar.html","","",1],["MigrationServiceProvider","Illuminate\\Database","Illuminate\/Database\/MigrationServiceProvider.html"," < ServiceProvider","",1],["DatabaseMigrationRepository","Illuminate\\Database\\Migrations","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html","","",1],["Migration","Illuminate\\Database\\Migrations","Illuminate\/Database\/Migrations\/Migration.html","","",1],["MigrationCreator","Illuminate\\Database\\Migrations","Illuminate\/Database\/Migrations\/MigrationCreator.html","","",1],["MigrationRepositoryInterface","Illuminate\\Database\\Migrations","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html","","",1],["Migrator","Illuminate\\Database\\Migrations","Illuminate\/Database\/Migrations\/Migrator.html","","",1],["MySqlConnection","Illuminate\\Database","Illuminate\/Database\/MySqlConnection.html"," < Connection","",1],["PostgresConnection","Illuminate\\Database","Illuminate\/Database\/PostgresConnection.html"," < Connection","",1],["QueryException","Illuminate\\Database","Illuminate\/Database\/QueryException.html"," < PDOException","",1],["Builder","Illuminate\\Database\\Query","Illuminate\/Database\/Query\/Builder.html","","",1],["Expression","Illuminate\\Database\\Query","Illuminate\/Database\/Query\/Expression.html","","",1],["Grammar","Illuminate\\Database\\Query\\Grammars","Illuminate\/Database\/Query\/Grammars\/Grammar.html"," < Grammar","",1],["MySqlGrammar","Illuminate\\Database\\Query\\Grammars","Illuminate\/Database\/Query\/Grammars\/MySqlGrammar.html"," < Grammar","",1],["PostgresGrammar","Illuminate\\Database\\Query\\Grammars","Illuminate\/Database\/Query\/Grammars\/PostgresGrammar.html"," < Grammar","",1],["SQLiteGrammar","Illuminate\\Database\\Query\\Grammars","Illuminate\/Database\/Query\/Grammars\/SQLiteGrammar.html"," < Grammar","",1],["SqlServerGrammar","Illuminate\\Database\\Query\\Grammars","Illuminate\/Database\/Query\/Grammars\/SqlServerGrammar.html"," < Grammar","",1],["JoinClause","Illuminate\\Database\\Query","Illuminate\/Database\/Query\/JoinClause.html","","",1],["MySqlProcessor","Illuminate\\Database\\Query\\Processors","Illuminate\/Database\/Query\/Processors\/MySqlProcessor.html"," < Processor","",1],["PostgresProcessor","Illuminate\\Database\\Query\\Processors","Illuminate\/Database\/Query\/Processors\/PostgresProcessor.html"," < Processor","",1],["Processor","Illuminate\\Database\\Query\\Processors","Illuminate\/Database\/Query\/Processors\/Processor.html","","",1],["SQLiteProcessor","Illuminate\\Database\\Query\\Processors","Illuminate\/Database\/Query\/Processors\/SQLiteProcessor.html"," < Processor","",1],["SqlServerProcessor","Illuminate\\Database\\Query\\Processors","Illuminate\/Database\/Query\/Processors\/SqlServerProcessor.html"," < Processor","",1],["SQLiteConnection","Illuminate\\Database","Illuminate\/Database\/SQLiteConnection.html"," < Connection","",1],["Blueprint","Illuminate\\Database\\Schema","Illuminate\/Database\/Schema\/Blueprint.html","","",1],["Builder","Illuminate\\Database\\Schema","Illuminate\/Database\/Schema\/Builder.html","","",1],["Grammar","Illuminate\\Database\\Schema\\Grammars","Illuminate\/Database\/Schema\/Grammars\/Grammar.html"," < Grammar","",1],["MySqlGrammar","Illuminate\\Database\\Schema\\Grammars","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html"," < Grammar","",1],["PostgresGrammar","Illuminate\\Database\\Schema\\Grammars","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html"," < Grammar","",1],["SQLiteGrammar","Illuminate\\Database\\Schema\\Grammars","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html"," < Grammar","",1],["SqlServerGrammar","Illuminate\\Database\\Schema\\Grammars","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html"," < Grammar","",1],["MySqlBuilder","Illuminate\\Database\\Schema","Illuminate\/Database\/Schema\/MySqlBuilder.html"," < Builder","",1],["SeedServiceProvider","Illuminate\\Database","Illuminate\/Database\/SeedServiceProvider.html"," < ServiceProvider","",1],["Seeder","Illuminate\\Database","Illuminate\/Database\/Seeder.html","","",1],["SqlServerConnection","Illuminate\\Database","Illuminate\/Database\/SqlServerConnection.html"," < Connection","",1],["DecryptException","Illuminate\\Encryption","Illuminate\/Encryption\/DecryptException.html"," < RuntimeException","",1],["Encrypter","Illuminate\\Encryption","Illuminate\/Encryption\/Encrypter.html","","",1],["EncryptionServiceProvider","Illuminate\\Encryption","Illuminate\/Encryption\/EncryptionServiceProvider.html"," < ServiceProvider","",1],["Dispatcher","Illuminate\\Events","Illuminate\/Events\/Dispatcher.html","","",1],["EventServiceProvider","Illuminate\\Events","Illuminate\/Events\/EventServiceProvider.html"," < ServiceProvider","",1],["ExceptionDisplayerInterface","Illuminate\\Exception","Illuminate\/Exception\/ExceptionDisplayerInterface.html","","",1],["ExceptionServiceProvider","Illuminate\\Exception","Illuminate\/Exception\/ExceptionServiceProvider.html"," < ServiceProvider","",1],["Handler","Illuminate\\Exception","Illuminate\/Exception\/Handler.html","","",1],["PlainDisplayer","Illuminate\\Exception","Illuminate\/Exception\/PlainDisplayer.html","","",1],["SymfonyDisplayer","Illuminate\\Exception","Illuminate\/Exception\/SymfonyDisplayer.html","","",1],["WhoopsDisplayer","Illuminate\\Exception","Illuminate\/Exception\/WhoopsDisplayer.html","","",1],["FileNotFoundException","Illuminate\\Filesystem","Illuminate\/Filesystem\/FileNotFoundException.html"," < Exception","",1],["Filesystem","Illuminate\\Filesystem","Illuminate\/Filesystem\/Filesystem.html","","",1],["FilesystemServiceProvider","Illuminate\\Filesystem","Illuminate\/Filesystem\/FilesystemServiceProvider.html"," < ServiceProvider","",1],["AliasLoader","Illuminate\\Foundation","Illuminate\/Foundation\/AliasLoader.html","","",1],["Application","Illuminate\\Foundation","Illuminate\/Foundation\/Application.html"," < Container","",1],["Artisan","Illuminate\\Foundation","Illuminate\/Foundation\/Artisan.html","","",1],["AssetPublisher","Illuminate\\Foundation","Illuminate\/Foundation\/AssetPublisher.html","","",1],["Composer","Illuminate\\Foundation","Illuminate\/Foundation\/Composer.html","","",1],["ConfigPublisher","Illuminate\\Foundation","Illuminate\/Foundation\/ConfigPublisher.html","","",1],["AssetPublishCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/AssetPublishCommand.html"," < Command","",1],["AutoloadCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/AutoloadCommand.html"," < Command","",1],["ChangesCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/ChangesCommand.html"," < Command","",1],["ClearCompiledCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/ClearCompiledCommand.html"," < Command","",1],["CommandMakeCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/CommandMakeCommand.html"," < Command","",1],["ConfigPublishCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/ConfigPublishCommand.html"," < Command","",1],["DownCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/DownCommand.html"," < Command","",1],["EnvironmentCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/EnvironmentCommand.html"," < Command","",1],["KeyGenerateCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/KeyGenerateCommand.html"," < Command","",1],["MigratePublishCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/MigratePublishCommand.html"," < Command","",1],["OptimizeCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/OptimizeCommand.html"," < Command","",1],["RoutesCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/RoutesCommand.html"," < Command","",1],["ServeCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/ServeCommand.html"," < Command","",1],["TailCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/TailCommand.html"," < Command","",1],["TinkerCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/TinkerCommand.html"," < Command","",1],["UpCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/UpCommand.html"," < Command","",1],["ViewPublishCommand","Illuminate\\Foundation\\Console","Illuminate\/Foundation\/Console\/ViewPublishCommand.html"," < Command","",1],["EnvironmentDetector","Illuminate\\Foundation","Illuminate\/Foundation\/EnvironmentDetector.html","","",1],["MigrationPublisher","Illuminate\\Foundation","Illuminate\/Foundation\/MigrationPublisher.html","","",1],["ProviderRepository","Illuminate\\Foundation","Illuminate\/Foundation\/ProviderRepository.html","","",1],["ArtisanServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/ArtisanServiceProvider.html"," < ServiceProvider","",1],["CommandCreatorServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/CommandCreatorServiceProvider.html"," < ServiceProvider","",1],["ComposerServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/ComposerServiceProvider.html"," < ServiceProvider","",1],["ConsoleSupportServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/ConsoleSupportServiceProvider.html"," < ServiceProvider","",1],["KeyGeneratorServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/KeyGeneratorServiceProvider.html"," < ServiceProvider","",1],["MaintenanceServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/MaintenanceServiceProvider.html"," < ServiceProvider","",1],["OptimizeServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/OptimizeServiceProvider.html"," < ServiceProvider","",1],["PublisherServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/PublisherServiceProvider.html"," < ServiceProvider","",1],["RouteListServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/RouteListServiceProvider.html"," < ServiceProvider","",1],["ServerServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/ServerServiceProvider.html"," < ServiceProvider","",1],["TinkerServiceProvider","Illuminate\\Foundation\\Providers","Illuminate\/Foundation\/Providers\/TinkerServiceProvider.html"," < ServiceProvider","",1],["ApplicationTrait","Illuminate\\Foundation\\Testing","Illuminate\/Foundation\/Testing\/ApplicationTrait.html","","",1],["AssertionsTrait","Illuminate\\Foundation\\Testing","Illuminate\/Foundation\/Testing\/AssertionsTrait.html","","",1],["Client","Illuminate\\Foundation\\Testing","Illuminate\/Foundation\/Testing\/Client.html"," < Client","",1],["TestCase","Illuminate\\Foundation\\Testing","Illuminate\/Foundation\/Testing\/TestCase.html"," < PHPUnit_Framework_TestCase","",1],["ViewPublisher","Illuminate\\Foundation","Illuminate\/Foundation\/ViewPublisher.html","","",1],["BcryptHasher","Illuminate\\Hashing","Illuminate\/Hashing\/BcryptHasher.html","","",1],["HashServiceProvider","Illuminate\\Hashing","Illuminate\/Hashing\/HashServiceProvider.html"," < ServiceProvider","",1],["HasherInterface","Illuminate\\Hashing","Illuminate\/Hashing\/HasherInterface.html","","",1],["FormBuilder","Illuminate\\Html","Illuminate\/Html\/FormBuilder.html","","",1],["HtmlBuilder","Illuminate\\Html","Illuminate\/Html\/HtmlBuilder.html","","",1],["HtmlServiceProvider","Illuminate\\Html","Illuminate\/Html\/HtmlServiceProvider.html"," < ServiceProvider","",1],["FrameGuard","Illuminate\\Http","Illuminate\/Http\/FrameGuard.html","","",1],["JsonResponse","Illuminate\\Http","Illuminate\/Http\/JsonResponse.html"," < JsonResponse","",1],["RedirectResponse","Illuminate\\Http","Illuminate\/Http\/RedirectResponse.html"," < RedirectResponse","",1],["Request","Illuminate\\Http","Illuminate\/Http\/Request.html"," < Request","",1],["Response","Illuminate\\Http","Illuminate\/Http\/Response.html"," < Response","",1],["ResponseTrait","Illuminate\\Http","Illuminate\/Http\/ResponseTrait.html","","",1],["LogServiceProvider","Illuminate\\Log","Illuminate\/Log\/LogServiceProvider.html"," < ServiceProvider","",1],["Writer","Illuminate\\Log","Illuminate\/Log\/Writer.html","","",1],["MailServiceProvider","Illuminate\\Mail","Illuminate\/Mail\/MailServiceProvider.html"," < ServiceProvider","",1],["Mailer","Illuminate\\Mail","Illuminate\/Mail\/Mailer.html","","",1],["Message","Illuminate\\Mail","Illuminate\/Mail\/Message.html","","",1],["LogTransport","Illuminate\\Mail\\Transport","Illuminate\/Mail\/Transport\/LogTransport.html","","",1],["MailgunTransport","Illuminate\\Mail\\Transport","Illuminate\/Mail\/Transport\/MailgunTransport.html","","",1],["MandrillTransport","Illuminate\\Mail\\Transport","Illuminate\/Mail\/Transport\/MandrillTransport.html","","",1],["BootstrapPresenter","Illuminate\\Pagination","Illuminate\/Pagination\/BootstrapPresenter.html"," < Presenter","",1],["Factory","Illuminate\\Pagination","Illuminate\/Pagination\/Factory.html","","",1],["PaginationServiceProvider","Illuminate\\Pagination","Illuminate\/Pagination\/PaginationServiceProvider.html"," < ServiceProvider","",1],["Paginator","Illuminate\\Pagination","Illuminate\/Pagination\/Paginator.html","","",1],["Presenter","Illuminate\\Pagination","Illuminate\/Pagination\/Presenter.html","","",1],["BeanstalkdQueue","Illuminate\\Queue","Illuminate\/Queue\/BeanstalkdQueue.html"," < Queue","",1],["Manager","Illuminate\\Queue\\Capsule","Illuminate\/Queue\/Capsule\/Manager.html","","",1],["BeanstalkdConnector","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/BeanstalkdConnector.html","","",1],["ConnectorInterface","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/ConnectorInterface.html","","",1],["IronConnector","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/IronConnector.html","","",1],["RedisConnector","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/RedisConnector.html","","",1],["SqsConnector","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/SqsConnector.html","","",1],["SyncConnector","Illuminate\\Queue\\Connectors","Illuminate\/Queue\/Connectors\/SyncConnector.html","","",1],["FailedTableCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/FailedTableCommand.html"," < Command","",1],["FlushFailedCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/FlushFailedCommand.html"," < Command","",1],["ForgetFailedCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/ForgetFailedCommand.html"," < Command","",1],["ListFailedCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/ListFailedCommand.html"," < Command","",1],["ListenCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/ListenCommand.html"," < Command","",1],["RestartCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/RestartCommand.html"," < Command","",1],["RetryCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/RetryCommand.html"," < Command","",1],["SubscribeCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/SubscribeCommand.html"," < Command","",1],["WorkCommand","Illuminate\\Queue\\Console","Illuminate\/Queue\/Console\/WorkCommand.html"," < Command","",1],["FailConsoleServiceProvider","Illuminate\\Queue","Illuminate\/Queue\/FailConsoleServiceProvider.html"," < ServiceProvider","",1],["DatabaseFailedJobProvider","Illuminate\\Queue\\Failed","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html","","",1],["FailedJobProviderInterface","Illuminate\\Queue\\Failed","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html","","",1],["IronQueue","Illuminate\\Queue","Illuminate\/Queue\/IronQueue.html"," < Queue","",1],["BeanstalkdJob","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html"," < Job","",1],["IronJob","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/IronJob.html"," < Job","",1],["Job","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/Job.html","","",1],["RedisJob","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/RedisJob.html"," < Job","",1],["SqsJob","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/SqsJob.html"," < Job","",1],["SyncJob","Illuminate\\Queue\\Jobs","Illuminate\/Queue\/Jobs\/SyncJob.html"," < Job","",1],["Listener","Illuminate\\Queue","Illuminate\/Queue\/Listener.html","","",1],["Queue","Illuminate\\Queue","Illuminate\/Queue\/Queue.html","","",1],["QueueInterface","Illuminate\\Queue","Illuminate\/Queue\/QueueInterface.html","","",1],["QueueManager","Illuminate\\Queue","Illuminate\/Queue\/QueueManager.html","","",1],["QueueServiceProvider","Illuminate\\Queue","Illuminate\/Queue\/QueueServiceProvider.html"," < ServiceProvider","",1],["RedisQueue","Illuminate\\Queue","Illuminate\/Queue\/RedisQueue.html"," < Queue","",1],["SqsQueue","Illuminate\\Queue","Illuminate\/Queue\/SqsQueue.html"," < Queue","",1],["SyncQueue","Illuminate\\Queue","Illuminate\/Queue\/SyncQueue.html"," < Queue","",1],["Worker","Illuminate\\Queue","Illuminate\/Queue\/Worker.html","","",1],["Database","Illuminate\\Redis","Illuminate\/Redis\/Database.html","","",1],["RedisServiceProvider","Illuminate\\Redis","Illuminate\/Redis\/RedisServiceProvider.html"," < ServiceProvider","",1],["Connection","Illuminate\\Remote","Illuminate\/Remote\/Connection.html","","",1],["ConnectionInterface","Illuminate\\Remote","Illuminate\/Remote\/ConnectionInterface.html","","",1],["GatewayInterface","Illuminate\\Remote","Illuminate\/Remote\/GatewayInterface.html","","",1],["MultiConnection","Illuminate\\Remote","Illuminate\/Remote\/MultiConnection.html","","",1],["RemoteManager","Illuminate\\Remote","Illuminate\/Remote\/RemoteManager.html","","",1],["RemoteServiceProvider","Illuminate\\Remote","Illuminate\/Remote\/RemoteServiceProvider.html"," < ServiceProvider","",1],["SecLibGateway","Illuminate\\Remote","Illuminate\/Remote\/SecLibGateway.html","","",1],["MakeControllerCommand","Illuminate\\Routing\\Console","Illuminate\/Routing\/Console\/MakeControllerCommand.html"," < Command","",1],["Controller","Illuminate\\Routing","Illuminate\/Routing\/Controller.html","","",1],["ControllerDispatcher","Illuminate\\Routing","Illuminate\/Routing\/ControllerDispatcher.html","","",1],["ControllerInspector","Illuminate\\Routing","Illuminate\/Routing\/ControllerInspector.html","","",1],["ControllerServiceProvider","Illuminate\\Routing","Illuminate\/Routing\/ControllerServiceProvider.html"," < ServiceProvider","",1],["ControllerGenerator","Illuminate\\Routing\\Generators","Illuminate\/Routing\/Generators\/ControllerGenerator.html","","",1],["HostValidator","Illuminate\\Routing\\Matching","Illuminate\/Routing\/Matching\/HostValidator.html","","",1],["MethodValidator","Illuminate\\Routing\\Matching","Illuminate\/Routing\/Matching\/MethodValidator.html","","",1],["SchemeValidator","Illuminate\\Routing\\Matching","Illuminate\/Routing\/Matching\/SchemeValidator.html","","",1],["UriValidator","Illuminate\\Routing\\Matching","Illuminate\/Routing\/Matching\/UriValidator.html","","",1],["ValidatorInterface","Illuminate\\Routing\\Matching","Illuminate\/Routing\/Matching\/ValidatorInterface.html","","",1],["Redirector","Illuminate\\Routing","Illuminate\/Routing\/Redirector.html","","",1],["Route","Illuminate\\Routing","Illuminate\/Routing\/Route.html","","",1],["RouteCollection","Illuminate\\Routing","Illuminate\/Routing\/RouteCollection.html","","",1],["RouteFiltererInterface","Illuminate\\Routing","Illuminate\/Routing\/RouteFiltererInterface.html","","",1],["Router","Illuminate\\Routing","Illuminate\/Routing\/Router.html","","",1],["RoutingServiceProvider","Illuminate\\Routing","Illuminate\/Routing\/RoutingServiceProvider.html"," < ServiceProvider","",1],["UrlGenerator","Illuminate\\Routing","Illuminate\/Routing\/UrlGenerator.html","","",1],["CacheBasedSessionHandler","Illuminate\\Session","Illuminate\/Session\/CacheBasedSessionHandler.html","","",1],["CommandsServiceProvider","Illuminate\\Session","Illuminate\/Session\/CommandsServiceProvider.html"," < ServiceProvider","",1],["SessionTableCommand","Illuminate\\Session\\Console","Illuminate\/Session\/Console\/SessionTableCommand.html"," < Command","",1],["CookieSessionHandler","Illuminate\\Session","Illuminate\/Session\/CookieSessionHandler.html","","",1],["DatabaseSessionHandler","Illuminate\\Session","Illuminate\/Session\/DatabaseSessionHandler.html","","",1],["ExistenceAwareInterface","Illuminate\\Session","Illuminate\/Session\/ExistenceAwareInterface.html","","",1],["FileSessionHandler","Illuminate\\Session","Illuminate\/Session\/FileSessionHandler.html","","",1],["Middleware","Illuminate\\Session","Illuminate\/Session\/Middleware.html","","",1],["SessionInterface","Illuminate\\Session","Illuminate\/Session\/SessionInterface.html","","",1],["SessionManager","Illuminate\\Session","Illuminate\/Session\/SessionManager.html"," < Manager","",1],["SessionServiceProvider","Illuminate\\Session","Illuminate\/Session\/SessionServiceProvider.html"," < ServiceProvider","",1],["Store","Illuminate\\Session","Illuminate\/Session\/Store.html","","",1],["TokenMismatchException","Illuminate\\Session","Illuminate\/Session\/TokenMismatchException.html"," < Exception","",1],["Arr","Illuminate\\Support","Illuminate\/Support\/Arr.html","","",1],["ClassLoader","Illuminate\\Support","Illuminate\/Support\/ClassLoader.html","","",1],["Collection","Illuminate\\Support","Illuminate\/Support\/Collection.html","","",1],["ArrayableInterface","Illuminate\\Support\\Contracts","Illuminate\/Support\/Contracts\/ArrayableInterface.html","","",1],["JsonableInterface","Illuminate\\Support\\Contracts","Illuminate\/Support\/Contracts\/JsonableInterface.html","","",1],["MessageProviderInterface","Illuminate\\Support\\Contracts","Illuminate\/Support\/Contracts\/MessageProviderInterface.html","","",1],["RenderableInterface","Illuminate\\Support\\Contracts","Illuminate\/Support\/Contracts\/RenderableInterface.html","","",1],["ResponsePreparerInterface","Illuminate\\Support\\Contracts","Illuminate\/Support\/Contracts\/ResponsePreparerInterface.html","","",1],["App","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/App.html"," < Facade","",1],["Artisan","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Artisan.html"," < Facade","",1],["Auth","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Auth.html"," < Facade","",1],["Blade","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Blade.html"," < Facade","",1],["Cache","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Cache.html"," < Facade","",1],["Config","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Config.html"," < Facade","",1],["Cookie","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Cookie.html"," < Facade","",1],["Crypt","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Crypt.html"," < Facade","",1],["DB","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/DB.html"," < Facade","",1],["Event","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Event.html"," < Facade","",1],["Facade","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Facade.html","","",1],["File","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/File.html"," < Facade","",1],["Form","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Form.html"," < Facade","",1],["HTML","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/HTML.html"," < Facade","",1],["Hash","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Hash.html"," < Facade","",1],["Input","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Input.html"," < Facade","",1],["Lang","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Lang.html"," < Facade","",1],["Log","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Log.html"," < Facade","",1],["Mail","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Mail.html"," < Facade","",1],["Paginator","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Paginator.html"," < Facade","",1],["Password","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Password.html"," < Facade","",1],["Queue","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Queue.html"," < Facade","",1],["Redirect","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Redirect.html"," < Facade","",1],["Redis","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Redis.html"," < Facade","",1],["Request","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Request.html"," < Facade","",1],["Response","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Response.html","","",1],["Route","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Route.html"," < Facade","",1],["SSH","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/SSH.html"," < Facade","",1],["Schema","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Schema.html"," < Facade","",1],["Session","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Session.html"," < Facade","",1],["URL","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/URL.html"," < Facade","",1],["Validator","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/Validator.html"," < Facade","",1],["View","Illuminate\\Support\\Facades","Illuminate\/Support\/Facades\/View.html"," < Facade","",1],["Fluent","Illuminate\\Support","Illuminate\/Support\/Fluent.html","","",1],["Manager","Illuminate\\Support","Illuminate\/Support\/Manager.html","","",1],["MessageBag","Illuminate\\Support","Illuminate\/Support\/MessageBag.html","","",1],["NamespacedItemResolver","Illuminate\\Support","Illuminate\/Support\/NamespacedItemResolver.html","","",1],["Pluralizer","Illuminate\\Support","Illuminate\/Support\/Pluralizer.html","","",1],["SerializableClosure","Illuminate\\Support","Illuminate\/Support\/SerializableClosure.html"," < SerializableClosure","Extends SuperClosure for backwards compatibility.",1],["ServiceProvider","Illuminate\\Support","Illuminate\/Support\/ServiceProvider.html","","",1],["Str","Illuminate\\Support","Illuminate\/Support\/Str.html","","",1],["CapsuleManagerTrait","Illuminate\\Support\\Traits","Illuminate\/Support\/Traits\/CapsuleManagerTrait.html","","",1],["MacroableTrait","Illuminate\\Support\\Traits","Illuminate\/Support\/Traits\/MacroableTrait.html","","",1],["ViewErrorBag","Illuminate\\Support","Illuminate\/Support\/ViewErrorBag.html","","",1],["FileLoader","Illuminate\\Translation","Illuminate\/Translation\/FileLoader.html","","",1],["LoaderInterface","Illuminate\\Translation","Illuminate\/Translation\/LoaderInterface.html","","",1],["TranslationServiceProvider","Illuminate\\Translation","Illuminate\/Translation\/TranslationServiceProvider.html"," < ServiceProvider","",1],["Translator","Illuminate\\Translation","Illuminate\/Translation\/Translator.html"," < NamespacedItemResolver","",1],["DatabasePresenceVerifier","Illuminate\\Validation","Illuminate\/Validation\/DatabasePresenceVerifier.html","","",1],["Factory","Illuminate\\Validation","Illuminate\/Validation\/Factory.html","","",1],["PresenceVerifierInterface","Illuminate\\Validation","Illuminate\/Validation\/PresenceVerifierInterface.html","","",1],["ValidationServiceProvider","Illuminate\\Validation","Illuminate\/Validation\/ValidationServiceProvider.html"," < ServiceProvider","",1],["Validator","Illuminate\\Validation","Illuminate\/Validation\/Validator.html","","",1],["BladeCompiler","Illuminate\\View\\Compilers","Illuminate\/View\/Compilers\/BladeCompiler.html"," < Compiler","",1],["Compiler","Illuminate\\View\\Compilers","Illuminate\/View\/Compilers\/Compiler.html","","",1],["CompilerInterface","Illuminate\\View\\Compilers","Illuminate\/View\/Compilers\/CompilerInterface.html","","",1],["CompilerEngine","Illuminate\\View\\Engines","Illuminate\/View\/Engines\/CompilerEngine.html"," < PhpEngine","",1],["Engine","Illuminate\\View\\Engines","Illuminate\/View\/Engines\/Engine.html","","",1],["EngineInterface","Illuminate\\View\\Engines","Illuminate\/View\/Engines\/EngineInterface.html","","",1],["EngineResolver","Illuminate\\View\\Engines","Illuminate\/View\/Engines\/EngineResolver.html","","",1],["PhpEngine","Illuminate\\View\\Engines","Illuminate\/View\/Engines\/PhpEngine.html","","",1],["Factory","Illuminate\\View","Illuminate\/View\/Factory.html","","",1],["FileViewFinder","Illuminate\\View","Illuminate\/View\/FileViewFinder.html","","",1],["View","Illuminate\\View","Illuminate\/View\/View.html","","",1],["ViewFinderInterface","Illuminate\\View","Illuminate\/View\/ViewFinderInterface.html","","",1],["ViewServiceProvider","Illuminate\\View","Illuminate\/View\/ViewServiceProvider.html"," < ServiceProvider","",1],["WorkbenchMakeCommand","Illuminate\\Workbench\\Console","Illuminate\/Workbench\/Console\/WorkbenchMakeCommand.html"," < Command","",1],["Package","Illuminate\\Workbench","Illuminate\/Workbench\/Package.html","","",1],["PackageCreator","Illuminate\\Workbench","Illuminate\/Workbench\/PackageCreator.html","","",1],["Starter","Illuminate\\Workbench","Illuminate\/Workbench\/Starter.html","","",1],["WorkbenchServiceProvider","Illuminate\\Workbench","Illuminate\/Workbench\/WorkbenchServiceProvider.html"," < ServiceProvider","",1],["IlluminateQueueClosure::__construct","IlluminateQueueClosure","IlluminateQueueClosure.html#method___construct","(<a href=\"Illuminate\/Encryption\/Encrypter.html\"><abbr title=\"Illuminate\\Encryption\\Encrypter\">Encrypter<\/abbr><\/a> $crypt)","Create a new queued Closure job.",2],["IlluminateQueueClosure::fire","IlluminateQueueClosure","IlluminateQueueClosure.html#method_fire","(<a href=\"Illuminate\/Queue\/Jobs\/Job.html\"><abbr title=\"Illuminate\\Queue\\Jobs\\Job\">Job<\/abbr><\/a> $job, array $data)","Fire the Closure based queue job.",2],["AuthManager::createDatabaseDriver","Illuminate\\Auth\\AuthManager","Illuminate\/Auth\/AuthManager.html#method_createDatabaseDriver","()","Create an instance of the database driver.",2],["AuthManager::createEloquentDriver","Illuminate\\Auth\\AuthManager","Illuminate\/Auth\/AuthManager.html#method_createEloquentDriver","()","Create an instance of the Eloquent driver.",2],["AuthManager::getDefaultDriver","Illuminate\\Auth\\AuthManager","Illuminate\/Auth\/AuthManager.html#method_getDefaultDriver","()","Get the default authentication driver name.",2],["AuthManager::setDefaultDriver","Illuminate\\Auth\\AuthManager","Illuminate\/Auth\/AuthManager.html#method_setDefaultDriver","(string $name)","Set the default authentication driver name.",2],["AuthServiceProvider::register","Illuminate\\Auth\\AuthServiceProvider","Illuminate\/Auth\/AuthServiceProvider.html#method_register","()","Register the service provider.",2],["AuthServiceProvider::provides","Illuminate\\Auth\\AuthServiceProvider","Illuminate\/Auth\/AuthServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ClearRemindersCommand::fire","Illuminate\\Auth\\Console\\ClearRemindersCommand","Illuminate\/Auth\/Console\/ClearRemindersCommand.html#method_fire","()","Execute the console command.",2],["RemindersControllerCommand::__construct","Illuminate\\Auth\\Console\\RemindersControllerCommand","Illuminate\/Auth\/Console\/RemindersControllerCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new reminder table command instance.",2],["RemindersControllerCommand::fire","Illuminate\\Auth\\Console\\RemindersControllerCommand","Illuminate\/Auth\/Console\/RemindersControllerCommand.html#method_fire","()","Execute the console command.",2],["RemindersTableCommand::__construct","Illuminate\\Auth\\Console\\RemindersTableCommand","Illuminate\/Auth\/Console\/RemindersTableCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new console command instance.",2],["RemindersTableCommand::fire","Illuminate\\Auth\\Console\\RemindersTableCommand","Illuminate\/Auth\/Console\/RemindersTableCommand.html#method_fire","()","Execute the console command.",2],["DatabaseUserProvider::__construct","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method___construct","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $conn, <a href=\"Illuminate\/Hashing\/HasherInterface.html\"><abbr title=\"Illuminate\\Hashing\\HasherInterface\">HasherInterface<\/abbr><\/a> $hasher, string $table)","Create a new database user provider.",2],["DatabaseUserProvider::retrieveById","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method_retrieveById","(mixed $identifier)","Retrieve a user by their unique identifier.",2],["DatabaseUserProvider::retrieveByToken","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method_retrieveByToken","(mixed $identifier, string $token)","Retrieve a user by by their unique identifier and \"remember",2],["DatabaseUserProvider::updateRememberToken","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method_updateRememberToken","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, string $token)","Update the \"remember me\" token for the given user in",2],["DatabaseUserProvider::retrieveByCredentials","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method_retrieveByCredentials","(array $credentials)","Retrieve a user by the given credentials.",2],["DatabaseUserProvider::validateCredentials","Illuminate\\Auth\\DatabaseUserProvider","Illuminate\/Auth\/DatabaseUserProvider.html#method_validateCredentials","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, array $credentials)","Validate a user against the given credentials.",2],["EloquentUserProvider::__construct","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method___construct","(<a href=\"Illuminate\/Hashing\/HasherInterface.html\"><abbr title=\"Illuminate\\Hashing\\HasherInterface\">HasherInterface<\/abbr><\/a> $hasher, string $model)","Create a new database user provider.",2],["EloquentUserProvider::retrieveById","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_retrieveById","(mixed $identifier)","Retrieve a user by their unique identifier.",2],["EloquentUserProvider::retrieveByToken","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_retrieveByToken","(mixed $identifier, string $token)","Retrieve a user by their unique identifier and \"remember",2],["EloquentUserProvider::updateRememberToken","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_updateRememberToken","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, string $token)","Update the \"remember me\" token for the given user in",2],["EloquentUserProvider::retrieveByCredentials","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_retrieveByCredentials","(array $credentials)","Retrieve a user by the given credentials.",2],["EloquentUserProvider::validateCredentials","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_validateCredentials","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, array $credentials)","Validate a user against the given credentials.",2],["EloquentUserProvider::createModel","Illuminate\\Auth\\EloquentUserProvider","Illuminate\/Auth\/EloquentUserProvider.html#method_createModel","()","Create a new instance of the model.",2],["GenericUser::__construct","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method___construct","(array $attributes)","Create a new generic User object.",2],["GenericUser::getAuthIdentifier","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method_getAuthIdentifier","()","Get the unique identifier for the user.",2],["GenericUser::getAuthPassword","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method_getAuthPassword","()","Get the password for the user.",2],["GenericUser::getRememberToken","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method_getRememberToken","()","Get the token value for the \"remember me\" session.",2],["GenericUser::setRememberToken","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method_setRememberToken","(string $value)","Set the token value for the \"remember me\" session.",2],["GenericUser::getRememberTokenName","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method_getRememberTokenName","()","Get the column name for the \"remember me\" token.",2],["GenericUser::__get","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method___get","(string $key)","Dynamically access the user's attributes.",2],["GenericUser::__set","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method___set","(string $key, mixed $value)","Dynamically set an attribute on the user.",2],["GenericUser::__isset","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method___isset","(string $key)","Dynamically check if a value is set on the user.",2],["GenericUser::__unset","Illuminate\\Auth\\GenericUser","Illuminate\/Auth\/GenericUser.html#method___unset","(string $key)","Dynamically unset a value on the user.",2],["Guard::__construct","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method___construct","(<a href=\"Illuminate\/Auth\/UserProviderInterface.html\"><abbr title=\"Illuminate\\Auth\\UserProviderInterface\">UserProviderInterface<\/abbr><\/a> $provider, <a href=\"Illuminate\/Session\/Store.html\"><abbr title=\"Illuminate\\Session\\Store\">Store<\/abbr><\/a> $session, <abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request = null)","Create a new authentication guard.",2],["Guard::check","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_check","()","Determine if the current user is authenticated.",2],["Guard::guest","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_guest","()","Determine if the current user is a guest.",2],["Guard::user","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_user","()","Get the currently authenticated user.",2],["Guard::id","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_id","()","Get the ID for the currently authenticated user.",2],["Guard::once","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_once","(array $credentials = array())","Log a user into the application without sessions or",2],["Guard::validate","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_validate","(array $credentials = array())","Validate a user's credentials.",2],["Guard::basic","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_basic","(string $field = &#039;email&#039;, <abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request = null)","Attempt to authenticate using HTTP Basic Auth.",2],["Guard::onceBasic","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_onceBasic","(string $field = &#039;email&#039;, <abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request = null)","Perform a stateless HTTP Basic login attempt.",2],["Guard::attempt","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_attempt","(array $credentials = array(), bool $remember = false, bool $login = true)","Attempt to authenticate a user using the given credentials.",2],["Guard::attempting","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_attempting","(mixed $callback)","Register an authentication attempt event listener.",2],["Guard::login","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_login","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, bool $remember = false)","Log a user into the application.",2],["Guard::loginUsingId","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_loginUsingId","(mixed $id, bool $remember = false)","Log the given user ID into the application.",2],["Guard::onceUsingId","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_onceUsingId","(mixed $id)","Log the given user ID into the application without",2],["Guard::logout","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_logout","()","Log the user out of the application.",2],["Guard::getCookieJar","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getCookieJar","()","Get the cookie creator instance used by the guard.",2],["Guard::setCookieJar","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_setCookieJar","(<a href=\"Illuminate\/Cookie\/CookieJar.html\"><abbr title=\"Illuminate\\Cookie\\CookieJar\">CookieJar<\/abbr><\/a> $cookie)","Set the cookie creator instance used by the guard.",2],["Guard::getDispatcher","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getDispatcher","()","Get the event dispatcher instance.",2],["Guard::setDispatcher","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_setDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events)","Set the event dispatcher instance.",2],["Guard::getSession","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getSession","()","Get the session store used by the guard.",2],["Guard::getProvider","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getProvider","()","Get the user provider used by the guard.",2],["Guard::setProvider","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_setProvider","(<a href=\"Illuminate\/Auth\/UserProviderInterface.html\"><abbr title=\"Illuminate\\Auth\\UserProviderInterface\">UserProviderInterface<\/abbr><\/a> $provider)","Set the user provider used by the guard.",2],["Guard::getUser","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getUser","()","Return the currently cached user of the application.",2],["Guard::setUser","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_setUser","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user)","Set the current user of the application.",2],["Guard::getRequest","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getRequest","()","Get the current request instance.",2],["Guard::setRequest","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_setRequest","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Set the current request instance.",2],["Guard::getLastAttempted","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getLastAttempted","()","Get the last user we attempted to authenticate.",2],["Guard::getName","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getName","()","Get a unique identifier for the auth session value.",2],["Guard::getRecallerName","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_getRecallerName","()","Get the name of the cookie used to store the \"recaller\".",2],["Guard::viaRemember","Illuminate\\Auth\\Guard","Illuminate\/Auth\/Guard.html#method_viaRemember","()","Determine if the user was authenticated via \"remember",2],["DatabaseReminderRepository::__construct","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method___construct","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection, string $table, string $hashKey, int $expires = 60)","Create a new reminder repository instance.",2],["DatabaseReminderRepository::create","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_create","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user)","Create a new reminder record and token.",2],["DatabaseReminderRepository::exists","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_exists","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user, string $token)","Determine if a reminder record exists and is valid.",2],["DatabaseReminderRepository::delete","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_delete","(string $token)","Delete a reminder record by token.",2],["DatabaseReminderRepository::deleteExpired","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_deleteExpired","()","Delete expired reminders.",2],["DatabaseReminderRepository::createNewToken","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_createNewToken","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user)","Create a new token for the user.",2],["DatabaseReminderRepository::getConnection","Illuminate\\Auth\\Reminders\\DatabaseReminderRepository","Illuminate\/Auth\/Reminders\/DatabaseReminderRepository.html#method_getConnection","()","Get the database connection instance.",2],["PasswordBroker::__construct","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method___construct","(<a href=\"Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\ReminderRepositoryInterface\">ReminderRepositoryInterface<\/abbr><\/a> $reminders, <a href=\"Illuminate\/Auth\/UserProviderInterface.html\"><abbr title=\"Illuminate\\Auth\\UserProviderInterface\">UserProviderInterface<\/abbr><\/a> $users, <a href=\"Illuminate\/Mail\/Mailer.html\"><abbr title=\"Illuminate\\Mail\\Mailer\">Mailer<\/abbr><\/a> $mailer, string $reminderView)","Create a new password broker instance.",2],["PasswordBroker::remind","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method_remind","(array $credentials, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Send a password reminder to a user.",2],["PasswordBroker::sendReminder","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method_sendReminder","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user, string $token, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Send the password reminder e-mail.",2],["PasswordBroker::reset","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method_reset","(array $credentials, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Reset the password for the given token.",2],["PasswordBroker::validator","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method_validator","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Set a custom password validator.",2],["PasswordBroker::getUser","Illuminate\\Auth\\Reminders\\PasswordBroker","Illuminate\/Auth\/Reminders\/PasswordBroker.html#method_getUser","(array $credentials)","Get the user for the given credentials.",2],["RemindableInterface::getReminderEmail","Illuminate\\Auth\\Reminders\\RemindableInterface","Illuminate\/Auth\/Reminders\/RemindableInterface.html#method_getReminderEmail","()","Get the e-mail address where password reminders are",2],["RemindableTrait::getReminderEmail","Illuminate\\Auth\\Reminders\\RemindableTrait","Illuminate\/Auth\/Reminders\/RemindableTrait.html#method_getReminderEmail","()","Get the e-mail address where password reminders are",2],["ReminderRepositoryInterface::create","Illuminate\\Auth\\Reminders\\ReminderRepositoryInterface","Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html#method_create","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user)","Create a new reminder record and token.",2],["ReminderRepositoryInterface::exists","Illuminate\\Auth\\Reminders\\ReminderRepositoryInterface","Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html#method_exists","(<a href=\"Illuminate\/Auth\/Reminders\/RemindableInterface.html\"><abbr title=\"Illuminate\\Auth\\Reminders\\RemindableInterface\">RemindableInterface<\/abbr><\/a> $user, string $token)","Determine if a reminder record exists and is valid.",2],["ReminderRepositoryInterface::delete","Illuminate\\Auth\\Reminders\\ReminderRepositoryInterface","Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html#method_delete","(string $token)","Delete a reminder record by token.",2],["ReminderRepositoryInterface::deleteExpired","Illuminate\\Auth\\Reminders\\ReminderRepositoryInterface","Illuminate\/Auth\/Reminders\/ReminderRepositoryInterface.html#method_deleteExpired","()","Delete expired reminders.",2],["ReminderServiceProvider::register","Illuminate\\Auth\\Reminders\\ReminderServiceProvider","Illuminate\/Auth\/Reminders\/ReminderServiceProvider.html#method_register","()","Register the service provider.",2],["ReminderServiceProvider::provides","Illuminate\\Auth\\Reminders\\ReminderServiceProvider","Illuminate\/Auth\/Reminders\/ReminderServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["UserInterface::getAuthIdentifier","Illuminate\\Auth\\UserInterface","Illuminate\/Auth\/UserInterface.html#method_getAuthIdentifier","()","Get the unique identifier for the user.",2],["UserInterface::getAuthPassword","Illuminate\\Auth\\UserInterface","Illuminate\/Auth\/UserInterface.html#method_getAuthPassword","()","Get the password for the user.",2],["UserInterface::getRememberToken","Illuminate\\Auth\\UserInterface","Illuminate\/Auth\/UserInterface.html#method_getRememberToken","()","Get the token value for the \"remember me\" session.",2],["UserInterface::setRememberToken","Illuminate\\Auth\\UserInterface","Illuminate\/Auth\/UserInterface.html#method_setRememberToken","(string $value)","Set the token value for the \"remember me\" session.",2],["UserInterface::getRememberTokenName","Illuminate\\Auth\\UserInterface","Illuminate\/Auth\/UserInterface.html#method_getRememberTokenName","()","Get the column name for the \"remember me\" token.",2],["UserProviderInterface::retrieveById","Illuminate\\Auth\\UserProviderInterface","Illuminate\/Auth\/UserProviderInterface.html#method_retrieveById","(mixed $identifier)","Retrieve a user by their unique identifier.",2],["UserProviderInterface::retrieveByToken","Illuminate\\Auth\\UserProviderInterface","Illuminate\/Auth\/UserProviderInterface.html#method_retrieveByToken","(mixed $identifier, string $token)","Retrieve a user by by their unique identifier and \"remember",2],["UserProviderInterface::updateRememberToken","Illuminate\\Auth\\UserProviderInterface","Illuminate\/Auth\/UserProviderInterface.html#method_updateRememberToken","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, string $token)","Update the \"remember me\" token for the given user in",2],["UserProviderInterface::retrieveByCredentials","Illuminate\\Auth\\UserProviderInterface","Illuminate\/Auth\/UserProviderInterface.html#method_retrieveByCredentials","(array $credentials)","Retrieve a user by the given credentials.",2],["UserProviderInterface::validateCredentials","Illuminate\\Auth\\UserProviderInterface","Illuminate\/Auth\/UserProviderInterface.html#method_validateCredentials","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, array $credentials)","Validate a user against the given credentials.",2],["UserTrait::getAuthIdentifier","Illuminate\\Auth\\UserTrait","Illuminate\/Auth\/UserTrait.html#method_getAuthIdentifier","()","Get the unique identifier for the user.",2],["UserTrait::getAuthPassword","Illuminate\\Auth\\UserTrait","Illuminate\/Auth\/UserTrait.html#method_getAuthPassword","()","Get the password for the user.",2],["UserTrait::getRememberToken","Illuminate\\Auth\\UserTrait","Illuminate\/Auth\/UserTrait.html#method_getRememberToken","()","Get the token value for the \"remember me\" session.",2],["UserTrait::setRememberToken","Illuminate\\Auth\\UserTrait","Illuminate\/Auth\/UserTrait.html#method_setRememberToken","(string $value)","Set the token value for the \"remember me\" session.",2],["UserTrait::getRememberTokenName","Illuminate\\Auth\\UserTrait","Illuminate\/Auth\/UserTrait.html#method_getRememberTokenName","()","Get the column name for the \"remember me\" token.",2],["ApcStore::__construct","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method___construct","(<a href=\"Illuminate\/Cache\/ApcWrapper.html\"><abbr title=\"Illuminate\\Cache\\ApcWrapper\">ApcWrapper<\/abbr><\/a> $apc, string $prefix = &#039;&#039;)","Create a new APC store.",2],["ApcStore::get","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["ApcStore::put","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["ApcStore::increment","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["ApcStore::decrement","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_decrement","(string $key, mixed $value = 1)","Decrement the value of an item in the cache.",2],["ApcStore::forever","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["ApcStore::forget","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["ApcStore::flush","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_flush","()","Remove all items from the cache.",2],["ApcStore::getPrefix","Illuminate\\Cache\\ApcStore","Illuminate\/Cache\/ApcStore.html#method_getPrefix","()","Get the cache key prefix.",2],["ApcWrapper::__construct","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method___construct","()","Create a new APC wrapper instance.",2],["ApcWrapper::get","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_get","(string $key)","Get an item from the cache.",2],["ApcWrapper::put","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_put","(string $key, mixed $value, int $seconds)","Store an item in the cache.",2],["ApcWrapper::increment","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_increment","(string $key, mixed $value)","Increment the value of an item in the cache.",2],["ApcWrapper::decrement","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_decrement","(string $key, mixed $value)","Decrement the value of an item in the cache.",2],["ApcWrapper::delete","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_delete","(string $key)","Remove an item from the cache.",2],["ApcWrapper::flush","Illuminate\\Cache\\ApcWrapper","Illuminate\/Cache\/ApcWrapper.html#method_flush","()","Remove all items from the cache.",2],["ArrayStore::get","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["ArrayStore::put","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["ArrayStore::increment","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["ArrayStore::decrement","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["ArrayStore::forever","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["ArrayStore::forget","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["ArrayStore::flush","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_flush","()","Remove all items from the cache.",2],["ArrayStore::getPrefix","Illuminate\\Cache\\ArrayStore","Illuminate\/Cache\/ArrayStore.html#method_getPrefix","()","Get the cache key prefix.",2],["CacheManager::getPrefix","Illuminate\\Cache\\CacheManager","Illuminate\/Cache\/CacheManager.html#method_getPrefix","()","Get the cache \"prefix\" value.",2],["CacheManager::setPrefix","Illuminate\\Cache\\CacheManager","Illuminate\/Cache\/CacheManager.html#method_setPrefix","(string $name)","Set the cache \"prefix\" value.",2],["CacheManager::getDefaultDriver","Illuminate\\Cache\\CacheManager","Illuminate\/Cache\/CacheManager.html#method_getDefaultDriver","()","Get the default cache driver name.",2],["CacheManager::setDefaultDriver","Illuminate\\Cache\\CacheManager","Illuminate\/Cache\/CacheManager.html#method_setDefaultDriver","(string $name)","Set the default cache driver name.",2],["CacheServiceProvider::register","Illuminate\\Cache\\CacheServiceProvider","Illuminate\/Cache\/CacheServiceProvider.html#method_register","()","Register the service provider.",2],["CacheServiceProvider::registerCommands","Illuminate\\Cache\\CacheServiceProvider","Illuminate\/Cache\/CacheServiceProvider.html#method_registerCommands","()","Register the cache related console commands.",2],["CacheServiceProvider::provides","Illuminate\\Cache\\CacheServiceProvider","Illuminate\/Cache\/CacheServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["CacheTableCommand::__construct","Illuminate\\Cache\\Console\\CacheTableCommand","Illuminate\/Cache\/Console\/CacheTableCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new session table command instance.",2],["CacheTableCommand::fire","Illuminate\\Cache\\Console\\CacheTableCommand","Illuminate\/Cache\/Console\/CacheTableCommand.html#method_fire","()","Execute the console command.",2],["ClearCommand::__construct","Illuminate\\Cache\\Console\\ClearCommand","Illuminate\/Cache\/Console\/ClearCommand.html#method___construct","(<a href=\"Illuminate\/Cache\/CacheManager.html\"><abbr title=\"Illuminate\\Cache\\CacheManager\">CacheManager<\/abbr><\/a> $cache, <a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new cache clear command instance.",2],["ClearCommand::fire","Illuminate\\Cache\\Console\\ClearCommand","Illuminate\/Cache\/Console\/ClearCommand.html#method_fire","()","Execute the console command.",2],["DatabaseStore::__construct","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method___construct","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection, <a href=\"Illuminate\/Encryption\/Encrypter.html\"><abbr title=\"Illuminate\\Encryption\\Encrypter\">Encrypter<\/abbr><\/a> $encrypter, string $table, string $prefix = &#039;&#039;)","Create a new database store.",2],["DatabaseStore::get","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["DatabaseStore::put","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["DatabaseStore::increment","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["DatabaseStore::decrement","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["DatabaseStore::forever","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["DatabaseStore::forget","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["DatabaseStore::flush","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_flush","()","Remove all items from the cache.",2],["DatabaseStore::getConnection","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_getConnection","()","Get the underlying database connection.",2],["DatabaseStore::getEncrypter","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_getEncrypter","()","Get the encrypter instance.",2],["DatabaseStore::getPrefix","Illuminate\\Cache\\DatabaseStore","Illuminate\/Cache\/DatabaseStore.html#method_getPrefix","()","Get the cache key prefix.",2],["FileStore::__construct","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $directory)","Create a new file cache store instance.",2],["FileStore::get","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["FileStore::put","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["FileStore::increment","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["FileStore::decrement","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_decrement","(string $key, mixed $value = 1)","Decrement the value of an item in the cache.",2],["FileStore::forever","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["FileStore::forget","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["FileStore::flush","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_flush","()","Remove all items from the cache.",2],["FileStore::getFilesystem","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_getFilesystem","()","Get the Filesystem instance.",2],["FileStore::getDirectory","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_getDirectory","()","Get the working directory of the cache.",2],["FileStore::getPrefix","Illuminate\\Cache\\FileStore","Illuminate\/Cache\/FileStore.html#method_getPrefix","()","Get the cache key prefix.",2],["MemcachedConnector::connect","Illuminate\\Cache\\MemcachedConnector","Illuminate\/Cache\/MemcachedConnector.html#method_connect","(array $servers)","Create a new Memcached connection.",2],["MemcachedStore::__construct","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method___construct","(<a href=\"http:\/\/php.net\/Memcached\"><abbr title=\"Memcached\">Memcached<\/abbr><\/a> $memcached, string $prefix = &#039;&#039;)","Create a new Memcached store.",2],["MemcachedStore::get","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["MemcachedStore::put","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["MemcachedStore::increment","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["MemcachedStore::decrement","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_decrement","(string $key, mixed $value = 1)","Decrement the value of an item in the cache.",2],["MemcachedStore::forever","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["MemcachedStore::forget","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["MemcachedStore::flush","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_flush","()","Remove all items from the cache.",2],["MemcachedStore::getMemcached","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_getMemcached","()","Get the underlying Memcached connection.",2],["MemcachedStore::getPrefix","Illuminate\\Cache\\MemcachedStore","Illuminate\/Cache\/MemcachedStore.html#method_getPrefix","()","Get the cache key prefix.",2],["NullStore::get","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["NullStore::put","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["NullStore::increment","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["NullStore::decrement","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["NullStore::forever","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["NullStore::forget","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["NullStore::flush","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_flush","()","Remove all items from the cache.",2],["NullStore::getPrefix","Illuminate\\Cache\\NullStore","Illuminate\/Cache\/NullStore.html#method_getPrefix","()","Get the cache key prefix.",2],["RedisStore::__construct","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method___construct","(<a href=\"Illuminate\/Redis\/Database.html\"><abbr title=\"Illuminate\\Redis\\Database\">Database<\/abbr><\/a> $redis, string $prefix = &#039;&#039;, string $connection = &#039;default&#039;)","Create a new Redis store.",2],["RedisStore::get","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["RedisStore::put","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["RedisStore::increment","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["RedisStore::decrement","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["RedisStore::forever","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["RedisStore::forget","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["RedisStore::flush","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_flush","()","Remove all items from the cache.",2],["RedisStore::tags","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_tags","(array|mixed $names)","Begin executing a new tags operation.",2],["RedisStore::connection","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_connection","()","Get the Redis connection instance.",2],["RedisStore::setConnection","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_setConnection","(string $connection)","Set the connection name to be used.",2],["RedisStore::getRedis","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_getRedis","()","Get the Redis database instance.",2],["RedisStore::getPrefix","Illuminate\\Cache\\RedisStore","Illuminate\/Cache\/RedisStore.html#method_getPrefix","()","Get the cache key prefix.",2],["RedisTaggedCache::forever","Illuminate\\Cache\\RedisTaggedCache","Illuminate\/Cache\/RedisTaggedCache.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["RedisTaggedCache::flush","Illuminate\\Cache\\RedisTaggedCache","Illuminate\/Cache\/RedisTaggedCache.html#method_flush","()","Remove all items from the cache.",2],["Repository::__construct","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method___construct","(<a href=\"Illuminate\/Cache\/StoreInterface.html\"><abbr title=\"Illuminate\\Cache\\StoreInterface\">StoreInterface<\/abbr><\/a> $store)","Create a new cache repository instance.",2],["Repository::has","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_has","(string $key)","Determine if an item exists in the cache.",2],["Repository::get","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_get","(string $key, mixed $default = null)","Retrieve an item from the cache by key.",2],["Repository::pull","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_pull","(string $key, mixed $default = null)","Retrieve an item from the cache and delete it.",2],["Repository::put","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_put","(string $key, mixed $value, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes)","Store an item in the cache.",2],["Repository::add","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_add","(string $key, mixed $value, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes)","Store an item in the cache if the key does not exist.",2],["Repository::remember","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_remember","(string $key, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value.",2],["Repository::sear","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_sear","(string $key, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value",2],["Repository::rememberForever","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_rememberForever","(string $key, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value",2],["Repository::getDefaultCacheTime","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_getDefaultCacheTime","()","Get the default cache time.",2],["Repository::setDefaultCacheTime","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_setDefaultCacheTime","(int $minutes)","Set the default cache time in minutes.",2],["Repository::getStore","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_getStore","()","Get the cache store implementation.",2],["Repository::offsetExists","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_offsetExists","(string $key)","Determine if a cached value exists.",2],["Repository::offsetGet","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_offsetGet","(string $key)","Retrieve an item from the cache by key.",2],["Repository::offsetSet","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_offsetSet","(string $key, mixed $value)","Store an item in the cache for the default time.",2],["Repository::offsetUnset","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method_offsetUnset","(string $key)","Remove an item from the cache.",2],["Repository::__call","Illuminate\\Cache\\Repository","Illuminate\/Cache\/Repository.html#method___call","(string $method, array $parameters)","Handle dynamic calls into macros or pass missing methods",2],["StoreInterface::get","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["StoreInterface::put","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["StoreInterface::increment","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["StoreInterface::decrement","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_decrement","(string $key, mixed $value = 1)","Decrement the value of an item in the cache.",2],["StoreInterface::forever","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["StoreInterface::forget","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_forget","(string $key)","Remove an item from the cache.",2],["StoreInterface::flush","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_flush","()","Remove all items from the cache.",2],["StoreInterface::getPrefix","Illuminate\\Cache\\StoreInterface","Illuminate\/Cache\/StoreInterface.html#method_getPrefix","()","Get the cache key prefix.",2],["TagSet::__construct","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method___construct","(<a href=\"Illuminate\/Cache\/StoreInterface.html\"><abbr title=\"Illuminate\\Cache\\StoreInterface\">StoreInterface<\/abbr><\/a> $store, array $names = array())","Create a new TagSet instance.",2],["TagSet::reset","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method_reset","()","Reset all tags in the set.",2],["TagSet::tagId","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method_tagId","(string $name)","Get the unique tag identifier for a given tag.",2],["TagSet::getNamespace","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method_getNamespace","()","Get a unique namespace that changes when any of the",2],["TagSet::resetTag","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method_resetTag","(string $name)","Reset the tag and return the new tag identifier",2],["TagSet::tagKey","Illuminate\\Cache\\TagSet","Illuminate\/Cache\/TagSet.html#method_tagKey","(string $name)","Get the tag identifier key for a given tag.",2],["TaggableStore::section","Illuminate\\Cache\\TaggableStore","Illuminate\/Cache\/TaggableStore.html#method_section","(string $name)","Begin executing a new tags operation.",2],["TaggableStore::tags","Illuminate\\Cache\\TaggableStore","Illuminate\/Cache\/TaggableStore.html#method_tags","(array|mixed $names)","Begin executing a new tags operation.",2],["TaggedCache::__construct","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method___construct","(<a href=\"Illuminate\/Cache\/StoreInterface.html\"><abbr title=\"Illuminate\\Cache\\StoreInterface\">StoreInterface<\/abbr><\/a> $store, <a href=\"Illuminate\/Cache\/TagSet.html\"><abbr title=\"Illuminate\\Cache\\TagSet\">TagSet<\/abbr><\/a> $tags)","Create a new tagged cache instance.",2],["TaggedCache::has","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_has","(string $key)","Determine if an item exists in the cache.",2],["TaggedCache::get","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_get","(string $key, mixed $default = null)","Retrieve an item from the cache by key.",2],["TaggedCache::put","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_put","(string $key, mixed $value, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes)","Store an item in the cache for a given number of minutes.",2],["TaggedCache::add","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_add","(string $key, mixed $value, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes)","Store an item in the cache if the key does not exist.",2],["TaggedCache::increment","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["TaggedCache::decrement","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["TaggedCache::forever","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["TaggedCache::forget","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_forget","(string $key)","Remove an item from the cache.",2],["TaggedCache::flush","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_flush","()","Remove all items from the cache.",2],["TaggedCache::remember","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_remember","(string $key, <a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value.",2],["TaggedCache::sear","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_sear","(string $key, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value",2],["TaggedCache::rememberForever","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_rememberForever","(string $key, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get an item from the cache, or store the default value",2],["TaggedCache::taggedItemKey","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_taggedItemKey","(string $key)","Get a fully qualified key for a tagged item.",2],["TaggedCache::getPrefix","Illuminate\\Cache\\TaggedCache","Illuminate\/Cache\/TaggedCache.html#method_getPrefix","()","Get the cache key prefix.",2],["WinCacheStore::__construct","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method___construct","(string $prefix = &#039;&#039;)","Create a new WinCache store.",2],["WinCacheStore::get","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["WinCacheStore::put","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["WinCacheStore::increment","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["WinCacheStore::decrement","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["WinCacheStore::forever","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["WinCacheStore::forget","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["WinCacheStore::flush","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_flush","()","Remove all items from the cache.",2],["WinCacheStore::getPrefix","Illuminate\\Cache\\WinCacheStore","Illuminate\/Cache\/WinCacheStore.html#method_getPrefix","()","Get the cache key prefix.",2],["XCacheStore::__construct","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method___construct","(string $prefix = &#039;&#039;)","Create a new WinCache store.",2],["XCacheStore::get","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_get","(string $key)","Retrieve an item from the cache by key.",2],["XCacheStore::put","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_put","(string $key, mixed $value, int $minutes)","Store an item in the cache for a given number of minutes.",2],["XCacheStore::increment","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_increment","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["XCacheStore::decrement","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_decrement","(string $key, mixed $value = 1)","Increment the value of an item in the cache.",2],["XCacheStore::forever","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_forever","(string $key, mixed $value)","Store an item in the cache indefinitely.",2],["XCacheStore::forget","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_forget","(string $key)","Remove an item from the cache.",2],["XCacheStore::flush","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_flush","()","Remove all items from the cache.",2],["XCacheStore::getPrefix","Illuminate\\Cache\\XCacheStore","Illuminate\/Cache\/XCacheStore.html#method_getPrefix","()","Get the cache key prefix.",2],["EnvironmentVariables::__construct","Illuminate\\Config\\EnvironmentVariables","Illuminate\/Config\/EnvironmentVariables.html#method___construct","(<a href=\"Illuminate\/Config\/EnvironmentVariablesLoaderInterface.html\"><abbr title=\"Illuminate\\Config\\EnvironmentVariablesLoaderInterface\">EnvironmentVariablesLoaderInterface<\/abbr><\/a> $loader)","The server environment instance.",2],["EnvironmentVariables::load","Illuminate\\Config\\EnvironmentVariables","Illuminate\/Config\/EnvironmentVariables.html#method_load","(string $environment = null)","Load the server variables for a given environment.",2],["EnvironmentVariablesLoaderInterface::load","Illuminate\\Config\\EnvironmentVariablesLoaderInterface","Illuminate\/Config\/EnvironmentVariablesLoaderInterface.html#method_load","(string $environment = null)","Load the environment variables for the given environment.",2],["FileEnvironmentVariablesLoader::__construct","Illuminate\\Config\\FileEnvironmentVariablesLoader","Illuminate\/Config\/FileEnvironmentVariablesLoader.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $path = null)","Create a new file environment loader instance.",2],["FileEnvironmentVariablesLoader::load","Illuminate\\Config\\FileEnvironmentVariablesLoader","Illuminate\/Config\/FileEnvironmentVariablesLoader.html#method_load","(string $environment = null)","Load the environment variables for the given environment.",2],["FileLoader::__construct","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $defaultPath)","Create a new file configuration loader.",2],["FileLoader::load","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_load","(string $environment, string $group, string $namespace = null)","Load the given configuration group.",2],["FileLoader::exists","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_exists","(string $group, string $namespace = null)","Determine if the given group exists.",2],["FileLoader::cascadePackage","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_cascadePackage","(string $env, string $package, string $group, array $items)","Apply any cascades to an array of package options.",2],["FileLoader::addNamespace","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["FileLoader::getNamespaces","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_getNamespaces","()","Returns all registered namespaces with the configloader.",2],["FileLoader::getFilesystem","Illuminate\\Config\\FileLoader","Illuminate\/Config\/FileLoader.html#method_getFilesystem","()","Get the Filesystem instance.",2],["LoaderInterface::load","Illuminate\\Config\\LoaderInterface","Illuminate\/Config\/LoaderInterface.html#method_load","(string $environment, string $group, string $namespace = null)","Load the given configuration group.",2],["LoaderInterface::exists","Illuminate\\Config\\LoaderInterface","Illuminate\/Config\/LoaderInterface.html#method_exists","(string $group, string $namespace = null)","Determine if the given configuration group exists.",2],["LoaderInterface::addNamespace","Illuminate\\Config\\LoaderInterface","Illuminate\/Config\/LoaderInterface.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["LoaderInterface::getNamespaces","Illuminate\\Config\\LoaderInterface","Illuminate\/Config\/LoaderInterface.html#method_getNamespaces","()","Returns all registered namespaces with the configloader.",2],["LoaderInterface::cascadePackage","Illuminate\\Config\\LoaderInterface","Illuminate\/Config\/LoaderInterface.html#method_cascadePackage","(string $environment, string $package, string $group, array $items)","Apply any cascades to an array of package options.",2],["Repository::__construct","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method___construct","(<a href=\"Illuminate\/Config\/LoaderInterface.html\"><abbr title=\"Illuminate\\Config\\LoaderInterface\">LoaderInterface<\/abbr><\/a> $loader, string $environment)","Create a new configuration repository.",2],["Repository::has","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_has","(string $key)","Determine if the given configuration value exists.",2],["Repository::hasGroup","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_hasGroup","(string $key)","Determine if a configuration group exists.",2],["Repository::get","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_get","(string $key, mixed $default = null)","Get the specified configuration value.",2],["Repository::set","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_set","(string $key, mixed $value)","Set a given configuration value.",2],["Repository::package","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_package","(string $package, string $hint, string $namespace = null)","Register a package for cascading configuration.",2],["Repository::afterLoading","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_afterLoading","(string $namespace, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an after load callback for a given namespace.",2],["Repository::addNamespace","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["Repository::getNamespaces","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_getNamespaces","()","Returns all registered namespaces with the configloader.",2],["Repository::getLoader","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_getLoader","()","Get the loader implementation.",2],["Repository::setLoader","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_setLoader","(<a href=\"Illuminate\/Config\/LoaderInterface.html\"><abbr title=\"Illuminate\\Config\\LoaderInterface\">LoaderInterface<\/abbr><\/a> $loader)","Set the loader implementation.",2],["Repository::getEnvironment","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_getEnvironment","()","Get the current configuration environment.",2],["Repository::getAfterLoadCallbacks","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_getAfterLoadCallbacks","()","Get the after load callback array.",2],["Repository::getItems","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_getItems","()","Get all of the configuration items.",2],["Repository::offsetExists","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_offsetExists","(string $key)","Determine if the given configuration option exists.",2],["Repository::offsetGet","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_offsetGet","(string $key)","Get a configuration option.",2],["Repository::offsetSet","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_offsetSet","(string $key, mixed $value)","Set a configuration option.",2],["Repository::offsetUnset","Illuminate\\Config\\Repository","Illuminate\/Config\/Repository.html#method_offsetUnset","(string $key)","Unset a configuration option.",2],["Application::start","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_start","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create and boot a new Console application.",2],["Application::make","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_make","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new Console application.",2],["Application::boot","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_boot","()","Boot the Console application.",2],["Application::call","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_call","(string $command, array $parameters = array(), <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output = null)","Run an Artisan console command by name.",2],["Application::add","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_add","(<abbr title=\"Symfony\\Component\\Console\\Command\\Command\">Command<\/abbr> $command)","Add a command to the console.",2],["Application::resolve","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_resolve","(string $command)","Add a command, resolving through the application.",2],["Application::resolveCommands","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_resolveCommands","(array|mixed $commands)","Resolve an array of commands through the application.",2],["Application::renderException","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_renderException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $e, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","Render the given exception.",2],["Application::setExceptionHandler","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_setExceptionHandler","(<a href=\"Illuminate\/Exception\/Handler.html\"><abbr title=\"Illuminate\\Exception\\Handler\">Handler<\/abbr><\/a> $handler)","Set the exception handler instance.",2],["Application::setLaravel","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_setLaravel","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $laravel)","Set the Laravel application instance.",2],["Application::setAutoExit","Illuminate\\Console\\Application","Illuminate\/Console\/Application.html#method_setAutoExit","(bool $boolean)","Set whether the Console app should auto-exit when done.",2],["Command::__construct","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method___construct","()","Create a new console command instance.",2],["Command::run","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_run","(<abbr title=\"Symfony\\Component\\Console\\Input\\InputInterface\">InputInterface<\/abbr> $input, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","Run the console command.",2],["Command::call","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_call","(string $command, array $arguments = array())","Call another console command.",2],["Command::callSilent","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_callSilent","(string $command, array $arguments = array())","Call another console command silently.",2],["Command::argument","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_argument","(string $key = null)","Get the value of a command argument.",2],["Command::option","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_option","(string $key = null)","Get the value of a command option.",2],["Command::confirm","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_confirm","(string $question, bool $default = true)","Confirm a question with the user.",2],["Command::ask","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_ask","(string $question, string $default = null)","Prompt the user for input.",2],["Command::askWithCompletion","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_askWithCompletion","(string $question, array $choices, string $default = null)","Prompt the user for input with auto completion.",2],["Command::secret","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_secret","(string $question, bool $fallback = true)","Prompt the user for input but hide the answer from",2],["Command::choice","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_choice","(string $question, array $choices, string $default = null, mixed $attempts = null, bool $multiple = null)","Give the user a single choice from an array of answers.",2],["Command::table","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_table","(array $headers, array $rows, string $style = &#039;default&#039;)","Format input to textual table",2],["Command::info","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_info","(string $string)","Write a string as information output.",2],["Command::line","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_line","(string $string)","Write a string as standard output.",2],["Command::comment","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_comment","(string $string)","Write a string as comment output.",2],["Command::question","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_question","(string $string)","Write a string as question output.",2],["Command::error","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_error","(string $string)","Write a string as error output.",2],["Command::getOutput","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_getOutput","()","Get the output implementation.",2],["Command::getLaravel","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_getLaravel","()","Get the Laravel application instance.",2],["Command::setLaravel","Illuminate\\Console\\Command","Illuminate\/Console\/Command.html#method_setLaravel","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $laravel)","Set the Laravel application instance.",2],["ConfirmableTrait::confirmToProceed","Illuminate\\Console\\ConfirmableTrait","Illuminate\/Console\/ConfirmableTrait.html#method_confirmToProceed","(string $warning = &#039;Application In Production!&#039;, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Confirm before proceeding with the action",2],["Container::bound","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_bound","(string $abstract)","Determine if the given abstract type has been bound.",2],["Container::resolved","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_resolved","(string $abstract)","Determine if the given abstract type has been resolved.",2],["Container::isAlias","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_isAlias","(string $name)","Determine if a given string is an alias.",2],["Container::bind","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_bind","(string|array $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string|null $concrete = null, bool $shared = false)","Register a binding with the container.",2],["Container::bindIf","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_bindIf","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string|null $concrete = null, bool $shared = false)","Register a binding if it hasn't already been registered.",2],["Container::singleton","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_singleton","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string|null $concrete = null)","Register a shared binding in the container.",2],["Container::share","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_share","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $closure)","Wrap a Closure such that it is shared.",2],["Container::bindShared","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_bindShared","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $closure)","Bind a shared Closure into the container.",2],["Container::extend","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_extend","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $closure)","\"Extend\" an abstract type in the container.",2],["Container::instance","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_instance","(string $abstract, mixed $instance)","Register an existing instance as shared in the container.",2],["Container::alias","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_alias","(string $abstract, string $alias)","Alias a type to a shorter name.",2],["Container::rebinding","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_rebinding","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Bind a new callback to an abstract's rebind event.",2],["Container::refresh","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_refresh","(string $abstract, mixed $target, string $method)","Refresh an instance on the given target and method.",2],["Container::make","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_make","(string $abstract, array $parameters = array())","Resolve the given type from the container.",2],["Container::build","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_build","(string $concrete, array $parameters = array())","Instantiate a concrete instance of the given type.",2],["Container::resolving","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_resolving","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a new resolving callback.",2],["Container::resolvingAny","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_resolvingAny","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a new resolving callback for all types.",2],["Container::isShared","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_isShared","(string $abstract)","Determine if a given type is shared.",2],["Container::getBindings","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_getBindings","()","Get the container's bindings.",2],["Container::forgetInstance","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_forgetInstance","(string $abstract)","Remove a resolved instance from the instance cache.",2],["Container::forgetInstances","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_forgetInstances","()","Clear all of the instances from the container.",2],["Container::offsetExists","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_offsetExists","(string $key)","Determine if a given offset exists.",2],["Container::offsetGet","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_offsetGet","(string $key)","Get the value at a given offset.",2],["Container::offsetSet","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_offsetSet","(string $key, mixed $value)","Set the value at a given offset.",2],["Container::offsetUnset","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method_offsetUnset","(string $key)","Unset the value at a given offset.",2],["Container::__get","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method___get","(string $key)","Dynamically access container services.",2],["Container::__set","Illuminate\\Container\\Container","Illuminate\/Container\/Container.html#method___set","(string $key, mixed $value)","Dynamically set container services.",2],["CookieJar::make","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_make","(string $name, string $value, int $minutes, string $path = null, string $domain = null, bool $secure = false, bool $httpOnly = true)","Create a new cookie instance.",2],["CookieJar::forever","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_forever","(string $name, string $value, string $path = null, string $domain = null, bool $secure = false, bool $httpOnly = true)","Create a cookie that lasts \"forever\" (five years).",2],["CookieJar::forget","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_forget","(string $name, string $path = null, string $domain = null)","Expire the given cookie.",2],["CookieJar::hasQueued","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_hasQueued","(string $key)","Determine if a cookie has been queued.",2],["CookieJar::queued","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_queued","(string $key, mixed $default = null)","Get a queued cookie instance.",2],["CookieJar::queue","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_queue","()","Queue a cookie to send with the next response.",2],["CookieJar::unqueue","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_unqueue","(string $name)","Remove a cookie from the queue.",2],["CookieJar::setDefaultPathAndDomain","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_setDefaultPathAndDomain","(string $path, string $domain)","Set the default path and domain for the jar.",2],["CookieJar::getQueuedCookies","Illuminate\\Cookie\\CookieJar","Illuminate\/Cookie\/CookieJar.html#method_getQueuedCookies","()","Get the cookies which have been queued for the next",2],["CookieServiceProvider::register","Illuminate\\Cookie\\CookieServiceProvider","Illuminate\/Cookie\/CookieServiceProvider.html#method_register","()","Register the service provider.",2],["Guard::__construct","Illuminate\\Cookie\\Guard","Illuminate\/Cookie\/Guard.html#method___construct","(<abbr title=\"Symfony\\Component\\HttpKernel\\HttpKernelInterface\">HttpKernelInterface<\/abbr> $app, <a href=\"Illuminate\/Encryption\/Encrypter.html\"><abbr title=\"Illuminate\\Encryption\\Encrypter\">Encrypter<\/abbr><\/a> $encrypter)","Create a new CookieGuard instance.",2],["Guard::handle","Illuminate\\Cookie\\Guard","Illuminate\/Cookie\/Guard.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Handle the given request and get the response.",2],["Queue::__construct","Illuminate\\Cookie\\Queue","Illuminate\/Cookie\/Queue.html#method___construct","(<abbr title=\"Symfony\\Component\\HttpKernel\\HttpKernelInterface\">HttpKernelInterface<\/abbr> $app, <a href=\"Illuminate\/Cookie\/CookieJar.html\"><abbr title=\"Illuminate\\Cookie\\CookieJar\">CookieJar<\/abbr><\/a> $cookies)","Create a new CookieQueue instance.",2],["Queue::handle","Illuminate\\Cookie\\Queue","Illuminate\/Cookie\/Queue.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Handle the given request and get the response.",2],["Manager::__construct","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new database capsule manager.",2],["Manager::connection","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_connection","(string $connection = null)","Get a connection instance from the global manager.",2],["Manager::table","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_table","(string $table, string $connection = null)","Get a fluent query builder instance.",2],["Manager::schema","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_schema","(string $connection = null)","Get a schema builder instance.",2],["Manager::getConnection","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_getConnection","(string $name = null)","Get a registered connection instance.",2],["Manager::addConnection","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_addConnection","(array $config, string $name = &#039;default&#039;)","Register a connection with the manager.",2],["Manager::bootEloquent","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_bootEloquent","()","Bootstrap Eloquent so it is ready for usage.",2],["Manager::setFetchMode","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_setFetchMode","(int $fetchMode)","Set the fetch mode for the database connections.",2],["Manager::getDatabaseManager","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_getDatabaseManager","()","Get the database manager instance.",2],["Manager::getEventDispatcher","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_getEventDispatcher","()","Get the current event dispatcher instance.",2],["Manager::setEventDispatcher","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_setEventDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $dispatcher)","Set the event dispatcher instance to be used by connections.",2],["Manager::getCacheManager","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_getCacheManager","()","Get the current cache manager instance.",2],["Manager::setCacheManager","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method_setCacheManager","(<a href=\"Illuminate\/Cache\/CacheManager.html\"><abbr title=\"Illuminate\\Cache\\CacheManager\">CacheManager<\/abbr><\/a> $cache)","Set the cache manager to be used by connections.",2],["Manager::__callStatic","Illuminate\\Database\\Capsule\\Manager","Illuminate\/Database\/Capsule\/Manager.html#method___callStatic","(string $method, array $parameters)","Dynamically pass methods to the default connection.",2],["Connection::__construct","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method___construct","(<a href=\"http:\/\/php.net\/PDO\"><abbr title=\"PDO\">PDO<\/abbr><\/a> $pdo, string $database = &#039;&#039;, string $tablePrefix = &#039;&#039;, array $config = array())","Create a new database connection instance.",2],["Connection::useDefaultQueryGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_useDefaultQueryGrammar","()","Set the query grammar to the default implementation.",2],["Connection::useDefaultSchemaGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_useDefaultSchemaGrammar","()","Set the schema grammar to the default implementation.",2],["Connection::useDefaultPostProcessor","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_useDefaultPostProcessor","()","Set the query post processor to the default implementation.",2],["Connection::getSchemaBuilder","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getSchemaBuilder","()","Get a schema builder instance for the connection.",2],["Connection::table","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_table","(string $table)","Begin a fluent query against a database table.",2],["Connection::raw","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_raw","(mixed $value)","Get a new raw query expression.",2],["Connection::selectOne","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_selectOne","(string $query, array $bindings = array())","Run a select statement and return a single result.",2],["Connection::selectFromWriteConnection","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_selectFromWriteConnection","(string $query, array $bindings = array())","Run a select statement against the database.",2],["Connection::select","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_select","(string $query, array $bindings = array(), bool $useReadPdo = true)","Run a select statement against the database.",2],["Connection::insert","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_insert","(string $query, array $bindings = array())","Run an insert statement against the database.",2],["Connection::update","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_update","(string $query, array $bindings = array())","Run an update statement against the database.",2],["Connection::delete","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_delete","(string $query, array $bindings = array())","Run a delete statement against the database.",2],["Connection::statement","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_statement","(string $query, array $bindings = array())","Execute an SQL statement and return the boolean result.",2],["Connection::affectingStatement","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_affectingStatement","(string $query, array $bindings = array())","Run an SQL statement and get the number of rows affected.",2],["Connection::unprepared","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_unprepared","(string $query)","Run a raw, unprepared query against the PDO connection.",2],["Connection::prepareBindings","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_prepareBindings","(array $bindings)","Prepare the query bindings for execution.",2],["Connection::transaction","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_transaction","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute a Closure within a transaction.",2],["Connection::beginTransaction","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_beginTransaction","()","Start a new database transaction.",2],["Connection::commit","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_commit","()","Commit the active database transaction.",2],["Connection::rollBack","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_rollBack","()","Rollback the active database transaction.",2],["Connection::transactionLevel","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_transactionLevel","()","Get the number of active transactions.",2],["Connection::pretend","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_pretend","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute the given callback in \"dry run\" mode.",2],["Connection::disconnect","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_disconnect","()","Disconnect from the underlying PDO connection.",2],["Connection::reconnect","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_reconnect","()","Reconnect to the database.",2],["Connection::logQuery","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_logQuery","(string $query, array $bindings, $time = null)","Log a query in the connection's query log.",2],["Connection::listen","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_listen","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a database query listener with the connection.",2],["Connection::getDoctrineColumn","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getDoctrineColumn","(string $table, string $column)","Get a Doctrine Schema Column instance.",2],["Connection::getDoctrineSchemaManager","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getDoctrineSchemaManager","()","Get the Doctrine DBAL schema manager for the connection.",2],["Connection::getDoctrineConnection","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getDoctrineConnection","()","Get the Doctrine DBAL database connection instance.",2],["Connection::getPdo","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getPdo","()","Get the current PDO connection.",2],["Connection::getReadPdo","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getReadPdo","()","Get the current PDO connection used for reading.",2],["Connection::setPdo","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setPdo","(<a href=\"http:\/\/php.net\/PDO\"><abbr title=\"PDO\">PDO<\/abbr><\/a>|null $pdo)","Set the PDO connection.",2],["Connection::setReadPdo","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setReadPdo","(<a href=\"http:\/\/php.net\/PDO\"><abbr title=\"PDO\">PDO<\/abbr><\/a>|null $pdo)","Set the PDO connection used for reading.",2],["Connection::setReconnector","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setReconnector","(callable $reconnector)","Set the reconnect instance on the connection.",2],["Connection::getName","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getName","()","Get the database connection name.",2],["Connection::getConfig","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getConfig","(string $option)","Get an option from the configuration options.",2],["Connection::getDriverName","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getDriverName","()","Get the PDO driver name.",2],["Connection::getQueryGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getQueryGrammar","()","Get the query grammar used by the connection.",2],["Connection::setQueryGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setQueryGrammar","(<a href=\"Illuminate\/Database\/Query\/Grammars\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Query\\Grammars\\Grammar\">Grammar<\/abbr><\/a> $grammar)","Set the query grammar used by the connection.",2],["Connection::getSchemaGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getSchemaGrammar","()","Get the schema grammar used by the connection.",2],["Connection::setSchemaGrammar","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setSchemaGrammar","(<a href=\"Illuminate\/Database\/Schema\/Grammars\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Schema\\Grammars\\Grammar\">Grammar<\/abbr><\/a> $grammar)","Set the schema grammar used by the connection.",2],["Connection::getPostProcessor","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getPostProcessor","()","Get the query post processor used by the connection.",2],["Connection::setPostProcessor","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setPostProcessor","(<a href=\"Illuminate\/Database\/Query\/Processors\/Processor.html\"><abbr title=\"Illuminate\\Database\\Query\\Processors\\Processor\">Processor<\/abbr><\/a> $processor)","Set the query post processor used by the connection.",2],["Connection::getEventDispatcher","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getEventDispatcher","()","Get the event dispatcher used by the connection.",2],["Connection::setEventDispatcher","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setEventDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events)","Set the event dispatcher instance on the connection.",2],["Connection::getPaginator","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getPaginator","()","Get the paginator environment instance.",2],["Connection::setPaginator","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setPaginator","(<a href=\"Illuminate\/Pagination\/Factory.html\"><abbr title=\"Illuminate\\Pagination\\Factory\">Factory<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $paginator)","Set the pagination environment instance.",2],["Connection::getCacheManager","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getCacheManager","()","Get the cache manager instance.",2],["Connection::setCacheManager","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setCacheManager","(<a href=\"Illuminate\/Cache\/CacheManager.html\"><abbr title=\"Illuminate\\Cache\\CacheManager\">CacheManager<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cache)","Set the cache manager instance on the connection.",2],["Connection::pretending","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_pretending","()","Determine if the connection in a \"dry run\".",2],["Connection::getFetchMode","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getFetchMode","()","Get the default fetch mode for the connection.",2],["Connection::setFetchMode","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setFetchMode","(int $fetchMode)","Set the default fetch mode for the connection.",2],["Connection::getQueryLog","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getQueryLog","()","Get the connection query log.",2],["Connection::flushQueryLog","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_flushQueryLog","()","Clear the query log.",2],["Connection::enableQueryLog","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_enableQueryLog","()","Enable the query log on the connection.",2],["Connection::disableQueryLog","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_disableQueryLog","()","Disable the query log on the connection.",2],["Connection::logging","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_logging","()","Determine whether we're logging queries.",2],["Connection::getDatabaseName","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getDatabaseName","()","Get the name of the connected database.",2],["Connection::setDatabaseName","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setDatabaseName","(string $database)","Set the name of the connected database.",2],["Connection::getTablePrefix","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_getTablePrefix","()","Get the table prefix for the connection.",2],["Connection::setTablePrefix","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_setTablePrefix","(string $prefix)","Set the table prefix in use by the connection.",2],["Connection::withTablePrefix","Illuminate\\Database\\Connection","Illuminate\/Database\/Connection.html#method_withTablePrefix","(<a href=\"Illuminate\/Database\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Grammar\">Grammar<\/abbr><\/a> $grammar)","Set the table prefix and return the grammar.",2],["ConnectionInterface::table","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_table","(string $table)","Begin a fluent query against a database table.",2],["ConnectionInterface::raw","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_raw","(mixed $value)","Get a new raw query expression.",2],["ConnectionInterface::selectOne","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_selectOne","(string $query, array $bindings = array())","Run a select statement and return a single result.",2],["ConnectionInterface::select","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_select","(string $query, array $bindings = array())","Run a select statement against the database.",2],["ConnectionInterface::insert","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_insert","(string $query, array $bindings = array())","Run an insert statement against the database.",2],["ConnectionInterface::update","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_update","(string $query, array $bindings = array())","Run an update statement against the database.",2],["ConnectionInterface::delete","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_delete","(string $query, array $bindings = array())","Run a delete statement against the database.",2],["ConnectionInterface::statement","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_statement","(string $query, array $bindings = array())","Execute an SQL statement and return the boolean result.",2],["ConnectionInterface::affectingStatement","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_affectingStatement","(string $query, array $bindings = array())","Run an SQL statement and get the number of rows affected.",2],["ConnectionInterface::unprepared","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_unprepared","(string $query)","Run a raw, unprepared query against the PDO connection.",2],["ConnectionInterface::prepareBindings","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_prepareBindings","(array $bindings)","Prepare the query bindings for execution.",2],["ConnectionInterface::transaction","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_transaction","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute a Closure within a transaction.",2],["ConnectionInterface::beginTransaction","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_beginTransaction","()","Start a new database transaction.",2],["ConnectionInterface::commit","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_commit","()","Commit the active database transaction.",2],["ConnectionInterface::rollBack","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_rollBack","()","Rollback the active database transaction.",2],["ConnectionInterface::transactionLevel","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_transactionLevel","()","Get the number of active transactions.",2],["ConnectionInterface::pretend","Illuminate\\Database\\ConnectionInterface","Illuminate\/Database\/ConnectionInterface.html#method_pretend","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute the given callback in \"dry run\" mode.",2],["ConnectionResolver::__construct","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method___construct","(array $connections = array())","Create a new connection resolver instance.",2],["ConnectionResolver::connection","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method_connection","(string $name = null)","Get a database connection instance.",2],["ConnectionResolver::addConnection","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method_addConnection","(string $name, <a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Add a connection to the resolver.",2],["ConnectionResolver::hasConnection","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method_hasConnection","(string $name)","Check if a connection has been registered.",2],["ConnectionResolver::getDefaultConnection","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method_getDefaultConnection","()","Get the default connection name.",2],["ConnectionResolver::setDefaultConnection","Illuminate\\Database\\ConnectionResolver","Illuminate\/Database\/ConnectionResolver.html#method_setDefaultConnection","(string $name)","Set the default connection name.",2],["ConnectionResolverInterface::connection","Illuminate\\Database\\ConnectionResolverInterface","Illuminate\/Database\/ConnectionResolverInterface.html#method_connection","(string $name = null)","Get a database connection instance.",2],["ConnectionResolverInterface::getDefaultConnection","Illuminate\\Database\\ConnectionResolverInterface","Illuminate\/Database\/ConnectionResolverInterface.html#method_getDefaultConnection","()","Get the default connection name.",2],["ConnectionResolverInterface::setDefaultConnection","Illuminate\\Database\\ConnectionResolverInterface","Illuminate\/Database\/ConnectionResolverInterface.html#method_setDefaultConnection","(string $name)","Set the default connection name.",2],["ConnectionFactory::__construct","Illuminate\\Database\\Connectors\\ConnectionFactory","Illuminate\/Database\/Connectors\/ConnectionFactory.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Create a new connection factory instance.",2],["ConnectionFactory::make","Illuminate\\Database\\Connectors\\ConnectionFactory","Illuminate\/Database\/Connectors\/ConnectionFactory.html#method_make","(array $config, string $name = null)","Establish a PDO connection based on the configuration.",2],["ConnectionFactory::createConnector","Illuminate\\Database\\Connectors\\ConnectionFactory","Illuminate\/Database\/Connectors\/ConnectionFactory.html#method_createConnector","(array $config)","Create a connector instance based on the configuration.",2],["Connector::getOptions","Illuminate\\Database\\Connectors\\Connector","Illuminate\/Database\/Connectors\/Connector.html#method_getOptions","(array $config)","Get the PDO options based on the configuration.",2],["Connector::createConnection","Illuminate\\Database\\Connectors\\Connector","Illuminate\/Database\/Connectors\/Connector.html#method_createConnection","(string $dsn, array $config, array $options)","Create a new PDO connection.",2],["Connector::getDefaultOptions","Illuminate\\Database\\Connectors\\Connector","Illuminate\/Database\/Connectors\/Connector.html#method_getDefaultOptions","()","Get the default PDO connection options.",2],["Connector::setDefaultOptions","Illuminate\\Database\\Connectors\\Connector","Illuminate\/Database\/Connectors\/Connector.html#method_setDefaultOptions","(array $options)","Set the default PDO connection options.",2],["ConnectorInterface::connect","Illuminate\\Database\\Connectors\\ConnectorInterface","Illuminate\/Database\/Connectors\/ConnectorInterface.html#method_connect","(array $config)","Establish a database connection.",2],["MySqlConnector::connect","Illuminate\\Database\\Connectors\\MySqlConnector","Illuminate\/Database\/Connectors\/MySqlConnector.html#method_connect","(array $config)","Establish a database connection.",2],["PostgresConnector::connect","Illuminate\\Database\\Connectors\\PostgresConnector","Illuminate\/Database\/Connectors\/PostgresConnector.html#method_connect","(array $config)","Establish a database connection.",2],["SQLiteConnector::connect","Illuminate\\Database\\Connectors\\SQLiteConnector","Illuminate\/Database\/Connectors\/SQLiteConnector.html#method_connect","(array $config)","Establish a database connection.",2],["SqlServerConnector::connect","Illuminate\\Database\\Connectors\\SqlServerConnector","Illuminate\/Database\/Connectors\/SqlServerConnector.html#method_connect","(array $config)","Establish a database connection.",2],["InstallCommand::__construct","Illuminate\\Database\\Console\\Migrations\\InstallCommand","Illuminate\/Database\/Console\/Migrations\/InstallCommand.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html\"><abbr title=\"Illuminate\\Database\\Migrations\\MigrationRepositoryInterface\">MigrationRepositoryInterface<\/abbr><\/a> $repository)","Create a new console command instance.",2],["InstallCommand::fire","Illuminate\\Database\\Console\\Migrations\\InstallCommand","Illuminate\/Database\/Console\/Migrations\/InstallCommand.html#method_fire","()","Execute the console command.",2],["MigrateCommand::__construct","Illuminate\\Database\\Console\\Migrations\\MigrateCommand","Illuminate\/Database\/Console\/Migrations\/MigrateCommand.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/Migrator.html\"><abbr title=\"Illuminate\\Database\\Migrations\\Migrator\">Migrator<\/abbr><\/a> $migrator, string $packagePath)","Create a new migration command instance.",2],["MigrateCommand::fire","Illuminate\\Database\\Console\\Migrations\\MigrateCommand","Illuminate\/Database\/Console\/Migrations\/MigrateCommand.html#method_fire","()","Execute the console command.",2],["MigrateMakeCommand::__construct","Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand","Illuminate\/Database\/Console\/Migrations\/MigrateMakeCommand.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/MigrationCreator.html\"><abbr title=\"Illuminate\\Database\\Migrations\\MigrationCreator\">MigrationCreator<\/abbr><\/a> $creator, string $packagePath)","Create a new console command instance.",2],["MigrateMakeCommand::fire","Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand","Illuminate\/Database\/Console\/Migrations\/MigrateMakeCommand.html#method_fire","()","Execute the console command.",2],["RefreshCommand::fire","Illuminate\\Database\\Console\\Migrations\\RefreshCommand","Illuminate\/Database\/Console\/Migrations\/RefreshCommand.html#method_fire","()","Execute the console command.",2],["ResetCommand::__construct","Illuminate\\Database\\Console\\Migrations\\ResetCommand","Illuminate\/Database\/Console\/Migrations\/ResetCommand.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/Migrator.html\"><abbr title=\"Illuminate\\Database\\Migrations\\Migrator\">Migrator<\/abbr><\/a> $migrator)","Create a new migration rollback command instance.",2],["ResetCommand::fire","Illuminate\\Database\\Console\\Migrations\\ResetCommand","Illuminate\/Database\/Console\/Migrations\/ResetCommand.html#method_fire","()","Execute the console command.",2],["RollbackCommand::__construct","Illuminate\\Database\\Console\\Migrations\\RollbackCommand","Illuminate\/Database\/Console\/Migrations\/RollbackCommand.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/Migrator.html\"><abbr title=\"Illuminate\\Database\\Migrations\\Migrator\">Migrator<\/abbr><\/a> $migrator)","Create a new migration rollback command instance.",2],["RollbackCommand::fire","Illuminate\\Database\\Console\\Migrations\\RollbackCommand","Illuminate\/Database\/Console\/Migrations\/RollbackCommand.html#method_fire","()","Execute the console command.",2],["SeedCommand::__construct","Illuminate\\Database\\Console\\SeedCommand","Illuminate\/Database\/Console\/SeedCommand.html#method___construct","(<a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $resolver)","Create a new database seed command instance.",2],["SeedCommand::fire","Illuminate\\Database\\Console\\SeedCommand","Illuminate\/Database\/Console\/SeedCommand.html#method_fire","()","Execute the console command.",2],["DatabaseManager::__construct","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app, <a href=\"Illuminate\/Database\/Connectors\/ConnectionFactory.html\"><abbr title=\"Illuminate\\Database\\Connectors\\ConnectionFactory\">ConnectionFactory<\/abbr><\/a> $factory)","Create a new database manager instance.",2],["DatabaseManager::connection","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_connection","(string $name = null)","Get a database connection instance.",2],["DatabaseManager::purge","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_purge","(string $name = null)","Disconnect from the given database and remove from",2],["DatabaseManager::disconnect","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_disconnect","(string $name = null)","Disconnect from the given database.",2],["DatabaseManager::reconnect","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_reconnect","(string $name = null)","Reconnect to the given database.",2],["DatabaseManager::getDefaultConnection","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_getDefaultConnection","()","Get the default connection name.",2],["DatabaseManager::setDefaultConnection","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_setDefaultConnection","(string $name)","Set the default connection name.",2],["DatabaseManager::extend","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_extend","(string $name, callable $resolver)","Register an extension connection resolver.",2],["DatabaseManager::getConnections","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method_getConnections","()","Return all of the created connections.",2],["DatabaseManager::__call","Illuminate\\Database\\DatabaseManager","Illuminate\/Database\/DatabaseManager.html#method___call","(string $method, array $parameters)","Dynamically pass methods to the default connection.",2],["DatabaseServiceProvider::boot","Illuminate\\Database\\DatabaseServiceProvider","Illuminate\/Database\/DatabaseServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["DatabaseServiceProvider::register","Illuminate\\Database\\DatabaseServiceProvider","Illuminate\/Database\/DatabaseServiceProvider.html#method_register","()","Register the service provider.",2],["Builder::__construct","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method___construct","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Create a new Eloquent query builder instance.",2],["Builder::find","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_find","(mixed $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key.",2],["Builder::findMany","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_findMany","(array $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key.",2],["Builder::findOrFail","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_findOrFail","(mixed $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key or throw an exception.",2],["Builder::first","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_first","(array $columns = array(&#039;*&#039;))","Execute the query and get the first result.",2],["Builder::firstOrFail","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_firstOrFail","(array $columns = array(&#039;*&#039;))","Execute the query and get the first result or throw",2],["Builder::get","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_get","(array $columns = array(&#039;*&#039;))","Execute the query as a \"select\" statement.",2],["Builder::pluck","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_pluck","(string $column)","Pluck a single column from the database.",2],["Builder::chunk","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_chunk","(int $count, callable $callback)","Chunk the results of the query.",2],["Builder::lists","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_lists","(string $column, string $key = null)","Get an array with the values of a given column.",2],["Builder::paginate","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_paginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator for the \"select\" statement.",2],["Builder::simplePaginate","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_simplePaginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator only supporting simple next and previous",2],["Builder::update","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_update","(array $values)","Update a record in the database.",2],["Builder::increment","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_increment","(string $column, int $amount = 1, array $extra = array())","Increment a column's value by a given amount.",2],["Builder::decrement","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_decrement","(string $column, int $amount = 1, array $extra = array())","Decrement a column's value by a given amount.",2],["Builder::delete","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_delete","()","Delete a record from the database.",2],["Builder::forceDelete","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_forceDelete","()","Run the default delete function on the builder.",2],["Builder::onDelete","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_onDelete","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a replacement for the default delete function.",2],["Builder::getModels","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getModels","(array $columns = array(&#039;*&#039;))","Get the hydrated models without eager loading.",2],["Builder::eagerLoadRelations","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_eagerLoadRelations","(array $models)","Eager load the relationships for the models.",2],["Builder::getRelation","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getRelation","(string $relation)","Get the relation instance for the given relation name.",2],["Builder::where","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_where","(string $column, string $operator = null, mixed $value = null, string $boolean = &#039;and&#039;)","Add a basic where clause to the query.",2],["Builder::orWhere","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_orWhere","(string $column, string $operator = null, mixed $value = null)","Add an \"or where\" clause to the query.",2],["Builder::has","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_has","(string $relation, string $operator = &#039;&gt;=&#039;, int $count = 1, string $boolean = &#039;and&#039;, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Add a relationship count condition to the query.",2],["Builder::whereHas","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_whereHas","(string $relation, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, string $operator = &#039;&gt;=&#039;, int $count = 1)","Add a relationship count condition to the query with",2],["Builder::orHas","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_orHas","(string $relation, string $operator = &#039;&gt;=&#039;, int $count = 1)","Add a relationship count condition to the query with",2],["Builder::orWhereHas","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_orWhereHas","(string $relation, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, string $operator = &#039;&gt;=&#039;, int $count = 1)","Add a relationship count condition to the query with",2],["Builder::with","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_with","(mixed $relations)","Set the relationships that should be eager loaded.",2],["Builder::getQuery","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getQuery","()","Get the underlying query builder instance.",2],["Builder::setQuery","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_setQuery","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Set the underlying query builder instance.",2],["Builder::getEagerLoads","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getEagerLoads","()","Get the relationships being eagerly loaded.",2],["Builder::setEagerLoads","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_setEagerLoads","(array $eagerLoad)","Set the relationships being eagerly loaded.",2],["Builder::getModel","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getModel","()","Get the model instance being queried.",2],["Builder::setModel","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_setModel","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model)","Set a model instance for the model being queried.",2],["Builder::macro","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_macro","(string $name, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Extend the builder with a given callback.",2],["Builder::getMacro","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method_getMacro","(string $name)","Get the given macro by name.",2],["Builder::__call","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method___call","(string $method, array $parameters)","Dynamically handle calls into the query instance.",2],["Builder::__clone","Illuminate\\Database\\Eloquent\\Builder","Illuminate\/Database\/Eloquent\/Builder.html#method___clone","()","Force a clone of the underlying query builder when",2],["Collection::find","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_find","(mixed $key, mixed $default = null)","Find a model in the collection by key.",2],["Collection::load","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_load","(mixed $relations)","Load a set of relationships onto the collection.",2],["Collection::add","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_add","(mixed $item)","Add an item to the collection.",2],["Collection::contains","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_contains","(mixed $key)","Determine if a key exists in the collection.",2],["Collection::fetch","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_fetch","(string $key)","Fetch a nested element of the collection.",2],["Collection::max","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_max","(string $key)","Get the max value of a given key.",2],["Collection::min","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_min","(string $key)","Get the min value of a given key.",2],["Collection::modelKeys","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_modelKeys","()","Get the array of primary keys",2],["Collection::merge","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_merge","(<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $items)","Merge the collection with the given items.",2],["Collection::diff","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_diff","(<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $items)","Diff the collection with the given items.",2],["Collection::intersect","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_intersect","(<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $items)","Intersect the collection with the given items.",2],["Collection::unique","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_unique","()","Return only unique items from the collection.",2],["Collection::only","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_only","(mixed $keys)","Returns only the models from the collection with the",2],["Collection::except","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_except","(mixed $keys)","Returns all models in the collection except the models",2],["Collection::getDictionary","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_getDictionary","(<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $items = null)","Get a dictionary keyed by primary keys.",2],["Collection::toBase","Illuminate\\Database\\Eloquent\\Collection","Illuminate\/Database\/Eloquent\/Collection.html#method_toBase","()","Get a base Support collection instance from this collection.",2],["Model::__construct","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___construct","(array $attributes = array())","Create a new Eloquent model instance.",2],["Model::addGlobalScope","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_addGlobalScope","(<a href=\"Illuminate\/Database\/Eloquent\/ScopeInterface.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\ScopeInterface\">ScopeInterface<\/abbr><\/a> $scope)","Register a new global scope on the model.",2],["Model::hasGlobalScope","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasGlobalScope","(<a href=\"Illuminate\/Database\/Eloquent\/ScopeInterface.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\ScopeInterface\">ScopeInterface<\/abbr><\/a> $scope)","Determine if a model has a global scope.",2],["Model::getGlobalScope","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getGlobalScope","(<a href=\"Illuminate\/Database\/Eloquent\/ScopeInterface.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\ScopeInterface\">ScopeInterface<\/abbr><\/a> $scope)","Get a global scope registered with the modal.",2],["Model::getGlobalScopes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getGlobalScopes","()","Get the global scopes for this class instance.",2],["Model::observe","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_observe","(object $class)","Register an observer with the Model.",2],["Model::fill","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_fill","(array $attributes)","Fill the model with an array of attributes.",2],["Model::newInstance","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newInstance","(array $attributes = array(), bool $exists = false)","Create a new instance of the given model.",2],["Model::newFromBuilder","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newFromBuilder","(array $attributes = array())","Create a new model instance that is existing.",2],["Model::hydrate","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hydrate","(array $items, string $connection = null)","Create a collection of models from plain arrays.",2],["Model::hydrateRaw","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hydrateRaw","(string $query, array $bindings = array(), string $connection = null)","Create a collection of models from a raw query.",2],["Model::create","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_create","(array $attributes)","Save a new model and return the instance.",2],["Model::firstOrCreate","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_firstOrCreate","(array $attributes)","Get the first record matching the attributes or create",2],["Model::firstOrNew","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_firstOrNew","(array $attributes)","Get the first record matching the attributes or instantiate",2],["Model::updateOrCreate","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_updateOrCreate","(array $attributes, array $values = array())","Create or update a record matching the attributes,",2],["Model::query","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_query","()","Begin querying the model.",2],["Model::on","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_on","(string $connection = null)","Begin querying the model on a given connection.",2],["Model::all","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_all","(array $columns = array(&#039;*&#039;))","Get all of the models from the database.",2],["Model::find","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_find","(mixed $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key.",2],["Model::findOrNew","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_findOrNew","(mixed $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key or return new static.",2],["Model::findOrFail","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_findOrFail","(mixed $id, array $columns = array(&#039;*&#039;))","Find a model by its primary key or throw an exception.",2],["Model::load","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_load","(array|string $relations)","Eager load relations on the model.",2],["Model::with","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_with","(array|string $relations)","Being querying a model with eager loading.",2],["Model::hasOne","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasOne","(string $related, string $foreignKey = null, string $localKey = null)","Define a one-to-one relationship.",2],["Model::morphOne","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_morphOne","(string $related, string $name, string $type = null, string $id = null, string $localKey = null)","Define a polymorphic one-to-one relationship.",2],["Model::belongsTo","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_belongsTo","(string $related, string $foreignKey = null, string $otherKey = null, string $relation = null)","Define an inverse one-to-one or many relationship.",2],["Model::morphTo","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_morphTo","(string $name = null, string $type = null, string $id = null)","Define a polymorphic, inverse one-to-one or many relationship.",2],["Model::hasMany","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasMany","(string $related, string $foreignKey = null, string $localKey = null)","Define a one-to-many relationship.",2],["Model::hasManyThrough","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasManyThrough","(string $related, string $through, string|null $firstKey = null, string|null $secondKey = null)","Define a has-many-through relationship.",2],["Model::morphMany","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_morphMany","(string $related, string $name, string $type = null, string $id = null, string $localKey = null)","Define a polymorphic one-to-many relationship.",2],["Model::belongsToMany","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_belongsToMany","(string $related, string $table = null, string $foreignKey = null, string $otherKey = null, string $relation = null)","Define a many-to-many relationship.",2],["Model::morphToMany","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_morphToMany","(string $related, string $name, string $table = null, string $foreignKey = null, string $otherKey = null, bool $inverse = false)","Define a polymorphic many-to-many relationship.",2],["Model::morphedByMany","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_morphedByMany","(string $related, string $name, string $table = null, string $foreignKey = null, string $otherKey = null)","Define a polymorphic, inverse many-to-many relationship.",2],["Model::joiningTable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_joiningTable","(string $related)","Get the joining table name for a many-to-many relation.",2],["Model::destroy","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_destroy","(array|int $ids)","Destroy the models for the given IDs.",2],["Model::delete","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_delete","()","Delete the model from the database.",2],["Model::forceDelete","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_forceDelete","()","Force a hard delete on a soft deleted model.",2],["Model::saving","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_saving","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a saving model event with the dispatcher.",2],["Model::saved","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_saved","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a saved model event with the dispatcher.",2],["Model::updating","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_updating","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register an updating model event with the dispatcher.",2],["Model::updated","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_updated","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register an updated model event with the dispatcher.",2],["Model::creating","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_creating","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a creating model event with the dispatcher.",2],["Model::created","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_created","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a created model event with the dispatcher.",2],["Model::deleting","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_deleting","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a deleting model event with the dispatcher.",2],["Model::deleted","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_deleted","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a deleted model event with the dispatcher.",2],["Model::flushEventListeners","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_flushEventListeners","()","Remove all of the event listeners for the model.",2],["Model::getObservableEvents","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getObservableEvents","()","Get the observable event names.",2],["Model::setObservableEvents","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setObservableEvents","(array $observables)","Set the observable event names.",2],["Model::addObservableEvents","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_addObservableEvents","(mixed $observables)","Add an observable event name.",2],["Model::removeObservableEvents","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_removeObservableEvents","(mixed $observables)","Remove an observable event name.",2],["Model::update","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_update","(array $attributes = array())","Update the model in the database.",2],["Model::push","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_push","()","Save the model and all of its relationships.",2],["Model::save","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_save","(array $options = array())","Save the model to the database.",2],["Model::touchOwners","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_touchOwners","()","Touch the owning relations of the model.",2],["Model::touches","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_touches","(string $relation)","Determine if the model touches a given relation.",2],["Model::touch","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_touch","()","Update the model's update timestamp.",2],["Model::setCreatedAt","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setCreatedAt","(mixed $value)","Set the value of the \"created at\" attribute.",2],["Model::setUpdatedAt","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setUpdatedAt","(mixed $value)","Set the value of the \"updated at\" attribute.",2],["Model::getCreatedAtColumn","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getCreatedAtColumn","()","Get the name of the \"created at\" column.",2],["Model::getUpdatedAtColumn","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getUpdatedAtColumn","()","Get the name of the \"updated at\" column.",2],["Model::freshTimestamp","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_freshTimestamp","()","Get a fresh timestamp for the model.",2],["Model::freshTimestampString","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_freshTimestampString","()","Get a fresh timestamp for the model.",2],["Model::newQuery","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newQuery","()","Get a new query builder for the model's table.",2],["Model::newQueryWithoutScope","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newQueryWithoutScope","(<a href=\"Illuminate\/Database\/Eloquent\/ScopeInterface.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\ScopeInterface\">ScopeInterface<\/abbr><\/a> $scope)","Get a new query instance without a given scope.",2],["Model::newQueryWithoutScopes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newQueryWithoutScopes","()","Get a new query builder that doesn't have any global",2],["Model::applyGlobalScopes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_applyGlobalScopes","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Apply all of the global scopes to an Eloquent builder.",2],["Model::removeGlobalScopes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_removeGlobalScopes","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Remove all of the global scopes from an Eloquent builder.",2],["Model::newEloquentBuilder","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newEloquentBuilder","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Create a new Eloquent query builder for the model.",2],["Model::newCollection","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newCollection","(array $models = array())","Create a new Eloquent Collection instance.",2],["Model::newPivot","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_newPivot","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, array $attributes, string $table, bool $exists)","Create a new pivot model instance.",2],["Model::getTable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getTable","()","Get the table associated with the model.",2],["Model::setTable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setTable","(string $table)","Set the table associated with the model.",2],["Model::getKey","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getKey","()","Get the value of the model's primary key.",2],["Model::getKeyName","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getKeyName","()","Get the primary key for the model.",2],["Model::setKeyName","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setKeyName","($key)","Set the primary key for the model.",2],["Model::getQualifiedKeyName","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getQualifiedKeyName","()","Get the table qualified key name.",2],["Model::usesTimestamps","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_usesTimestamps","()","Determine if the model uses timestamps.",2],["Model::getMorphClass","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getMorphClass","()","Get the class name for polymorphic relations.",2],["Model::getPerPage","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getPerPage","()","Get the number of models to return per page.",2],["Model::setPerPage","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setPerPage","(int $perPage)","Set the number of models to return per page.",2],["Model::getForeignKey","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getForeignKey","()","Get the default foreign key name for the model.",2],["Model::getHidden","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getHidden","()","Get the hidden attributes for the model.",2],["Model::setHidden","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setHidden","(array $hidden)","Set the hidden attributes for the model.",2],["Model::setVisible","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setVisible","(array $visible)","Set the visible attributes for the model.",2],["Model::setAppends","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setAppends","(array $appends)","Set the accessors to append to model arrays.",2],["Model::getFillable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getFillable","()","Get the fillable attributes for the model.",2],["Model::fillable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_fillable","(array $fillable)","Set the fillable attributes for the model.",2],["Model::guard","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_guard","(array $guarded)","Set the guarded attributes for the model.",2],["Model::unguard","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_unguard","()","Disable all mass assignable restrictions.",2],["Model::reguard","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_reguard","()","Enable the mass assignment restrictions.",2],["Model::setUnguardState","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setUnguardState","(bool $state)","Set \"unguard\" to a given state.",2],["Model::isFillable","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_isFillable","(string $key)","Determine if the given attribute may be mass assigned.",2],["Model::isGuarded","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_isGuarded","(string $key)","Determine if the given key is guarded.",2],["Model::totallyGuarded","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_totallyGuarded","()","Determine if the model is totally guarded.",2],["Model::getTouchedRelations","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getTouchedRelations","()","Get the relationships that are touched on save.",2],["Model::setTouchedRelations","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setTouchedRelations","(array $touches)","Set the relationships that are touched on save.",2],["Model::getIncrementing","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getIncrementing","()","Get the value indicating whether the IDs are incrementing.",2],["Model::setIncrementing","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setIncrementing","(bool $value)","Set whether IDs are incrementing.",2],["Model::toJson","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_toJson","(int $options)","Convert the model instance to JSON.",2],["Model::jsonSerialize","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_jsonSerialize","()","Convert the object into something JSON serializable.",2],["Model::toArray","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_toArray","()","Convert the model instance to an array.",2],["Model::attributesToArray","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_attributesToArray","()","Convert the model's attributes to an array.",2],["Model::relationsToArray","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_relationsToArray","()","Get the model's relationships in array form.",2],["Model::getAttribute","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getAttribute","(string $key)","Get an attribute from the model.",2],["Model::hasGetMutator","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasGetMutator","(string $key)","Determine if a get mutator exists for an attribute.",2],["Model::setAttribute","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setAttribute","(string $key, mixed $value)","Set a given attribute on the model.",2],["Model::hasSetMutator","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_hasSetMutator","(string $key)","Determine if a set mutator exists for an attribute.",2],["Model::getDates","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getDates","()","Get the attributes that should be converted to dates.",2],["Model::fromDateTime","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_fromDateTime","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $value)","Convert a DateTime to a storable string.",2],["Model::replicate","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_replicate","(array $except = null)","Clone the model into a new, non-existing instance.",2],["Model::getAttributes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getAttributes","()","Get all of the current attributes on the model.",2],["Model::setRawAttributes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setRawAttributes","(array $attributes, bool $sync = false)","Set the array of model attributes. No checking is done.",2],["Model::getOriginal","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getOriginal","(string $key = null, mixed $default = null)","Get the model's original attribute values.",2],["Model::syncOriginal","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_syncOriginal","()","Sync the original attributes with the current.",2],["Model::syncOriginalAttribute","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_syncOriginalAttribute","(string $attribute)","Sync a single original attribute with its current value.",2],["Model::isDirty","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_isDirty","(array|string|null $attributes = null)","Determine if the model or given attribute(s) have been",2],["Model::getDirty","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getDirty","()","Get the attributes that have been changed since last",2],["Model::getRelations","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getRelations","()","Get all the loaded relations for the instance.",2],["Model::getRelation","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getRelation","(string $relation)","Get a specified relationship.",2],["Model::setRelation","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setRelation","(string $relation, mixed $value)","Set the specific relationship in the model.",2],["Model::setRelations","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setRelations","(array $relations)","Set the entire relations array on the model.",2],["Model::getConnection","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getConnection","()","Get the database connection for the model.",2],["Model::getConnectionName","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getConnectionName","()","Get the current connection name for the model.",2],["Model::setConnection","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setConnection","(string $name)","Set the connection associated with the model.",2],["Model::resolveConnection","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_resolveConnection","(string $connection = null)","Resolve a connection instance.",2],["Model::getConnectionResolver","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getConnectionResolver","()","Get the connection resolver instance.",2],["Model::setConnectionResolver","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setConnectionResolver","(<a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $resolver)","Set the connection resolver instance.",2],["Model::unsetConnectionResolver","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_unsetConnectionResolver","()","Unset the connection resolver for models.",2],["Model::getEventDispatcher","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getEventDispatcher","()","Get the event dispatcher instance.",2],["Model::setEventDispatcher","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_setEventDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $dispatcher)","Set the event dispatcher instance.",2],["Model::unsetEventDispatcher","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_unsetEventDispatcher","()","Unset the event dispatcher for models.",2],["Model::getMutatedAttributes","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_getMutatedAttributes","()","Get the mutated attributes for a given instance.",2],["Model::__get","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___get","(string $key)","Dynamically retrieve attributes on the model.",2],["Model::__set","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___set","(string $key, mixed $value)","Dynamically set attributes on the model.",2],["Model::offsetExists","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_offsetExists","(mixed $offset)","Determine if the given attribute exists.",2],["Model::offsetGet","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_offsetGet","(mixed $offset)","Get the value for a given offset.",2],["Model::offsetSet","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_offsetSet","(mixed $offset, mixed $value)","Set the value for a given offset.",2],["Model::offsetUnset","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method_offsetUnset","(mixed $offset)","Unset the value for a given offset.",2],["Model::__isset","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___isset","(string $key)","Determine if an attribute exists on the model.",2],["Model::__unset","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___unset","(string $key)","Unset an attribute on the model.",2],["Model::__call","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___call","(string $method, array $parameters)","Handle dynamic method calls into the method.",2],["Model::__callStatic","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___callStatic","(string $method, array $parameters)","Handle dynamic static method calls into the method.",2],["Model::__toString","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___toString","()","Convert the model to its string representation.",2],["Model::__wakeup","Illuminate\\Database\\Eloquent\\Model","Illuminate\/Database\/Eloquent\/Model.html#method___wakeup","()","When a model is being unserialized, check if it needs",2],["ModelNotFoundException::setModel","Illuminate\\Database\\Eloquent\\ModelNotFoundException","Illuminate\/Database\/Eloquent\/ModelNotFoundException.html#method_setModel","(string $model)","Set the affected Eloquent model.",2],["ModelNotFoundException::getModel","Illuminate\\Database\\Eloquent\\ModelNotFoundException","Illuminate\/Database\/Eloquent\/ModelNotFoundException.html#method_getModel","()","Get the affected Eloquent model.",2],["BelongsTo::__construct","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $foreignKey, string $otherKey, string $relation)","Create a new belongs to relationship instance.",2],["BelongsTo::getResults","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getResults","()","Get the results of the relationship.",2],["BelongsTo::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["BelongsTo::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query.",2],["BelongsTo::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["BelongsTo::initRelation","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["BelongsTo::match","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["BelongsTo::associate","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_associate","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model)","Associate the model instance to the given parent.",2],["BelongsTo::dissociate","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_dissociate","()","Dissociate previously associated model from the given",2],["BelongsTo::update","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_update","(array $attributes)","Update the parent model on the relationship.",2],["BelongsTo::getForeignKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getForeignKey","()","Get the foreign key of the relationship.",2],["BelongsTo::getQualifiedForeignKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getQualifiedForeignKey","()","Get the fully qualified foreign key of the relationship.",2],["BelongsTo::getOtherKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getOtherKey","()","Get the associated key of the relationship.",2],["BelongsTo::getQualifiedOtherKeyName","Illuminate\\Database\\Eloquent\\Relations\\BelongsTo","Illuminate\/Database\/Eloquent\/Relations\/BelongsTo.html#method_getQualifiedOtherKeyName","()","Get the fully qualified associated key of the relationship.",2],["BelongsToMany::__construct","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $table, string $foreignKey, string $otherKey, string $relationName = null)","Create a new has many relationship instance.",2],["BelongsToMany::getResults","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getResults","()","Get the results of the relationship.",2],["BelongsToMany::wherePivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_wherePivot","(string $column, string $operator = null, mixed $value = null, string $boolean = &#039;and&#039;)","Set a where clause for a pivot table column.",2],["BelongsToMany::orWherePivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_orWherePivot","(string $column, string $operator = null, mixed $value = null)","Set an or where clause for a pivot table column.",2],["BelongsToMany::first","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_first","(array $columns = array(&#039;*&#039;))","Execute the query and get the first result.",2],["BelongsToMany::firstOrFail","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_firstOrFail","(array $columns = array(&#039;*&#039;))","Execute the query and get the first result or throw",2],["BelongsToMany::get","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_get","(array $columns = array(&#039;*&#039;))","Execute the query as a \"select\" statement.",2],["BelongsToMany::paginate","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_paginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator for the \"select\" statement.",2],["BelongsToMany::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["BelongsToMany::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query.",2],["BelongsToMany::getRelationCountQueryForSelfJoin","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelationCountQueryForSelfJoin","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query",2],["BelongsToMany::getRelationCountHash","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelationCountHash","()","Get a relationship join table hash.",2],["BelongsToMany::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["BelongsToMany::initRelation","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["BelongsToMany::match","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["BelongsToMany::touch","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_touch","()","Touch all of the related models for the relationship.",2],["BelongsToMany::getRelatedIds","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelatedIds","()","Get all of the IDs for the related models.",2],["BelongsToMany::save","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_save","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model, array $joining = array(), bool $touch = true)","Save a new model and attach it to the parent model.",2],["BelongsToMany::saveMany","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_saveMany","(array $models, array $joinings = array())","Save an array of new models and attach them to the",2],["BelongsToMany::create","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_create","(array $attributes, array $joining = array(), bool $touch = true)","Create a new instance of the related model.",2],["BelongsToMany::createMany","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_createMany","(array $records, array $joinings = array())","Create an array of new instances of the related models.",2],["BelongsToMany::sync","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_sync","($ids, bool $detaching = true)","Sync the intermediate tables with a list of IDs or",2],["BelongsToMany::updateExistingPivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_updateExistingPivot","(mixed $id, array $attributes, bool $touch = true)","Update an existing pivot record on the table.",2],["BelongsToMany::attach","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_attach","(mixed $id, array $attributes = array(), bool $touch = true)","Attach a model to the parent.",2],["BelongsToMany::detach","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_detach","(int|array $ids = array(), bool $touch = true)","Detach models from the relationship.",2],["BelongsToMany::touchIfTouching","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_touchIfTouching","()","If we're touching the parent model, touch.",2],["BelongsToMany::newPivotStatement","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_newPivotStatement","()","Get a new plain query builder for the pivot table.",2],["BelongsToMany::newPivotStatementForId","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_newPivotStatementForId","(mixed $id)","Get a new pivot statement for a given \"other\" ID.",2],["BelongsToMany::newPivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_newPivot","(array $attributes = array(), bool $exists = false)","Create a new pivot model instance.",2],["BelongsToMany::newExistingPivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_newExistingPivot","(array $attributes = array())","Create a new existing pivot model instance.",2],["BelongsToMany::withPivot","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_withPivot","(mixed $columns)","Set the columns on the pivot table to retrieve.",2],["BelongsToMany::withTimestamps","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_withTimestamps","(mixed $createdAt = null, mixed $updatedAt = null)","Specify that the pivot table has creation and update",2],["BelongsToMany::getRelatedFreshUpdate","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelatedFreshUpdate","()","Get the related model's updated at column name.",2],["BelongsToMany::getHasCompareKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getHasCompareKey","()","Get the key for comparing against the parent key in",2],["BelongsToMany::getForeignKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getForeignKey","()","Get the fully qualified foreign key for the relation.",2],["BelongsToMany::getOtherKey","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getOtherKey","()","Get the fully qualified \"other key\" for the relation.",2],["BelongsToMany::getTable","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getTable","()","Get the intermediate table for the relationship.",2],["BelongsToMany::getRelationName","Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany","Illuminate\/Database\/Eloquent\/Relations\/BelongsToMany.html#method_getRelationName","()","Get the relationship name for the relationship.",2],["HasMany::getResults","Illuminate\\Database\\Eloquent\\Relations\\HasMany","Illuminate\/Database\/Eloquent\/Relations\/HasMany.html#method_getResults","()","Get the results of the relationship.",2],["HasMany::initRelation","Illuminate\\Database\\Eloquent\\Relations\\HasMany","Illuminate\/Database\/Eloquent\/Relations\/HasMany.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["HasMany::match","Illuminate\\Database\\Eloquent\\Relations\\HasMany","Illuminate\/Database\/Eloquent\/Relations\/HasMany.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["HasManyThrough::__construct","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $farParent, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, $firstKey, $secondKey)","Create a new has many relationship instance.",2],["HasManyThrough::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["HasManyThrough::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query.",2],["HasManyThrough::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["HasManyThrough::initRelation","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["HasManyThrough::match","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["HasManyThrough::getResults","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_getResults","()","Get the results of the relationship.",2],["HasManyThrough::get","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_get","(array $columns = array(&#039;*&#039;))","Execute the query as a \"select\" statement.",2],["HasManyThrough::paginate","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_paginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator for the \"select\" statement.",2],["HasManyThrough::getHasCompareKey","Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough","Illuminate\/Database\/Eloquent\/Relations\/HasManyThrough.html#method_getHasCompareKey","()","Get the key for comparing against the parent key in",2],["HasOne::getResults","Illuminate\\Database\\Eloquent\\Relations\\HasOne","Illuminate\/Database\/Eloquent\/Relations\/HasOne.html#method_getResults","()","Get the results of the relationship.",2],["HasOne::initRelation","Illuminate\\Database\\Eloquent\\Relations\\HasOne","Illuminate\/Database\/Eloquent\/Relations\/HasOne.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["HasOne::match","Illuminate\\Database\\Eloquent\\Relations\\HasOne","Illuminate\/Database\/Eloquent\/Relations\/HasOne.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["HasOneOrMany::__construct","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $foreignKey, string $localKey)","Create a new has many relationship instance.",2],["HasOneOrMany::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["HasOneOrMany::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["HasOneOrMany::matchOne","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_matchOne","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their single parents.",2],["HasOneOrMany::matchMany","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_matchMany","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their many parents.",2],["HasOneOrMany::save","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_save","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model)","Attach a model instance to the parent model.",2],["HasOneOrMany::saveMany","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_saveMany","(array $models)","Attach an array of models to the parent instance.",2],["HasOneOrMany::create","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_create","(array $attributes)","Create a new instance of the related model.",2],["HasOneOrMany::createMany","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_createMany","(array $records)","Create an array of new instances of the related model.",2],["HasOneOrMany::update","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_update","(array $attributes)","Perform an update on all the related models.",2],["HasOneOrMany::getHasCompareKey","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_getHasCompareKey","()","Get the key for comparing against the parent key in",2],["HasOneOrMany::getForeignKey","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_getForeignKey","()","Get the foreign key for the relationship.",2],["HasOneOrMany::getPlainForeignKey","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_getPlainForeignKey","()","Get the plain foreign key.",2],["HasOneOrMany::getParentKey","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_getParentKey","()","Get the key value of the parent's local key.",2],["HasOneOrMany::getQualifiedParentKeyName","Illuminate\\Database\\Eloquent\\Relations\\HasOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/HasOneOrMany.html#method_getQualifiedParentKeyName","()","Get the fully qualified parent key name.",2],["MorphMany::getResults","Illuminate\\Database\\Eloquent\\Relations\\MorphMany","Illuminate\/Database\/Eloquent\/Relations\/MorphMany.html#method_getResults","()","Get the results of the relationship.",2],["MorphMany::initRelation","Illuminate\\Database\\Eloquent\\Relations\\MorphMany","Illuminate\/Database\/Eloquent\/Relations\/MorphMany.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["MorphMany::match","Illuminate\\Database\\Eloquent\\Relations\\MorphMany","Illuminate\/Database\/Eloquent\/Relations\/MorphMany.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["MorphOne::getResults","Illuminate\\Database\\Eloquent\\Relations\\MorphOne","Illuminate\/Database\/Eloquent\/Relations\/MorphOne.html#method_getResults","()","Get the results of the relationship.",2],["MorphOne::initRelation","Illuminate\\Database\\Eloquent\\Relations\\MorphOne","Illuminate\/Database\/Eloquent\/Relations\/MorphOne.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["MorphOne::match","Illuminate\\Database\\Eloquent\\Relations\\MorphOne","Illuminate\/Database\/Eloquent\/Relations\/MorphOne.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["MorphOneOrMany::__construct","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $type, string $id, string $localKey)","Create a new has many relationship instance.",2],["MorphOneOrMany::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["MorphOneOrMany::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Get the relationship count query.",2],["MorphOneOrMany::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["MorphOneOrMany::save","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_save","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model)","Attach a model instance to the parent model.",2],["MorphOneOrMany::create","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_create","(array $attributes)","Create a new instance of the related model.",2],["MorphOneOrMany::getMorphType","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_getMorphType","()","Get the foreign key \"type\" name.",2],["MorphOneOrMany::getPlainMorphType","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_getPlainMorphType","()","Get the plain morph type name without the table.",2],["MorphOneOrMany::getMorphClass","Illuminate\\Database\\Eloquent\\Relations\\MorphOneOrMany","Illuminate\/Database\/Eloquent\/Relations\/MorphOneOrMany.html#method_getMorphClass","()","Get the class name of the parent model.",2],["MorphPivot::delete","Illuminate\\Database\\Eloquent\\Relations\\MorphPivot","Illuminate\/Database\/Eloquent\/Relations\/MorphPivot.html#method_delete","()","Delete the pivot model record from the database.",2],["MorphPivot::setMorphType","Illuminate\\Database\\Eloquent\\Relations\\MorphPivot","Illuminate\/Database\/Eloquent\/Relations\/MorphPivot.html#method_setMorphType","(string $morphType)","Set the morph type for the pivot.",2],["MorphPivot::setMorphClass","Illuminate\\Database\\Eloquent\\Relations\\MorphPivot","Illuminate\/Database\/Eloquent\/Relations\/MorphPivot.html#method_setMorphClass","(string $morphClass)","Set the morph class for the pivot.",2],["MorphTo::__construct","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $foreignKey, string $otherKey, string $type, string $relation)","Create a new belongs to relationship instance.",2],["MorphTo::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["MorphTo::match","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["MorphTo::associate","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_associate","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $model)","Associate the model instance to the given parent.",2],["MorphTo::getEager","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_getEager","()","Get the results of the relationship.",2],["MorphTo::createModelByType","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_createModelByType","(string $type)","Create a new model instance by type.",2],["MorphTo::getDictionary","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_getDictionary","()","Get the dictionary used by the relationship.",2],["MorphTo::withTrashed","Illuminate\\Database\\Eloquent\\Relations\\MorphTo","Illuminate\/Database\/Eloquent\/Relations\/MorphTo.html#method_withTrashed","()","Fetch soft-deleted model instances with query",2],["MorphToMany::__construct","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, string $name, string $table, string $foreignKey, string $otherKey, string $relationName = null, bool $inverse = false)","Create a new has many relationship instance.",2],["MorphToMany::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query.",2],["MorphToMany::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["MorphToMany::newPivot","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method_newPivot","(array $attributes = array(), bool $exists = false)","Create a new pivot model instance.",2],["MorphToMany::getMorphType","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method_getMorphType","()","Get the foreign key \"type\" name.",2],["MorphToMany::getMorphClass","Illuminate\\Database\\Eloquent\\Relations\\MorphToMany","Illuminate\/Database\/Eloquent\/Relations\/MorphToMany.html#method_getMorphClass","()","Get the class name of the parent model.",2],["Pivot::__construct","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent, array $attributes, string $table, bool $exists = false)","Create a new pivot model instance.",2],["Pivot::delete","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_delete","()","Delete the pivot model record from the database.",2],["Pivot::getForeignKey","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_getForeignKey","()","Get the foreign key column name.",2],["Pivot::getOtherKey","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_getOtherKey","()","Get the \"other key\" column name.",2],["Pivot::setPivotKeys","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_setPivotKeys","(string $foreignKey, string $otherKey)","Set the key names for the pivot model instance.",2],["Pivot::hasTimestampAttributes","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_hasTimestampAttributes","()","Determine if the pivot model has timestamp attributes.",2],["Pivot::getCreatedAtColumn","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_getCreatedAtColumn","()","Get the name of the \"created at\" column.",2],["Pivot::getUpdatedAtColumn","Illuminate\\Database\\Eloquent\\Relations\\Pivot","Illuminate\/Database\/Eloquent\/Relations\/Pivot.html#method_getUpdatedAtColumn","()","Get the name of the \"updated at\" column.",2],["Relation::__construct","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method___construct","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Model.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Model\">Model<\/abbr><\/a> $parent)","Create a new relation instance.",2],["Relation::addConstraints","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_addConstraints","()","Set the base constraints on the relation query.",2],["Relation::addEagerConstraints","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_addEagerConstraints","(array $models)","Set the constraints for an eager load of the relation.",2],["Relation::initRelation","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_initRelation","(array $models, string $relation)","Initialize the relation on a set of models.",2],["Relation::match","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_match","(array $models, <a href=\"Illuminate\/Database\/Eloquent\/Collection.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Collection\">Collection<\/abbr><\/a> $results, string $relation)","Match the eagerly loaded results to their parents.",2],["Relation::getResults","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getResults","()","Get the results of the relationship.",2],["Relation::getEager","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getEager","()","Get the relationship for eager loading.",2],["Relation::touch","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_touch","()","Touch all of the related models for the relationship.",2],["Relation::rawUpdate","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_rawUpdate","(array $attributes = array())","Run a raw update against the base query.",2],["Relation::getRelationCountQuery","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getRelationCountQuery","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $query, <a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $parent)","Add the constraints for a relationship count query.",2],["Relation::noConstraints","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_noConstraints","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Run a callback with constraints disabled on the relation.",2],["Relation::getQuery","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getQuery","()","Get the underlying query for the relation.",2],["Relation::getBaseQuery","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getBaseQuery","()","Get the base query builder driving the Eloquent builder.",2],["Relation::getParent","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getParent","()","Get the parent model of the relation.",2],["Relation::getRelated","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_getRelated","()","Get the related model of the relation.",2],["Relation::createdAt","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_createdAt","()","Get the name of the \"created at\" column.",2],["Relation::updatedAt","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_updatedAt","()","Get the name of the \"updated at\" column.",2],["Relation::relatedUpdatedAt","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_relatedUpdatedAt","()","Get the name of the related model's \"updated at\" column.",2],["Relation::wrap","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method_wrap","(string $value)","Wrap the given value with the parent query's grammar.",2],["Relation::__call","Illuminate\\Database\\Eloquent\\Relations\\Relation","Illuminate\/Database\/Eloquent\/Relations\/Relation.html#method___call","(string $method, array $parameters)","Handle dynamic method calls to the relationship.",2],["ScopeInterface::apply","Illuminate\\Database\\Eloquent\\ScopeInterface","Illuminate\/Database\/Eloquent\/ScopeInterface.html#method_apply","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Apply the scope to a given Eloquent query builder.",2],["ScopeInterface::remove","Illuminate\\Database\\Eloquent\\ScopeInterface","Illuminate\/Database\/Eloquent\/ScopeInterface.html#method_remove","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Remove the scope from the given Eloquent query builder.",2],["SoftDeletingScope::apply","Illuminate\\Database\\Eloquent\\SoftDeletingScope","Illuminate\/Database\/Eloquent\/SoftDeletingScope.html#method_apply","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Apply the scope to a given Eloquent query builder.",2],["SoftDeletingScope::remove","Illuminate\\Database\\Eloquent\\SoftDeletingScope","Illuminate\/Database\/Eloquent\/SoftDeletingScope.html#method_remove","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Remove the scope from the given Eloquent query builder.",2],["SoftDeletingScope::extend","Illuminate\\Database\\Eloquent\\SoftDeletingScope","Illuminate\/Database\/Eloquent\/SoftDeletingScope.html#method_extend","(<a href=\"Illuminate\/Database\/Eloquent\/Builder.html\"><abbr title=\"Illuminate\\Database\\Eloquent\\Builder\">Builder<\/abbr><\/a> $builder)","Extend the query builder with the needed functions.",2],["SoftDeletingTrait::bootSoftDeletingTrait","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_bootSoftDeletingTrait","()","Boot the soft deleting trait for a model.",2],["SoftDeletingTrait::forceDelete","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_forceDelete","()","Force a hard delete on a soft deleted model.",2],["SoftDeletingTrait::restore","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_restore","()","Restore a soft-deleted model instance.",2],["SoftDeletingTrait::trashed","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_trashed","()","Determine if the model instance has been soft-deleted.",2],["SoftDeletingTrait::withTrashed","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_withTrashed","()","Get a new query builder that includes soft deletes.",2],["SoftDeletingTrait::onlyTrashed","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_onlyTrashed","()","Get a new query builder that only includes soft deletes.",2],["SoftDeletingTrait::restoring","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_restoring","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a restoring model event with the dispatcher.",2],["SoftDeletingTrait::restored","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_restored","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a restored model event with the dispatcher.",2],["SoftDeletingTrait::getDeletedAtColumn","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_getDeletedAtColumn","()","Get the name of the \"deleted at\" column.",2],["SoftDeletingTrait::getQualifiedDeletedAtColumn","Illuminate\\Database\\Eloquent\\SoftDeletingTrait","Illuminate\/Database\/Eloquent\/SoftDeletingTrait.html#method_getQualifiedDeletedAtColumn","()","Get the fully qualified \"deleted at\" column.",2],["Grammar::wrapArray","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_wrapArray","(array $values)","Wrap an array of values.",2],["Grammar::wrapTable","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_wrapTable","(string $table)","Wrap a table in keyword identifiers.",2],["Grammar::wrap","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_wrap","(string $value)","Wrap a value in keyword identifiers.",2],["Grammar::columnize","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_columnize","(array $columns)","Convert an array of column names into a delimited string.",2],["Grammar::parameterize","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_parameterize","(array $values)","Create query parameter place-holders for an array.",2],["Grammar::parameter","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_parameter","(mixed $value)","Get the appropriate query parameter place-holder for",2],["Grammar::getValue","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_getValue","(<a href=\"Illuminate\/Database\/Query\/Expression.html\"><abbr title=\"Illuminate\\Database\\Query\\Expression\">Expression<\/abbr><\/a> $expression)","Get the value of a raw expression.",2],["Grammar::isExpression","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_isExpression","(mixed $value)","Determine if the given value is a raw expression.",2],["Grammar::getDateFormat","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_getDateFormat","()","Get the format for database stored dates.",2],["Grammar::getTablePrefix","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_getTablePrefix","()","Get the grammar's table prefix.",2],["Grammar::setTablePrefix","Illuminate\\Database\\Grammar","Illuminate\/Database\/Grammar.html#method_setTablePrefix","(string $prefix)","Set the grammar's table prefix.",2],["MigrationServiceProvider::register","Illuminate\\Database\\MigrationServiceProvider","Illuminate\/Database\/MigrationServiceProvider.html#method_register","()","Register the service provider.",2],["MigrationServiceProvider::provides","Illuminate\\Database\\MigrationServiceProvider","Illuminate\/Database\/MigrationServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["DatabaseMigrationRepository::__construct","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method___construct","(<a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $resolver, string $table)","Create a new database migration repository instance.",2],["DatabaseMigrationRepository::getRan","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getRan","()","Get the ran migrations for a given package.",2],["DatabaseMigrationRepository::getLast","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getLast","()","Get the last migration batch.",2],["DatabaseMigrationRepository::log","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_log","(string $file, int $batch)","Log that a migration was run.",2],["DatabaseMigrationRepository::delete","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_delete","(object $migration)","Remove a migration from the log.",2],["DatabaseMigrationRepository::getNextBatchNumber","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getNextBatchNumber","()","Get the next migration batch number.",2],["DatabaseMigrationRepository::getLastBatchNumber","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getLastBatchNumber","()","Get the last migration batch number.",2],["DatabaseMigrationRepository::createRepository","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_createRepository","()","Create the migration repository data store.",2],["DatabaseMigrationRepository::repositoryExists","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_repositoryExists","()","Determine if the migration repository exists.",2],["DatabaseMigrationRepository::getConnectionResolver","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getConnectionResolver","()","Get the connection resolver instance.",2],["DatabaseMigrationRepository::getConnection","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_getConnection","()","Resolve the database connection instance.",2],["DatabaseMigrationRepository::setSource","Illuminate\\Database\\Migrations\\DatabaseMigrationRepository","Illuminate\/Database\/Migrations\/DatabaseMigrationRepository.html#method_setSource","(string $name)","Set the information source to gather data.",2],["Migration::getConnection","Illuminate\\Database\\Migrations\\Migration","Illuminate\/Database\/Migrations\/Migration.html#method_getConnection","()","Get the migration connection name.",2],["MigrationCreator::__construct","Illuminate\\Database\\Migrations\\MigrationCreator","Illuminate\/Database\/Migrations\/MigrationCreator.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new migration creator instance.",2],["MigrationCreator::create","Illuminate\\Database\\Migrations\\MigrationCreator","Illuminate\/Database\/Migrations\/MigrationCreator.html#method_create","(string $name, string $path, string $table = null, bool $create = false)","Create a new migration at the given path.",2],["MigrationCreator::afterCreate","Illuminate\\Database\\Migrations\\MigrationCreator","Illuminate\/Database\/Migrations\/MigrationCreator.html#method_afterCreate","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a post migration create hook.",2],["MigrationCreator::getStubPath","Illuminate\\Database\\Migrations\\MigrationCreator","Illuminate\/Database\/Migrations\/MigrationCreator.html#method_getStubPath","()","Get the path to the stubs.",2],["MigrationCreator::getFilesystem","Illuminate\\Database\\Migrations\\MigrationCreator","Illuminate\/Database\/Migrations\/MigrationCreator.html#method_getFilesystem","()","Get the filesystem instance.",2],["MigrationRepositoryInterface::getRan","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_getRan","()","Get the ran migrations for a given package.",2],["MigrationRepositoryInterface::getLast","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_getLast","()","Get the last migration batch.",2],["MigrationRepositoryInterface::log","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_log","(string $file, int $batch)","Log that a migration was run.",2],["MigrationRepositoryInterface::delete","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_delete","(object $migration)","Remove a migration from the log.",2],["MigrationRepositoryInterface::getNextBatchNumber","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_getNextBatchNumber","()","Get the next migration batch number.",2],["MigrationRepositoryInterface::createRepository","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_createRepository","()","Create the migration repository data store.",2],["MigrationRepositoryInterface::repositoryExists","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_repositoryExists","()","Determine if the migration repository exists.",2],["MigrationRepositoryInterface::setSource","Illuminate\\Database\\Migrations\\MigrationRepositoryInterface","Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html#method_setSource","(string $name)","Set the information source to gather data.",2],["Migrator::__construct","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method___construct","(<a href=\"Illuminate\/Database\/Migrations\/MigrationRepositoryInterface.html\"><abbr title=\"Illuminate\\Database\\Migrations\\MigrationRepositoryInterface\">MigrationRepositoryInterface<\/abbr><\/a> $repository, <a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $resolver, <a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new migrator instance.",2],["Migrator::run","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_run","(string $path, bool $pretend = false)","Run the outstanding migrations at a given path.",2],["Migrator::runMigrationList","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_runMigrationList","(array $migrations, bool $pretend = false)","Run an array of migrations.",2],["Migrator::rollback","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_rollback","(bool $pretend = false)","Rollback the last migration operation.",2],["Migrator::getMigrationFiles","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_getMigrationFiles","(string $path)","Get all of the migration files in a given path.",2],["Migrator::requireFiles","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_requireFiles","(string $path, array $files)","Require in all the migration files in a given path.",2],["Migrator::resolve","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_resolve","(string $file)","Resolve a migration instance from a file.",2],["Migrator::getNotes","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_getNotes","()","Get the notes for the last operation.",2],["Migrator::resolveConnection","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_resolveConnection","(string $connection)","Resolve the database connection instance.",2],["Migrator::setConnection","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_setConnection","(string $name)","Set the default connection name.",2],["Migrator::getRepository","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_getRepository","()","Get the migration repository instance.",2],["Migrator::repositoryExists","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_repositoryExists","()","Determine if the migration repository exists.",2],["Migrator::getFilesystem","Illuminate\\Database\\Migrations\\Migrator","Illuminate\/Database\/Migrations\/Migrator.html#method_getFilesystem","()","Get the file system instance.",2],["MySqlConnection::getSchemaBuilder","Illuminate\\Database\\MySqlConnection","Illuminate\/Database\/MySqlConnection.html#method_getSchemaBuilder","()","Get a schema builder instance for the connection.",2],["QueryException::__construct","Illuminate\\Database\\QueryException","Illuminate\/Database\/QueryException.html#method___construct","(string $sql, array $bindings, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous)","Create a new query exception instance.",2],["QueryException::getSql","Illuminate\\Database\\QueryException","Illuminate\/Database\/QueryException.html#method_getSql","()","Get the SQL for the query.",2],["QueryException::getBindings","Illuminate\\Database\\QueryException","Illuminate\/Database\/QueryException.html#method_getBindings","()","Get the bindings for the query.",2],["Builder::__construct","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method___construct","(<a href=\"Illuminate\/Database\/ConnectionInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionInterface\">ConnectionInterface<\/abbr><\/a> $connection, <a href=\"Illuminate\/Database\/Query\/Grammars\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Query\\Grammars\\Grammar\">Grammar<\/abbr><\/a> $grammar, <a href=\"Illuminate\/Database\/Query\/Processors\/Processor.html\"><abbr title=\"Illuminate\\Database\\Query\\Processors\\Processor\">Processor<\/abbr><\/a> $processor)","Create a new query builder instance.",2],["Builder::select","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_select","(array $columns = array(&#039;*&#039;))","Set the columns to be selected.",2],["Builder::selectRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_selectRaw","(string $expression)","Add a new \"raw\" select expression to the query.",2],["Builder::addSelect","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_addSelect","(mixed $column)","Add a new select column to the query.",2],["Builder::distinct","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_distinct","()","Force the query to only return distinct results.",2],["Builder::from","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_from","(string $table)","Set the table which the query is targeting.",2],["Builder::join","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_join","(string $table, string $one, string $operator = null, string $two = null, string $type = &#039;inner&#039;, bool $where = false)","Add a join clause to the query.",2],["Builder::joinWhere","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_joinWhere","(string $table, string $one, string $operator, string $two, string $type = &#039;inner&#039;)","Add a \"join where\" clause to the query.",2],["Builder::leftJoin","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_leftJoin","(string $table, string $first, string $operator = null, string $second = null)","Add a left join to the query.",2],["Builder::leftJoinWhere","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_leftJoinWhere","(string $table, string $one, string $operator, string $two)","Add a \"join where\" clause to the query.",2],["Builder::rightJoin","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_rightJoin","(string $table, string $first, string $operator = null, string $second = null)","Add a right join to the query.",2],["Builder::rightJoinWhere","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_rightJoinWhere","(string $table, string $one, string $operator, string $two)","Add a \"right join where\" clause to the query.",2],["Builder::where","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_where","(string $column, string $operator = null, mixed $value = null, string $boolean = &#039;and&#039;)","Add a basic where clause to the query.",2],["Builder::orWhere","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhere","(string $column, string $operator = null, mixed $value = null)","Add an \"or where\" clause to the query.",2],["Builder::whereRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereRaw","(string $sql, array $bindings = array(), string $boolean = &#039;and&#039;)","Add a raw where clause to the query.",2],["Builder::orWhereRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereRaw","(string $sql, array $bindings = array())","Add a raw or where clause to the query.",2],["Builder::whereBetween","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereBetween","(string $column, array $values, string $boolean = &#039;and&#039;, bool $not = false)","Add a where between statement to the query.",2],["Builder::orWhereBetween","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereBetween","(string $column, array $values)","Add an or where between statement to the query.",2],["Builder::whereNotBetween","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNotBetween","(string $column, array $values, string $boolean = &#039;and&#039;)","Add a where not between statement to the query.",2],["Builder::orWhereNotBetween","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereNotBetween","(string $column, array $values)","Add an or where not between statement to the query.",2],["Builder::whereNested","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNested","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, string $boolean = &#039;and&#039;)","Add a nested where statement to the query.",2],["Builder::addNestedWhereQuery","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_addNestedWhereQuery","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a>|<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, string $boolean = &#039;and&#039;)","Add another query builder as a nested where to the",2],["Builder::whereExists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereExists","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, string $boolean = &#039;and&#039;, bool $not = false)","Add an exists clause to the query.",2],["Builder::orWhereExists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereExists","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, bool $not = false)","Add an or exists clause to the query.",2],["Builder::whereNotExists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNotExists","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, string $boolean = &#039;and&#039;)","Add a where not exists clause to the query.",2],["Builder::orWhereNotExists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereNotExists","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Add a where not exists clause to the query.",2],["Builder::whereIn","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereIn","(string $column, mixed $values, string $boolean = &#039;and&#039;, bool $not = false)","Add a \"where in\" clause to the query.",2],["Builder::orWhereIn","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereIn","(string $column, mixed $values)","Add an \"or where in\" clause to the query.",2],["Builder::whereNotIn","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNotIn","(string $column, mixed $values, string $boolean = &#039;and&#039;)","Add a \"where not in\" clause to the query.",2],["Builder::orWhereNotIn","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereNotIn","(string $column, mixed $values)","Add an \"or where not in\" clause to the query.",2],["Builder::whereNull","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNull","(string $column, string $boolean = &#039;and&#039;, bool $not = false)","Add a \"where null\" clause to the query.",2],["Builder::orWhereNull","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereNull","(string $column)","Add an \"or where null\" clause to the query.",2],["Builder::whereNotNull","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereNotNull","(string $column, string $boolean = &#039;and&#039;)","Add a \"where not null\" clause to the query.",2],["Builder::orWhereNotNull","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orWhereNotNull","(string $column)","Add an \"or where not null\" clause to the query.",2],["Builder::whereDay","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereDay","(string $column, string $operator, int $value, string $boolean = &#039;and&#039;)","Add a \"where day\" statement to the query.",2],["Builder::whereMonth","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereMonth","(string $column, string $operator, int $value, string $boolean = &#039;and&#039;)","Add a \"where month\" statement to the query.",2],["Builder::whereYear","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_whereYear","(string $column, string $operator, int $value, string $boolean = &#039;and&#039;)","Add a \"where year\" statement to the query.",2],["Builder::dynamicWhere","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_dynamicWhere","(string $method, string $parameters)","Handles dynamic \"where\" clauses to the query.",2],["Builder::groupBy","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_groupBy","()","Add a \"group by\" clause to the query.",2],["Builder::having","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_having","(string $column, string $operator = null, string $value = null, string $boolean = &#039;and&#039;)","Add a \"having\" clause to the query.",2],["Builder::orHaving","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orHaving","(string $column, string $operator = null, string $value = null)","Add a \"or having\" clause to the query.",2],["Builder::havingRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_havingRaw","(string $sql, array $bindings = array(), string $boolean = &#039;and&#039;)","Add a raw having clause to the query.",2],["Builder::orHavingRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orHavingRaw","(string $sql, array $bindings = array())","Add a raw or having clause to the query.",2],["Builder::orderBy","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orderBy","(string $column, string $direction = &#039;asc&#039;)","Add an \"order by\" clause to the query.",2],["Builder::latest","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_latest","(string $column = &#039;created_at&#039;)","Add an \"order by\" clause for a timestamp to the query.",2],["Builder::oldest","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_oldest","(string $column = &#039;created_at&#039;)","Add an \"order by\" clause for a timestamp to the query.",2],["Builder::orderByRaw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_orderByRaw","(string $sql, array $bindings = array())","Add a raw \"order by\" clause to the query.",2],["Builder::offset","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_offset","(int $value)","Set the \"offset\" value of the query.",2],["Builder::skip","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_skip","(int $value)","Alias to set the \"offset\" value of the query.",2],["Builder::limit","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_limit","(int $value)","Set the \"limit\" value of the query.",2],["Builder::take","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_take","(int $value)","Alias to set the \"limit\" value of the query.",2],["Builder::forPage","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_forPage","(int $page, int $perPage = 15)","Set the limit and offset for a given page.",2],["Builder::union","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_union","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $query, bool $all = false)","Add a union statement to the query.",2],["Builder::unionAll","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_unionAll","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $query)","Add a union all statement to the query.",2],["Builder::lock","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_lock","(bool $value = true)","Lock the selected rows in the table.",2],["Builder::lockForUpdate","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_lockForUpdate","()","Lock the selected rows in the table for updating.",2],["Builder::sharedLock","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_sharedLock","()","Share lock the selected rows in the table.",2],["Builder::toSql","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_toSql","()","Get the SQL representation of the query.",2],["Builder::remember","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_remember","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $minutes, string $key = null)","Indicate that the query results should be cached.",2],["Builder::rememberForever","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_rememberForever","(string $key = null)","Indicate that the query results should be cached forever.",2],["Builder::cacheTags","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_cacheTags","(array|mixed $cacheTags)","Indicate that the results, if cached, should use the",2],["Builder::cacheDriver","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_cacheDriver","(string $cacheDriver)","Indicate that the results, if cached, should use the",2],["Builder::find","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_find","(int $id, array $columns = array(&#039;*&#039;))","Execute a query for a single record by ID.",2],["Builder::pluck","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_pluck","(string $column)","Pluck a single column's value from the first result",2],["Builder::first","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_first","(array $columns = array(&#039;*&#039;))","Execute the query and get the first result.",2],["Builder::get","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_get","(array $columns = array(&#039;*&#039;))","Execute the query as a \"select\" statement.",2],["Builder::getFresh","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getFresh","(array $columns = array(&#039;*&#039;))","Execute the query as a fresh \"select\" statement.",2],["Builder::getCached","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getCached","(array $columns = array(&#039;*&#039;))","Execute the query as a cached \"select\" statement.",2],["Builder::getCacheKey","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getCacheKey","()","Get a unique cache key for the complete query.",2],["Builder::generateCacheKey","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_generateCacheKey","()","Generate the unique cache key for the query.",2],["Builder::chunk","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_chunk","(int $count, callable $callback)","Chunk the results of the query.",2],["Builder::lists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_lists","(string $column, string $key = null)","Get an array with the values of a given column.",2],["Builder::implode","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_implode","(string $column, string $glue = null)","Concatenate values of a given column as a string.",2],["Builder::paginate","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_paginate","(int $perPage = 15, array $columns = array(&#039;*&#039;))","Get a paginator for the \"select\" statement.",2],["Builder::buildRawPaginator","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_buildRawPaginator","(<a href=\"Illuminate\/Pagination\/Factory.html\"><abbr title=\"Illuminate\\Pagination\\Factory\">Factory<\/abbr><\/a> $paginator, array $results, int $perPage)","Build a paginator instance from a raw result array.",2],["Builder::getPaginationCount","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getPaginationCount","()","Get the count of the total records for pagination.",2],["Builder::simplePaginate","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_simplePaginate","(int $perPage = null, array $columns = array(&#039;*&#039;))","Get a paginator only supporting simple next and previous",2],["Builder::exists","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_exists","()","Determine if any rows exist for the current query.",2],["Builder::count","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_count","(string $columns = &#039;*&#039;)","Retrieve the \"count\" result of the query.",2],["Builder::min","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_min","(string $column)","Retrieve the minimum value of a given column.",2],["Builder::max","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_max","(string $column)","Retrieve the maximum value of a given column.",2],["Builder::sum","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_sum","(string $column)","Retrieve the sum of the values of a given column.",2],["Builder::avg","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_avg","(string $column)","Retrieve the average of the values of a given column.",2],["Builder::aggregate","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_aggregate","(string $function, array $columns = array(&#039;*&#039;))","Execute an aggregate function on the database.",2],["Builder::insert","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_insert","(array $values)","Insert a new record into the database.",2],["Builder::insertGetId","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_insertGetId","(array $values, string $sequence = null)","Insert a new record and get the value of the primary",2],["Builder::update","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_update","(array $values)","Update a record in the database.",2],["Builder::increment","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_increment","(string $column, int $amount = 1, array $extra = array())","Increment a column's value by a given amount.",2],["Builder::decrement","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_decrement","(string $column, int $amount = 1, array $extra = array())","Decrement a column's value by a given amount.",2],["Builder::delete","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_delete","(mixed $id = null)","Delete a record from the database.",2],["Builder::truncate","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_truncate","()","Run a truncate statement on the table.",2],["Builder::newQuery","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_newQuery","()","Get a new instance of the query builder.",2],["Builder::mergeWheres","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_mergeWheres","(array $wheres, array $bindings)","Merge an array of where clauses and bindings.",2],["Builder::raw","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_raw","(mixed $value)","Create a raw database expression.",2],["Builder::getBindings","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getBindings","()","Get the current query value bindings in a flattened",2],["Builder::getRawBindings","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getRawBindings","()","Get the raw array of bindings.",2],["Builder::setBindings","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_setBindings","(array $bindings, string $type = &#039;where&#039;)","Set the bindings on the query builder.",2],["Builder::addBinding","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_addBinding","(mixed $value, string $type = &#039;where&#039;)","Add a binding to the query.",2],["Builder::mergeBindings","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_mergeBindings","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Merge an array of bindings into our bindings.",2],["Builder::getConnection","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getConnection","()","Get the database connection instance.",2],["Builder::getProcessor","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getProcessor","()","Get the database query processor instance.",2],["Builder::getGrammar","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method_getGrammar","()","Get the query grammar instance.",2],["Builder::__call","Illuminate\\Database\\Query\\Builder","Illuminate\/Database\/Query\/Builder.html#method___call","(string $method, array $parameters)","Handle dynamic method calls into the method.",2],["Expression::__construct","Illuminate\\Database\\Query\\Expression","Illuminate\/Database\/Query\/Expression.html#method___construct","(mixed $value)","Create a new raw query expression.",2],["Expression::getValue","Illuminate\\Database\\Query\\Expression","Illuminate\/Database\/Query\/Expression.html#method_getValue","()","Get the value of the expression.",2],["Expression::__toString","Illuminate\\Database\\Query\\Expression","Illuminate\/Database\/Query\/Expression.html#method___toString","()","Get the value of the expression.",2],["Grammar::compileSelect","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileSelect","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a select query into SQL.",2],["Grammar::compileInsert","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileInsert","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values)","Compile an insert statement into SQL.",2],["Grammar::compileInsertGetId","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileInsertGetId","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values, string $sequence)","Compile an insert and get ID statement into SQL.",2],["Grammar::compileUpdate","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileUpdate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values)","Compile an update statement into SQL.",2],["Grammar::compileDelete","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileDelete","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a delete statement into SQL.",2],["Grammar::compileTruncate","Illuminate\\Database\\Query\\Grammars\\Grammar","Illuminate\/Database\/Query\/Grammars\/Grammar.html#method_compileTruncate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a truncate table statement into SQL.",2],["MySqlGrammar::compileSelect","Illuminate\\Database\\Query\\Grammars\\MySqlGrammar","Illuminate\/Database\/Query\/Grammars\/MySqlGrammar.html#method_compileSelect","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a select query into SQL.",2],["MySqlGrammar::compileUpdate","Illuminate\\Database\\Query\\Grammars\\MySqlGrammar","Illuminate\/Database\/Query\/Grammars\/MySqlGrammar.html#method_compileUpdate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values)","Compile an update statement into SQL.",2],["MySqlGrammar::compileDelete","Illuminate\\Database\\Query\\Grammars\\MySqlGrammar","Illuminate\/Database\/Query\/Grammars\/MySqlGrammar.html#method_compileDelete","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a delete statement into SQL.",2],["PostgresGrammar::compileUpdate","Illuminate\\Database\\Query\\Grammars\\PostgresGrammar","Illuminate\/Database\/Query\/Grammars\/PostgresGrammar.html#method_compileUpdate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values)","Compile an update statement into SQL.",2],["PostgresGrammar::compileInsertGetId","Illuminate\\Database\\Query\\Grammars\\PostgresGrammar","Illuminate\/Database\/Query\/Grammars\/PostgresGrammar.html#method_compileInsertGetId","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values, string $sequence)","Compile an insert and get ID statement into SQL.",2],["PostgresGrammar::compileTruncate","Illuminate\\Database\\Query\\Grammars\\PostgresGrammar","Illuminate\/Database\/Query\/Grammars\/PostgresGrammar.html#method_compileTruncate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a truncate table statement into SQL.",2],["SQLiteGrammar::compileInsert","Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Query\/Grammars\/SQLiteGrammar.html#method_compileInsert","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $values)","Compile an insert statement into SQL.",2],["SQLiteGrammar::compileTruncate","Illuminate\\Database\\Query\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Query\/Grammars\/SQLiteGrammar.html#method_compileTruncate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a truncate table statement into SQL.",2],["SqlServerGrammar::compileSelect","Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Query\/Grammars\/SqlServerGrammar.html#method_compileSelect","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a select query into SQL.",2],["SqlServerGrammar::compileTruncate","Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Query\/Grammars\/SqlServerGrammar.html#method_compileTruncate","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query)","Compile a truncate table statement into SQL.",2],["SqlServerGrammar::getDateFormat","Illuminate\\Database\\Query\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Query\/Grammars\/SqlServerGrammar.html#method_getDateFormat","()","Get the format for database stored dates.",2],["JoinClause::__construct","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method___construct","(string $type, string $table)","Create a new join clause instance.",2],["JoinClause::on","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method_on","(string $first, string $operator, string $second, string $boolean = &#039;and&#039;, bool $where = false)","Add an \"on\" clause to the join.",2],["JoinClause::orOn","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method_orOn","(string $first, string $operator, string $second)","Add an \"or on\" clause to the join.",2],["JoinClause::where","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method_where","(string $first, string $operator, string $second, string $boolean = &#039;and&#039;)","Add an \"on where\" clause to the join.",2],["JoinClause::orWhere","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method_orWhere","(string $first, string $operator, string $second)","Add an \"or on where\" clause to the join.",2],["JoinClause::whereNull","Illuminate\\Database\\Query\\JoinClause","Illuminate\/Database\/Query\/JoinClause.html#method_whereNull","($column, string $boolean = &#039;and&#039;)","Add an \"on where is null\" clause to the join",2],["MySqlProcessor::processColumnListing","Illuminate\\Database\\Query\\Processors\\MySqlProcessor","Illuminate\/Database\/Query\/Processors\/MySqlProcessor.html#method_processColumnListing","(array $results)","Process the results of a column listing query.",2],["PostgresProcessor::processInsertGetId","Illuminate\\Database\\Query\\Processors\\PostgresProcessor","Illuminate\/Database\/Query\/Processors\/PostgresProcessor.html#method_processInsertGetId","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, string $sql, array $values, string $sequence = null)","Process an \"insert get ID\" query.",2],["PostgresProcessor::processColumnListing","Illuminate\\Database\\Query\\Processors\\PostgresProcessor","Illuminate\/Database\/Query\/Processors\/PostgresProcessor.html#method_processColumnListing","(array $results)","Process the results of a column listing query.",2],["Processor::processSelect","Illuminate\\Database\\Query\\Processors\\Processor","Illuminate\/Database\/Query\/Processors\/Processor.html#method_processSelect","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, array $results)","Process the results of a \"select\" query.",2],["Processor::processInsertGetId","Illuminate\\Database\\Query\\Processors\\Processor","Illuminate\/Database\/Query\/Processors\/Processor.html#method_processInsertGetId","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, string $sql, array $values, string $sequence = null)","Process an  \"insert get ID\" query.",2],["Processor::processColumnListing","Illuminate\\Database\\Query\\Processors\\Processor","Illuminate\/Database\/Query\/Processors\/Processor.html#method_processColumnListing","(array $results)","Process the results of a column listing query.",2],["SQLiteProcessor::processColumnListing","Illuminate\\Database\\Query\\Processors\\SQLiteProcessor","Illuminate\/Database\/Query\/Processors\/SQLiteProcessor.html#method_processColumnListing","(array $results)","Process the results of a column listing query.",2],["SqlServerProcessor::processInsertGetId","Illuminate\\Database\\Query\\Processors\\SqlServerProcessor","Illuminate\/Database\/Query\/Processors\/SqlServerProcessor.html#method_processInsertGetId","(<a href=\"Illuminate\/Database\/Query\/Builder.html\"><abbr title=\"Illuminate\\Database\\Query\\Builder\">Builder<\/abbr><\/a> $query, string $sql, array $values, string $sequence = null)","Process an  \"insert get ID\" query.",2],["SqlServerProcessor::processColumnListing","Illuminate\\Database\\Query\\Processors\\SqlServerProcessor","Illuminate\/Database\/Query\/Processors\/SqlServerProcessor.html#method_processColumnListing","(array $results)","Process the results of a column listing query.",2],["Blueprint::__construct","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method___construct","(string $table, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Create a new schema blueprint.",2],["Blueprint::build","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_build","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection, <a href=\"Illuminate\/Database\/Schema\/Grammars\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Schema\\Grammars\\Grammar\">Grammar<\/abbr><\/a> $grammar)","Execute the blueprint against the database.",2],["Blueprint::toSql","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_toSql","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection, <a href=\"Illuminate\/Database\/Schema\/Grammars\/Grammar.html\"><abbr title=\"Illuminate\\Database\\Schema\\Grammars\\Grammar\">Grammar<\/abbr><\/a> $grammar)","Get the raw SQL statements for the blueprint.",2],["Blueprint::create","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_create","()","Indicate that the table needs to be created.",2],["Blueprint::drop","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_drop","()","Indicate that the table should be dropped.",2],["Blueprint::dropIfExists","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropIfExists","()","Indicate that the table should be dropped if it exists.",2],["Blueprint::dropColumn","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropColumn","(string|array $columns)","Indicate that the given columns should be dropped.",2],["Blueprint::renameColumn","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_renameColumn","(string $from, string $to)","Indicate that the given columns should be renamed.",2],["Blueprint::dropPrimary","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropPrimary","(string|array $index = null)","Indicate that the given primary key should be dropped.",2],["Blueprint::dropUnique","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropUnique","(string|array $index)","Indicate that the given unique key should be dropped.",2],["Blueprint::dropIndex","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropIndex","(string|array $index)","Indicate that the given index should be dropped.",2],["Blueprint::dropForeign","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropForeign","(string $index)","Indicate that the given foreign key should be dropped.",2],["Blueprint::dropTimestamps","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropTimestamps","()","Indicate that the timestamp columns should be dropped.",2],["Blueprint::dropSoftDeletes","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dropSoftDeletes","()","Indicate that the soft delete column should be dropped.",2],["Blueprint::rename","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_rename","(string $to)","Rename the table to a given name.",2],["Blueprint::primary","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_primary","(string|array $columns, string $name = null)","Specify the primary key(s) for the table.",2],["Blueprint::unique","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_unique","(string|array $columns, string $name = null)","Specify a unique index for the table.",2],["Blueprint::index","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_index","(string|array $columns, string $name = null)","Specify an index for the table.",2],["Blueprint::foreign","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_foreign","(string|array $columns, string $name = null)","Specify a foreign key for the table.",2],["Blueprint::increments","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_increments","(string $column)","Create a new auto-incrementing integer column on the",2],["Blueprint::bigIncrements","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_bigIncrements","(string $column)","Create a new auto-incrementing big integer column on",2],["Blueprint::char","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_char","(string $column, int $length = 255)","Create a new char column on the table.",2],["Blueprint::string","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_string","(string $column, int $length = 255)","Create a new string column on the table.",2],["Blueprint::text","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_text","(string $column)","Create a new text column on the table.",2],["Blueprint::mediumText","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_mediumText","(string $column)","Create a new medium text column on the table.",2],["Blueprint::longText","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_longText","(string $column)","Create a new long text column on the table.",2],["Blueprint::integer","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_integer","(string $column, bool $autoIncrement = false, bool $unsigned = false)","Create a new integer column on the table.",2],["Blueprint::bigInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_bigInteger","(string $column, bool $autoIncrement = false, bool $unsigned = false)","Create a new big integer column on the table.",2],["Blueprint::mediumInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_mediumInteger","(string $column, bool $autoIncrement = false, bool $unsigned = false)","Create a new medium integer column on the table.",2],["Blueprint::tinyInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_tinyInteger","(string $column, bool $autoIncrement = false, bool $unsigned = false)","Create a new tiny integer column on the table.",2],["Blueprint::smallInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_smallInteger","(string $column, bool $autoIncrement = false, bool $unsigned = false)","Create a new small integer column on the table.",2],["Blueprint::unsignedInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_unsignedInteger","(string $column, bool $autoIncrement = false)","Create a new unsigned integer column on the table.",2],["Blueprint::unsignedBigInteger","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_unsignedBigInteger","(string $column, bool $autoIncrement = false)","Create a new unsigned big integer column on the table.",2],["Blueprint::float","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_float","(string $column, int $total = 8, int $places = 2)","Create a new float column on the table.",2],["Blueprint::double","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_double","(string $column, int|null $total = null, int|null $places = null)","Create a new double column on the table.",2],["Blueprint::decimal","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_decimal","(string $column, int $total = 8, int $places = 2)","Create a new decimal column on the table.",2],["Blueprint::boolean","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_boolean","(string $column)","Create a new boolean column on the table.",2],["Blueprint::enum","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_enum","(string $column, array $allowed)","Create a new enum column on the table.",2],["Blueprint::date","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_date","(string $column)","Create a new date column on the table.",2],["Blueprint::dateTime","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_dateTime","(string $column)","Create a new date-time column on the table.",2],["Blueprint::time","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_time","(string $column)","Create a new time column on the table.",2],["Blueprint::timestamp","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_timestamp","(string $column)","Create a new timestamp column on the table.",2],["Blueprint::nullableTimestamps","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_nullableTimestamps","()","Add nullable creation and update timestamps to the",2],["Blueprint::timestamps","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_timestamps","()","Add creation and update timestamps to the table.",2],["Blueprint::softDeletes","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_softDeletes","()","Add a \"deleted at\" timestamp for the table.",2],["Blueprint::binary","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_binary","(string $column)","Create a new binary column on the table.",2],["Blueprint::morphs","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_morphs","($name, $indexName = null)","Add the proper columns for a polymorphic table.",2],["Blueprint::rememberToken","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_rememberToken","()","Adds the `remember_token` column to the table.",2],["Blueprint::removeColumn","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_removeColumn","(string $name)","Remove a column from the schema blueprint.",2],["Blueprint::getTable","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_getTable","()","Get the table the blueprint describes.",2],["Blueprint::getColumns","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_getColumns","()","Get the columns that should be added.",2],["Blueprint::getCommands","Illuminate\\Database\\Schema\\Blueprint","Illuminate\/Database\/Schema\/Blueprint.html#method_getCommands","()","Get the commands on the blueprint.",2],["Builder::__construct","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method___construct","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Create a new database Schema manager.",2],["Builder::hasTable","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_hasTable","(string $table)","Determine if the given table exists.",2],["Builder::hasColumn","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_hasColumn","(string $table, string $column)","Determine if the given table has a given column.",2],["Builder::getColumnListing","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_getColumnListing","(string $table)","Get the column listing for a given table.",2],["Builder::table","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_table","(string $table, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Modify a table on the schema.",2],["Builder::create","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_create","(string $table, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Create a new table on the schema.",2],["Builder::drop","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_drop","(string $table)","Drop a table from the schema.",2],["Builder::dropIfExists","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_dropIfExists","(string $table)","Drop a table from the schema if it exists.",2],["Builder::rename","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_rename","(string $from, string $to)","Rename a table on the schema.",2],["Builder::getConnection","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_getConnection","()","Get the database connection instance.",2],["Builder::setConnection","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_setConnection","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Set the database connection instance.",2],["Builder::blueprintResolver","Illuminate\\Database\\Schema\\Builder","Illuminate\/Database\/Schema\/Builder.html#method_blueprintResolver","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver)","Set the Schema Blueprint resolver callback.",2],["Grammar::compileRenameColumn","Illuminate\\Database\\Schema\\Grammars\\Grammar","Illuminate\/Database\/Schema\/Grammars\/Grammar.html#method_compileRenameColumn","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command, <a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Compile a rename column command.",2],["Grammar::compileForeign","Illuminate\\Database\\Schema\\Grammars\\Grammar","Illuminate\/Database\/Schema\/Grammars\/Grammar.html#method_compileForeign","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a foreign key command.",2],["Grammar::prefixArray","Illuminate\\Database\\Schema\\Grammars\\Grammar","Illuminate\/Database\/Schema\/Grammars\/Grammar.html#method_prefixArray","(string $prefix, array $values)","Add a prefix to an array of values.",2],["Grammar::wrapTable","Illuminate\\Database\\Schema\\Grammars\\Grammar","Illuminate\/Database\/Schema\/Grammars\/Grammar.html#method_wrapTable","(mixed $table)","Wrap a table in keyword identifiers.",2],["Grammar::wrap","Illuminate\\Database\\Schema\\Grammars\\Grammar","Illuminate\/Database\/Schema\/Grammars\/Grammar.html#method_wrap","(string $value)","Wrap a value in keyword identifiers.",2],["MySqlGrammar::compileTableExists","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileTableExists","()","Compile the query to determine the list of tables.",2],["MySqlGrammar::compileColumnExists","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileColumnExists","()","Compile the query to determine the list of columns.",2],["MySqlGrammar::compileCreate","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileCreate","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command, <a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Compile a create table command.",2],["MySqlGrammar::compileAdd","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileAdd","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile an add column command.",2],["MySqlGrammar::compilePrimary","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compilePrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a primary key command.",2],["MySqlGrammar::compileUnique","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a unique key command.",2],["MySqlGrammar::compileIndex","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a plain index key command.",2],["MySqlGrammar::compileDrop","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDrop","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table command.",2],["MySqlGrammar::compileDropIfExists","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropIfExists","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table (if exists) command.",2],["MySqlGrammar::compileDropColumn","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropColumn","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop column command.",2],["MySqlGrammar::compileDropPrimary","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropPrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop primary key command.",2],["MySqlGrammar::compileDropUnique","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop unique key command.",2],["MySqlGrammar::compileDropIndex","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop index command.",2],["MySqlGrammar::compileDropForeign","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileDropForeign","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop foreign key command.",2],["MySqlGrammar::compileRename","Illuminate\\Database\\Schema\\Grammars\\MySqlGrammar","Illuminate\/Database\/Schema\/Grammars\/MySqlGrammar.html#method_compileRename","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a rename table command.",2],["PostgresGrammar::compileTableExists","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileTableExists","()","Compile the query to determine if a table exists.",2],["PostgresGrammar::compileColumnExists","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileColumnExists","(string $table)","Compile the query to determine the list of columns.",2],["PostgresGrammar::compileCreate","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileCreate","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a create table command.",2],["PostgresGrammar::compileAdd","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileAdd","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a create table command.",2],["PostgresGrammar::compilePrimary","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compilePrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a primary key command.",2],["PostgresGrammar::compileUnique","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a unique key command.",2],["PostgresGrammar::compileIndex","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a plain index key command.",2],["PostgresGrammar::compileDrop","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDrop","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table command.",2],["PostgresGrammar::compileDropIfExists","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropIfExists","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table (if exists) command.",2],["PostgresGrammar::compileDropColumn","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropColumn","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop column command.",2],["PostgresGrammar::compileDropPrimary","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropPrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop primary key command.",2],["PostgresGrammar::compileDropUnique","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop unique key command.",2],["PostgresGrammar::compileDropIndex","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop index command.",2],["PostgresGrammar::compileDropForeign","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileDropForeign","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop foreign key command.",2],["PostgresGrammar::compileRename","Illuminate\\Database\\Schema\\Grammars\\PostgresGrammar","Illuminate\/Database\/Schema\/Grammars\/PostgresGrammar.html#method_compileRename","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a rename table command.",2],["SQLiteGrammar::compileTableExists","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileTableExists","()","Compile the query to determine if a table exists.",2],["SQLiteGrammar::compileColumnExists","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileColumnExists","(string $table)","Compile the query to determine the list of columns.",2],["SQLiteGrammar::compileCreate","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileCreate","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a create table command.",2],["SQLiteGrammar::compileAdd","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileAdd","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile alter table commands for adding columns",2],["SQLiteGrammar::compileUnique","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a unique key command.",2],["SQLiteGrammar::compileIndex","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a plain index key command.",2],["SQLiteGrammar::compileForeign","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileForeign","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a foreign key command.",2],["SQLiteGrammar::compileDrop","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileDrop","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table command.",2],["SQLiteGrammar::compileDropIfExists","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileDropIfExists","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table (if exists) command.",2],["SQLiteGrammar::compileDropColumn","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileDropColumn","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command, <a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection)","Compile a drop column command.",2],["SQLiteGrammar::compileDropUnique","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileDropUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop unique key command.",2],["SQLiteGrammar::compileDropIndex","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileDropIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop index command.",2],["SQLiteGrammar::compileRename","Illuminate\\Database\\Schema\\Grammars\\SQLiteGrammar","Illuminate\/Database\/Schema\/Grammars\/SQLiteGrammar.html#method_compileRename","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a rename table command.",2],["SqlServerGrammar::compileTableExists","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileTableExists","()","Compile the query to determine if a table exists.",2],["SqlServerGrammar::compileColumnExists","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileColumnExists","(string $table)","Compile the query to determine the list of columns.",2],["SqlServerGrammar::compileCreate","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileCreate","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a create table command.",2],["SqlServerGrammar::compileAdd","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileAdd","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a create table command.",2],["SqlServerGrammar::compilePrimary","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compilePrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a primary key command.",2],["SqlServerGrammar::compileUnique","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a unique key command.",2],["SqlServerGrammar::compileIndex","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a plain index key command.",2],["SqlServerGrammar::compileDrop","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDrop","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop table command.",2],["SqlServerGrammar::compileDropColumn","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDropColumn","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop column command.",2],["SqlServerGrammar::compileDropPrimary","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDropPrimary","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop primary key command.",2],["SqlServerGrammar::compileDropUnique","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDropUnique","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop unique key command.",2],["SqlServerGrammar::compileDropIndex","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDropIndex","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop index command.",2],["SqlServerGrammar::compileDropForeign","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileDropForeign","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a drop foreign key command.",2],["SqlServerGrammar::compileRename","Illuminate\\Database\\Schema\\Grammars\\SqlServerGrammar","Illuminate\/Database\/Schema\/Grammars\/SqlServerGrammar.html#method_compileRename","(<a href=\"Illuminate\/Database\/Schema\/Blueprint.html\"><abbr title=\"Illuminate\\Database\\Schema\\Blueprint\">Blueprint<\/abbr><\/a> $blueprint, <a href=\"Illuminate\/Support\/Fluent.html\"><abbr title=\"Illuminate\\Support\\Fluent\">Fluent<\/abbr><\/a> $command)","Compile a rename table command.",2],["MySqlBuilder::hasTable","Illuminate\\Database\\Schema\\MySqlBuilder","Illuminate\/Database\/Schema\/MySqlBuilder.html#method_hasTable","(string $table)","Determine if the given table exists.",2],["MySqlBuilder::getColumnListing","Illuminate\\Database\\Schema\\MySqlBuilder","Illuminate\/Database\/Schema\/MySqlBuilder.html#method_getColumnListing","(string $table)","Get the column listing for a given table.",2],["SeedServiceProvider::register","Illuminate\\Database\\SeedServiceProvider","Illuminate\/Database\/SeedServiceProvider.html#method_register","()","Register the service provider.",2],["SeedServiceProvider::provides","Illuminate\\Database\\SeedServiceProvider","Illuminate\/Database\/SeedServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Seeder::run","Illuminate\\Database\\Seeder","Illuminate\/Database\/Seeder.html#method_run","()","Run the database seeds.",2],["Seeder::call","Illuminate\\Database\\Seeder","Illuminate\/Database\/Seeder.html#method_call","(string $class)","Seed the given connection from the given path.",2],["Seeder::setContainer","Illuminate\\Database\\Seeder","Illuminate\/Database\/Seeder.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["Seeder::setCommand","Illuminate\\Database\\Seeder","Illuminate\/Database\/Seeder.html#method_setCommand","(<a href=\"Illuminate\/Console\/Command.html\"><abbr title=\"Illuminate\\Console\\Command\">Command<\/abbr><\/a> $command)","Set the console command instance.",2],["SqlServerConnection::transaction","Illuminate\\Database\\SqlServerConnection","Illuminate\/Database\/SqlServerConnection.html#method_transaction","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute a Closure within a transaction.",2],["Encrypter::__construct","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method___construct","(string $key)","Create a new encrypter instance.",2],["Encrypter::encrypt","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method_encrypt","(string $value)","Encrypt the given value.",2],["Encrypter::decrypt","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method_decrypt","(string $payload)","Decrypt the given value.",2],["Encrypter::setKey","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method_setKey","(string $key)","Set the encryption key.",2],["Encrypter::setCipher","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method_setCipher","(string $cipher)","Set the encryption cipher.",2],["Encrypter::setMode","Illuminate\\Encryption\\Encrypter","Illuminate\/Encryption\/Encrypter.html#method_setMode","(string $mode)","Set the encryption mode.",2],["EncryptionServiceProvider::register","Illuminate\\Encryption\\EncryptionServiceProvider","Illuminate\/Encryption\/EncryptionServiceProvider.html#method_register","()","Register the service provider.",2],["Dispatcher::__construct","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new event dispatcher instance.",2],["Dispatcher::listen","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_listen","(string|array $events, mixed $listener, int $priority)","Register an event listener with the dispatcher.",2],["Dispatcher::hasListeners","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_hasListeners","(string $eventName)","Determine if a given event has listeners.",2],["Dispatcher::queue","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_queue","(string $event, array $payload = array())","Register a queued event and payload.",2],["Dispatcher::subscribe","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_subscribe","(string $subscriber)","Register an event subscriber with the dispatcher.",2],["Dispatcher::until","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_until","(string $event, array $payload = array())","Fire an event until the first non-null response is",2],["Dispatcher::flush","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_flush","(string $event)","Flush a set of queued events.",2],["Dispatcher::firing","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_firing","()","Get the event that is currently firing.",2],["Dispatcher::fire","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_fire","(string $event, mixed $payload = array(), bool $halt = false)","Fire an event and call the listeners.",2],["Dispatcher::getListeners","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_getListeners","(string $eventName)","Get all of the listeners for a given event name.",2],["Dispatcher::makeListener","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_makeListener","(mixed $listener)","Register an event listener with the dispatcher.",2],["Dispatcher::createClassListener","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_createClassListener","(mixed $listener)","Create a class based listener using the IoC container.",2],["Dispatcher::forget","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_forget","(string $event)","Remove a set of listeners from the dispatcher.",2],["Dispatcher::forgetQueued","Illuminate\\Events\\Dispatcher","Illuminate\/Events\/Dispatcher.html#method_forgetQueued","()","Forget all of the queued listeners.",2],["EventServiceProvider::register","Illuminate\\Events\\EventServiceProvider","Illuminate\/Events\/EventServiceProvider.html#method_register","()","Register the service provider.",2],["ExceptionDisplayerInterface::display","Illuminate\\Exception\\ExceptionDisplayerInterface","Illuminate\/Exception\/ExceptionDisplayerInterface.html#method_display","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Display the given exception to the user.",2],["ExceptionServiceProvider::register","Illuminate\\Exception\\ExceptionServiceProvider","Illuminate\/Exception\/ExceptionServiceProvider.html#method_register","()","Register the service provider.",2],["Handler::__construct","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method___construct","(<a href=\"Illuminate\/Support\/Contracts\/ResponsePreparerInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\ResponsePreparerInterface\">ResponsePreparerInterface<\/abbr><\/a> $responsePreparer, <a href=\"Illuminate\/Exception\/ExceptionDisplayerInterface.html\"><abbr title=\"Illuminate\\Exception\\ExceptionDisplayerInterface\">ExceptionDisplayerInterface<\/abbr><\/a> $plainDisplayer, <a href=\"Illuminate\/Exception\/ExceptionDisplayerInterface.html\"><abbr title=\"Illuminate\\Exception\\ExceptionDisplayerInterface\">ExceptionDisplayerInterface<\/abbr><\/a> $debugDisplayer, bool $debug = true)","Create a new error handler instance.",2],["Handler::register","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_register","(string $environment)","Register the exception \/ error handlers for the application.",2],["Handler::handleError","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_handleError","(int $level, string $message, string $file = &#039;&#039;, int $line, array $context = array())","Handle a PHP error for the application.",2],["Handler::handleException","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_handleException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Handle an exception for the application.",2],["Handler::handleUncaughtException","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_handleUncaughtException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Handle an uncaught exception.",2],["Handler::handleShutdown","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_handleShutdown","()","Handle the PHP shutdown event.",2],["Handler::handleConsole","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_handleConsole","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Handle a console exception.",2],["Handler::error","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_error","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an application error handler.",2],["Handler::pushError","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_pushError","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an application error handler at the bottom",2],["Handler::runningInConsole","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_runningInConsole","()","Determine if we are running in the console.",2],["Handler::setDebug","Illuminate\\Exception\\Handler","Illuminate\/Exception\/Handler.html#method_setDebug","(bool $debug)","Set the debug level for the handler.",2],["PlainDisplayer::display","Illuminate\\Exception\\PlainDisplayer","Illuminate\/Exception\/PlainDisplayer.html#method_display","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Display the given exception to the user.",2],["SymfonyDisplayer::__construct","Illuminate\\Exception\\SymfonyDisplayer","Illuminate\/Exception\/SymfonyDisplayer.html#method___construct","(<abbr title=\"Symfony\\Component\\Debug\\ExceptionHandler\">ExceptionHandler<\/abbr> $symfony, bool $returnJson = false)","Create a new Symfony exception displayer.",2],["SymfonyDisplayer::display","Illuminate\\Exception\\SymfonyDisplayer","Illuminate\/Exception\/SymfonyDisplayer.html#method_display","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Display the given exception to the user.",2],["WhoopsDisplayer::__construct","Illuminate\\Exception\\WhoopsDisplayer","Illuminate\/Exception\/WhoopsDisplayer.html#method___construct","(<abbr title=\"Whoops\\Run\">Run<\/abbr> $whoops, bool $runningInConsole)","Create a new Whoops exception displayer.",2],["WhoopsDisplayer::display","Illuminate\\Exception\\WhoopsDisplayer","Illuminate\/Exception\/WhoopsDisplayer.html#method_display","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Display the given exception to the user.",2],["Filesystem::exists","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_exists","(string $path)","Determine if a file exists.",2],["Filesystem::get","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_get","(string $path)","Get the contents of a file.",2],["Filesystem::getRequire","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_getRequire","(string $path)","Get the returned value of a file.",2],["Filesystem::requireOnce","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_requireOnce","(string $file)","Require the given file once.",2],["Filesystem::put","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_put","(string $path, string $contents)","Write the contents of a file.",2],["Filesystem::prepend","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_prepend","(string $path, string $data)","Prepend to a file.",2],["Filesystem::append","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_append","(string $path, string $data)","Append to a file.",2],["Filesystem::delete","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_delete","(string|array $paths)","Delete the file at a given path.",2],["Filesystem::move","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_move","(string $path, string $target)","Move a file to a new location.",2],["Filesystem::copy","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_copy","(string $path, string $target)","Copy a file to a new location.",2],["Filesystem::extension","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_extension","(string $path)","Extract the file extension from a file path.",2],["Filesystem::type","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_type","(string $path)","Get the file type of a given file.",2],["Filesystem::size","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_size","(string $path)","Get the file size of a given file.",2],["Filesystem::lastModified","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_lastModified","(string $path)","Get the file's last modification time.",2],["Filesystem::isDirectory","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_isDirectory","(string $directory)","Determine if the given path is a directory.",2],["Filesystem::isWritable","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_isWritable","(string $path)","Determine if the given path is writable.",2],["Filesystem::isFile","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_isFile","(string $file)","Determine if the given path is a file.",2],["Filesystem::glob","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_glob","(string $pattern, int $flags)","Find path names matching a given pattern.",2],["Filesystem::files","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_files","(string $directory)","Get an array of all files in a directory.",2],["Filesystem::allFiles","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_allFiles","(string $directory)","Get all of the files from the given directory (recursive).",2],["Filesystem::directories","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_directories","(string $directory)","Get all of the directories within a given directory.",2],["Filesystem::makeDirectory","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_makeDirectory","(string $path, int $mode = 493, bool $recursive = false, bool $force = false)","Create a directory.",2],["Filesystem::copyDirectory","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_copyDirectory","(string $directory, string $destination, int $options = null)","Copy a directory from one location to another.",2],["Filesystem::deleteDirectory","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_deleteDirectory","(string $directory, bool $preserve = false)","Recursively delete a directory.",2],["Filesystem::cleanDirectory","Illuminate\\Filesystem\\Filesystem","Illuminate\/Filesystem\/Filesystem.html#method_cleanDirectory","(string $directory)","Empty the specified directory of all files and folders.",2],["FilesystemServiceProvider::register","Illuminate\\Filesystem\\FilesystemServiceProvider","Illuminate\/Filesystem\/FilesystemServiceProvider.html#method_register","()","Register the service provider.",2],["AliasLoader::__construct","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method___construct","(array $aliases = array())","Create a new class alias loader instance.",2],["AliasLoader::getInstance","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_getInstance","(array $aliases = array())","Get or create the singleton alias loader instance.",2],["AliasLoader::load","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_load","(string $alias)","Load a class alias if it is registered.",2],["AliasLoader::alias","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_alias","(string $class, string $alias)","Add an alias to the loader.",2],["AliasLoader::register","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_register","()","Register the loader on the auto-loader stack.",2],["AliasLoader::getAliases","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_getAliases","()","Get the registered aliases.",2],["AliasLoader::setAliases","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_setAliases","(array $aliases)","Set the registered aliases.",2],["AliasLoader::isRegistered","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_isRegistered","()","Indicates if the loader has been registered.",2],["AliasLoader::setRegistered","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_setRegistered","(bool $value)","Set the \"registered\" state of the loader.",2],["AliasLoader::setInstance","Illuminate\\Foundation\\AliasLoader","Illuminate\/Foundation\/AliasLoader.html#method_setInstance","(<a href=\"Illuminate\/Foundation\/AliasLoader.html\"><abbr title=\"Illuminate\\Foundation\\AliasLoader\">AliasLoader<\/abbr><\/a> $loader)","Set the value of the singleton alias loader.",2],["Application::__construct","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method___construct","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request = null)","Create a new Illuminate application instance.",2],["Application::bindInstallPaths","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_bindInstallPaths","(array $paths)","Bind the installation paths to the application.",2],["Application::getBootstrapFile","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getBootstrapFile","()","Get the application bootstrap file.",2],["Application::startExceptionHandling","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_startExceptionHandling","()","Start the exception handling for the request.",2],["Application::environment","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_environment","()","Get or check the current application environment.",2],["Application::isLocal","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_isLocal","()","Determine if application is in local environment.",2],["Application::detectEnvironment","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_detectEnvironment","(array|string $envs)","Detect the application's current environment.",2],["Application::runningInConsole","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_runningInConsole","()","Determine if we are running in the console.",2],["Application::runningUnitTests","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_runningUnitTests","()","Determine if we are running unit tests.",2],["Application::forceRegister","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_forceRegister","(<a href=\"Illuminate\/Support\/ServiceProvider.html\"><abbr title=\"Illuminate\\Support\\ServiceProvider\">ServiceProvider<\/abbr><\/a>|string $provider, array $options = array())","Force register a service provider with the application.",2],["Application::register","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_register","(<a href=\"Illuminate\/Support\/ServiceProvider.html\"><abbr title=\"Illuminate\\Support\\ServiceProvider\">ServiceProvider<\/abbr><\/a>|string $provider, array $options = array(), bool $force = false)","Register a service provider with the application.",2],["Application::getRegistered","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getRegistered","(<a href=\"Illuminate\/Support\/ServiceProvider.html\"><abbr title=\"Illuminate\\Support\\ServiceProvider\">ServiceProvider<\/abbr><\/a>|string $provider)","Get the registered service provider instance if it",2],["Application::resolveProviderClass","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_resolveProviderClass","(string $provider)","Resolve a service provider instance from the class",2],["Application::loadDeferredProviders","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_loadDeferredProviders","()","Load and boot all of the remaining deferred providers.",2],["Application::registerDeferredProvider","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_registerDeferredProvider","(string $provider, string $service = null)","Register a deferred provider and service.",2],["Application::make","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_make","(string $abstract, array $parameters = array())","Resolve the given type from the container.",2],["Application::bound","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_bound","(string $abstract)","Determine if the given abstract type has been bound.",2],["Application::extend","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_extend","(string $abstract, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $closure)","\"Extend\" an abstract type in the container.",2],["Application::before","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_before","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a \"before\" application filter.",2],["Application::after","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_after","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register an \"after\" application filter.",2],["Application::finish","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_finish","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a \"finish\" application filter.",2],["Application::shutdown","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_shutdown","(callable $callback = null)","Register a \"shutdown\" callback.",2],["Application::useArraySessions","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_useArraySessions","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a function for determining when to use array",2],["Application::isBooted","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_isBooted","()","Determine if the application has booted.",2],["Application::boot","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_boot","()","Boot the application's service providers.",2],["Application::booting","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_booting","(mixed $callback)","Register a new boot listener.",2],["Application::booted","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_booted","(mixed $callback)","Register a new \"booted\" listener.",2],["Application::run","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_run","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request = null)","Run the application and send the response.",2],["Application::middleware","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_middleware","(string $class, array $parameters = array())","Add a HttpKernel middleware onto the stack.",2],["Application::forgetMiddleware","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_forgetMiddleware","(string $class)","Remove a custom middleware from the application.",2],["Application::handle","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Handle the given request and get the response.",2],["Application::dispatch","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_dispatch","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Handle the given request and get the response.",2],["Application::terminate","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_terminate","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, <abbr title=\"Symfony\\Component\\HttpFoundation\\Response\">Response<\/abbr> $response)","Terminate the request and send the response to the",2],["Application::callFinishCallbacks","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_callFinishCallbacks","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, <abbr title=\"Symfony\\Component\\HttpFoundation\\Response\">Response<\/abbr> $response)","Call the \"finish\" callbacks assigned to the application.",2],["Application::prepareRequest","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_prepareRequest","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Prepare the request by injecting any services.",2],["Application::prepareResponse","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_prepareResponse","(mixed $value)","Prepare the given value as a Response object.",2],["Application::readyForResponses","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_readyForResponses","()","Determine if the application is ready for responses.",2],["Application::isDownForMaintenance","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_isDownForMaintenance","()","Determine if the application is currently down for",2],["Application::down","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_down","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a maintenance mode event listener.",2],["Application::abort","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_abort","(int $code, string $message = &#039;&#039;, array $headers = array())","Throw an HttpException with the given data.",2],["Application::missing","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_missing","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a 404 error handler.",2],["Application::error","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_error","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an application error handler.",2],["Application::pushError","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_pushError","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an error handler at the bottom of the stack.",2],["Application::fatal","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_fatal","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register an error handler for fatal errors.",2],["Application::getConfigLoader","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getConfigLoader","()","Get the configuration loader instance.",2],["Application::getEnvironmentVariablesLoader","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getEnvironmentVariablesLoader","()","Get the environment variables loader instance.",2],["Application::getProviderRepository","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getProviderRepository","()","Get the service provider repository instance.",2],["Application::getLoadedProviders","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getLoadedProviders","()","Get the service providers that have been loaded.",2],["Application::setDeferredServices","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_setDeferredServices","(array $services)","Set the application's deferred services.",2],["Application::isDeferredService","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_isDeferredService","(string $service)","Determine if the given service is a deferred service.",2],["Application::requestClass","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_requestClass","(string $class = null)","Get or set the request class for the application.",2],["Application::setRequestForConsoleEnvironment","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_setRequestForConsoleEnvironment","()","Set the application request for the console environment.",2],["Application::onRequest","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_onRequest","(string $method, array $parameters = array())","Call a method on the default request class.",2],["Application::getLocale","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_getLocale","()","Get the current application locale.",2],["Application::setLocale","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_setLocale","(string $locale)","Set the current application locale.",2],["Application::registerCoreContainerAliases","Illuminate\\Foundation\\Application","Illuminate\/Foundation\/Application.html#method_registerCoreContainerAliases","()","Register the core class aliases in the container.",2],["Artisan::__construct","Illuminate\\Foundation\\Artisan","Illuminate\/Foundation\/Artisan.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new Artisan command runner instance.",2],["Artisan::__call","Illuminate\\Foundation\\Artisan","Illuminate\/Foundation\/Artisan.html#method___call","(string $method, array $parameters)","Dynamically pass all missing methods to console Artisan.",2],["AssetPublisher::__construct","Illuminate\\Foundation\\AssetPublisher","Illuminate\/Foundation\/AssetPublisher.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $publishPath)","Create a new asset publisher instance.",2],["AssetPublisher::publish","Illuminate\\Foundation\\AssetPublisher","Illuminate\/Foundation\/AssetPublisher.html#method_publish","(string $name, string $source)","Copy all assets from a given path to the publish path.",2],["AssetPublisher::publishPackage","Illuminate\\Foundation\\AssetPublisher","Illuminate\/Foundation\/AssetPublisher.html#method_publishPackage","(string $package, string $packagePath = null)","Publish a given package's assets to the publish path.",2],["AssetPublisher::setPackagePath","Illuminate\\Foundation\\AssetPublisher","Illuminate\/Foundation\/AssetPublisher.html#method_setPackagePath","(string $packagePath)","Set the default package path.",2],["Composer::__construct","Illuminate\\Foundation\\Composer","Illuminate\/Foundation\/Composer.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $workingPath = null)","Create a new Composer manager instance.",2],["Composer::dumpAutoloads","Illuminate\\Foundation\\Composer","Illuminate\/Foundation\/Composer.html#method_dumpAutoloads","(string $extra = &#039;&#039;)","Regenerate the Composer autoloader files.",2],["Composer::dumpOptimized","Illuminate\\Foundation\\Composer","Illuminate\/Foundation\/Composer.html#method_dumpOptimized","()","Regenerate the optimized Composer autoloader files.",2],["Composer::setWorkingPath","Illuminate\\Foundation\\Composer","Illuminate\/Foundation\/Composer.html#method_setWorkingPath","(string $path)","Set the working path used by the class.",2],["ConfigPublisher::__construct","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $publishPath)","Create a new configuration publisher instance.",2],["ConfigPublisher::publish","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method_publish","(string $package, string $source)","Publish configuration files from a given path.",2],["ConfigPublisher::publishPackage","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method_publishPackage","(string $package, string $packagePath = null)","Publish the configuration files for a package.",2],["ConfigPublisher::alreadyPublished","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method_alreadyPublished","(string $package)","Determine if a given package has already been published.",2],["ConfigPublisher::getDestinationPath","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method_getDestinationPath","(string $package)","Get the target destination path for the configuration",2],["ConfigPublisher::setPackagePath","Illuminate\\Foundation\\ConfigPublisher","Illuminate\/Foundation\/ConfigPublisher.html#method_setPackagePath","(string $packagePath)","Set the default package path.",2],["AssetPublishCommand::__construct","Illuminate\\Foundation\\Console\\AssetPublishCommand","Illuminate\/Foundation\/Console\/AssetPublishCommand.html#method___construct","(<a href=\"Illuminate\/Foundation\/AssetPublisher.html\"><abbr title=\"Illuminate\\Foundation\\AssetPublisher\">AssetPublisher<\/abbr><\/a> $assets)","Create a new console command instance.",2],["AssetPublishCommand::fire","Illuminate\\Foundation\\Console\\AssetPublishCommand","Illuminate\/Foundation\/Console\/AssetPublishCommand.html#method_fire","()","Execute the console command.",2],["AutoloadCommand::__construct","Illuminate\\Foundation\\Console\\AutoloadCommand","Illuminate\/Foundation\/Console\/AutoloadCommand.html#method___construct","(<a href=\"Illuminate\/Foundation\/Composer.html\"><abbr title=\"Illuminate\\Foundation\\Composer\">Composer<\/abbr><\/a> $composer)","Create a new optimize command instance.",2],["AutoloadCommand::fire","Illuminate\\Foundation\\Console\\AutoloadCommand","Illuminate\/Foundation\/Console\/AutoloadCommand.html#method_fire","()","Execute the console command.",2],["ChangesCommand::fire","Illuminate\\Foundation\\Console\\ChangesCommand","Illuminate\/Foundation\/Console\/ChangesCommand.html#method_fire","()","Execute the console command.",2],["ClearCompiledCommand::fire","Illuminate\\Foundation\\Console\\ClearCompiledCommand","Illuminate\/Foundation\/Console\/ClearCompiledCommand.html#method_fire","()","Execute the console command.",2],["CommandMakeCommand::__construct","Illuminate\\Foundation\\Console\\CommandMakeCommand","Illuminate\/Foundation\/Console\/CommandMakeCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new command creator command.",2],["CommandMakeCommand::fire","Illuminate\\Foundation\\Console\\CommandMakeCommand","Illuminate\/Foundation\/Console\/CommandMakeCommand.html#method_fire","()","Execute the console command.",2],["ConfigPublishCommand::__construct","Illuminate\\Foundation\\Console\\ConfigPublishCommand","Illuminate\/Foundation\/Console\/ConfigPublishCommand.html#method___construct","(<a href=\"Illuminate\/Foundation\/ConfigPublisher.html\"><abbr title=\"Illuminate\\Foundation\\ConfigPublisher\">ConfigPublisher<\/abbr><\/a> $config)","Create a new configuration publish command instance.",2],["ConfigPublishCommand::fire","Illuminate\\Foundation\\Console\\ConfigPublishCommand","Illuminate\/Foundation\/Console\/ConfigPublishCommand.html#method_fire","()","Execute the console command.",2],["DownCommand::fire","Illuminate\\Foundation\\Console\\DownCommand","Illuminate\/Foundation\/Console\/DownCommand.html#method_fire","()","Execute the console command.",2],["EnvironmentCommand::fire","Illuminate\\Foundation\\Console\\EnvironmentCommand","Illuminate\/Foundation\/Console\/EnvironmentCommand.html#method_fire","()","Execute the console command.",2],["KeyGenerateCommand::__construct","Illuminate\\Foundation\\Console\\KeyGenerateCommand","Illuminate\/Foundation\/Console\/KeyGenerateCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new console command instance.",2],["KeyGenerateCommand::fire","Illuminate\\Foundation\\Console\\KeyGenerateCommand","Illuminate\/Foundation\/Console\/KeyGenerateCommand.html#method_fire","()","Execute the console command.",2],["MigratePublishCommand::fire","Illuminate\\Foundation\\Console\\MigratePublishCommand","Illuminate\/Foundation\/Console\/MigratePublishCommand.html#method_fire","()","Execute the console command.",2],["OptimizeCommand::__construct","Illuminate\\Foundation\\Console\\OptimizeCommand","Illuminate\/Foundation\/Console\/OptimizeCommand.html#method___construct","(<a href=\"Illuminate\/Foundation\/Composer.html\"><abbr title=\"Illuminate\\Foundation\\Composer\">Composer<\/abbr><\/a> $composer)","Create a new optimize command instance.",2],["OptimizeCommand::fire","Illuminate\\Foundation\\Console\\OptimizeCommand","Illuminate\/Foundation\/Console\/OptimizeCommand.html#method_fire","()","Execute the console command.",2],["RoutesCommand::__construct","Illuminate\\Foundation\\Console\\RoutesCommand","Illuminate\/Foundation\/Console\/RoutesCommand.html#method___construct","(<a href=\"Illuminate\/Routing\/Router.html\"><abbr title=\"Illuminate\\Routing\\Router\">Router<\/abbr><\/a> $router)","Create a new route command instance.",2],["RoutesCommand::fire","Illuminate\\Foundation\\Console\\RoutesCommand","Illuminate\/Foundation\/Console\/RoutesCommand.html#method_fire","()","Execute the console command.",2],["ServeCommand::fire","Illuminate\\Foundation\\Console\\ServeCommand","Illuminate\/Foundation\/Console\/ServeCommand.html#method_fire","()","Execute the console command.",2],["TailCommand::fire","Illuminate\\Foundation\\Console\\TailCommand","Illuminate\/Foundation\/Console\/TailCommand.html#method_fire","()","Execute the console command.",2],["TinkerCommand::fire","Illuminate\\Foundation\\Console\\TinkerCommand","Illuminate\/Foundation\/Console\/TinkerCommand.html#method_fire","()","Execute the console command.",2],["UpCommand::fire","Illuminate\\Foundation\\Console\\UpCommand","Illuminate\/Foundation\/Console\/UpCommand.html#method_fire","()","Execute the console command.",2],["ViewPublishCommand::__construct","Illuminate\\Foundation\\Console\\ViewPublishCommand","Illuminate\/Foundation\/Console\/ViewPublishCommand.html#method___construct","(<a href=\"Illuminate\/Foundation\/ViewPublisher.html\"><abbr title=\"Illuminate\\Foundation\\ViewPublisher\">ViewPublisher<\/abbr><\/a> $view)","Create a new console command instance.",2],["ViewPublishCommand::fire","Illuminate\\Foundation\\Console\\ViewPublishCommand","Illuminate\/Foundation\/Console\/ViewPublishCommand.html#method_fire","()","Execute the console command.",2],["EnvironmentDetector::detect","Illuminate\\Foundation\\EnvironmentDetector","Illuminate\/Foundation\/EnvironmentDetector.html#method_detect","(array|string $environments, array|null $consoleArgs = null)","Detect the application's current environment.",2],["EnvironmentDetector::isMachine","Illuminate\\Foundation\\EnvironmentDetector","Illuminate\/Foundation\/EnvironmentDetector.html#method_isMachine","(string $name)","Determine if the name matches the machine name.",2],["MigrationPublisher::__construct","Illuminate\\Foundation\\MigrationPublisher","Illuminate\/Foundation\/MigrationPublisher.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new migration publisher instance.",2],["MigrationPublisher::publish","Illuminate\\Foundation\\MigrationPublisher","Illuminate\/Foundation\/MigrationPublisher.html#method_publish","(string $source, string $destination)","Publish the given package's migrations.",2],["MigrationPublisher::migrationExists","Illuminate\\Foundation\\MigrationPublisher","Illuminate\/Foundation\/MigrationPublisher.html#method_migrationExists","(string $migration, string $destination)","Determine if the migration is already published.",2],["MigrationPublisher::getExistingMigrationNames","Illuminate\\Foundation\\MigrationPublisher","Illuminate\/Foundation\/MigrationPublisher.html#method_getExistingMigrationNames","(string $destination)","Get the existing migration names from the destination.",2],["ProviderRepository::__construct","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $manifestPath)","Create a new service repository instance.",2],["ProviderRepository::load","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_load","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app, array $providers)","Register the application service providers.",2],["ProviderRepository::createProvider","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_createProvider","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app, string $provider)","Create a new provider instance.",2],["ProviderRepository::shouldRecompile","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_shouldRecompile","(array $manifest, array $providers)","Determine if the manifest should be compiled.",2],["ProviderRepository::loadManifest","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_loadManifest","()","Load the service provider manifest JSON file.",2],["ProviderRepository::writeManifest","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_writeManifest","(array $manifest)","Write the service manifest file to disk.",2],["ProviderRepository::getFilesystem","Illuminate\\Foundation\\ProviderRepository","Illuminate\/Foundation\/ProviderRepository.html#method_getFilesystem","()","Get the filesystem instance.",2],["ArtisanServiceProvider::register","Illuminate\\Foundation\\Providers\\ArtisanServiceProvider","Illuminate\/Foundation\/Providers\/ArtisanServiceProvider.html#method_register","()","Register the service provider.",2],["ArtisanServiceProvider::provides","Illuminate\\Foundation\\Providers\\ArtisanServiceProvider","Illuminate\/Foundation\/Providers\/ArtisanServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["CommandCreatorServiceProvider::register","Illuminate\\Foundation\\Providers\\CommandCreatorServiceProvider","Illuminate\/Foundation\/Providers\/CommandCreatorServiceProvider.html#method_register","()","Register the service provider.",2],["CommandCreatorServiceProvider::provides","Illuminate\\Foundation\\Providers\\CommandCreatorServiceProvider","Illuminate\/Foundation\/Providers\/CommandCreatorServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ComposerServiceProvider::register","Illuminate\\Foundation\\Providers\\ComposerServiceProvider","Illuminate\/Foundation\/Providers\/ComposerServiceProvider.html#method_register","()","Register the service provider.",2],["ComposerServiceProvider::provides","Illuminate\\Foundation\\Providers\\ComposerServiceProvider","Illuminate\/Foundation\/Providers\/ComposerServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ConsoleSupportServiceProvider::register","Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider","Illuminate\/Foundation\/Providers\/ConsoleSupportServiceProvider.html#method_register","()","Register the service provider.",2],["ConsoleSupportServiceProvider::provides","Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider","Illuminate\/Foundation\/Providers\/ConsoleSupportServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["KeyGeneratorServiceProvider::register","Illuminate\\Foundation\\Providers\\KeyGeneratorServiceProvider","Illuminate\/Foundation\/Providers\/KeyGeneratorServiceProvider.html#method_register","()","Register the service provider.",2],["KeyGeneratorServiceProvider::provides","Illuminate\\Foundation\\Providers\\KeyGeneratorServiceProvider","Illuminate\/Foundation\/Providers\/KeyGeneratorServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["MaintenanceServiceProvider::register","Illuminate\\Foundation\\Providers\\MaintenanceServiceProvider","Illuminate\/Foundation\/Providers\/MaintenanceServiceProvider.html#method_register","()","Register the service provider.",2],["MaintenanceServiceProvider::provides","Illuminate\\Foundation\\Providers\\MaintenanceServiceProvider","Illuminate\/Foundation\/Providers\/MaintenanceServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["OptimizeServiceProvider::register","Illuminate\\Foundation\\Providers\\OptimizeServiceProvider","Illuminate\/Foundation\/Providers\/OptimizeServiceProvider.html#method_register","()","Register the service provider.",2],["OptimizeServiceProvider::provides","Illuminate\\Foundation\\Providers\\OptimizeServiceProvider","Illuminate\/Foundation\/Providers\/OptimizeServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["PublisherServiceProvider::register","Illuminate\\Foundation\\Providers\\PublisherServiceProvider","Illuminate\/Foundation\/Providers\/PublisherServiceProvider.html#method_register","()","Register the service provider.",2],["PublisherServiceProvider::provides","Illuminate\\Foundation\\Providers\\PublisherServiceProvider","Illuminate\/Foundation\/Providers\/PublisherServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["RouteListServiceProvider::register","Illuminate\\Foundation\\Providers\\RouteListServiceProvider","Illuminate\/Foundation\/Providers\/RouteListServiceProvider.html#method_register","()","Register the service provider.",2],["RouteListServiceProvider::provides","Illuminate\\Foundation\\Providers\\RouteListServiceProvider","Illuminate\/Foundation\/Providers\/RouteListServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ServerServiceProvider::register","Illuminate\\Foundation\\Providers\\ServerServiceProvider","Illuminate\/Foundation\/Providers\/ServerServiceProvider.html#method_register","()","Register the service provider.",2],["ServerServiceProvider::provides","Illuminate\\Foundation\\Providers\\ServerServiceProvider","Illuminate\/Foundation\/Providers\/ServerServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["TinkerServiceProvider::register","Illuminate\\Foundation\\Providers\\TinkerServiceProvider","Illuminate\/Foundation\/Providers\/TinkerServiceProvider.html#method_register","()","Register the service provider.",2],["TinkerServiceProvider::provides","Illuminate\\Foundation\\Providers\\TinkerServiceProvider","Illuminate\/Foundation\/Providers\/TinkerServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ApplicationTrait::call","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_call","(string $method, string $uri, array $parameters = array(), array $files = array(), array $server = array(), string $content = null, bool $changeHistory = true)","Call the given URI and return the Response.",2],["ApplicationTrait::callSecure","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_callSecure","(string $method, string $uri, array $parameters = array(), array $files = array(), array $server = array(), string $content = null, bool $changeHistory = true)","Call the given HTTPS URI and return the Response.",2],["ApplicationTrait::action","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_action","(string $method, string $action, array $wildcards = array(), array $parameters = array(), array $files = array(), array $server = array(), string $content = null, bool $changeHistory = true)","Call a controller action and return the Response.",2],["ApplicationTrait::route","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_route","(string $method, string $name, array $routeParameters = array(), array $parameters = array(), array $files = array(), array $server = array(), string $content = null, bool $changeHistory = true)","Call a named route and return the Response.",2],["ApplicationTrait::session","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_session","(array $data)","Set the session to the given array.",2],["ApplicationTrait::flushSession","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_flushSession","()","Flush all of the current session data.",2],["ApplicationTrait::be","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_be","(<a href=\"Illuminate\/Auth\/UserInterface.html\"><abbr title=\"Illuminate\\Auth\\UserInterface\">UserInterface<\/abbr><\/a> $user, string $driver = null)","Set the currently logged in user for the application.",2],["ApplicationTrait::seed","Illuminate\\Foundation\\Testing\\ApplicationTrait","Illuminate\/Foundation\/Testing\/ApplicationTrait.html#method_seed","(string $class = &#039;DatabaseSeeder&#039;)","Seed a given database connection.",2],["AssertionsTrait::assertResponseOk","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertResponseOk","()","Assert that the client response has an OK status code.",2],["AssertionsTrait::assertResponseStatus","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertResponseStatus","(int $code)","Assert that the client response has a given code.",2],["AssertionsTrait::assertViewHas","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertViewHas","(string|array $key, mixed $value = null)","Assert that the response view has a given piece of",2],["AssertionsTrait::assertViewHasAll","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertViewHasAll","(array $bindings)","Assert that the view has a given list of bound data.",2],["AssertionsTrait::assertViewMissing","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertViewMissing","(string $key)","Assert that the response view is missing a piece of",2],["AssertionsTrait::assertRedirectedTo","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertRedirectedTo","(string $uri, array $with = array())","Assert whether the client was redirected to a given",2],["AssertionsTrait::assertRedirectedToRoute","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertRedirectedToRoute","(string $name, array $parameters = array(), array $with = array())","Assert whether the client was redirected to a given",2],["AssertionsTrait::assertRedirectedToAction","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertRedirectedToAction","(string $name, array $parameters = array(), array $with = array())","Assert whether the client was redirected to a given",2],["AssertionsTrait::assertSessionHas","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertSessionHas","(string|array $key, mixed $value = null)","Assert that the session has a given list of values.",2],["AssertionsTrait::assertSessionHasAll","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertSessionHasAll","(array $bindings)","Assert that the session has a given list of values.",2],["AssertionsTrait::assertSessionHasErrors","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertSessionHasErrors","(string|array $bindings = array(), mixed $format = null)","Assert that the session has errors bound.",2],["AssertionsTrait::assertHasOldInput","Illuminate\\Foundation\\Testing\\AssertionsTrait","Illuminate\/Foundation\/Testing\/AssertionsTrait.html#method_assertHasOldInput","()","Assert that the session has old input.",2],["TestCase::setUp","Illuminate\\Foundation\\Testing\\TestCase","Illuminate\/Foundation\/Testing\/TestCase.html#method_setUp","()","Setup the test environment.",2],["TestCase::createApplication","Illuminate\\Foundation\\Testing\\TestCase","Illuminate\/Foundation\/Testing\/TestCase.html#method_createApplication","()","Creates the application.",2],["ViewPublisher::__construct","Illuminate\\Foundation\\ViewPublisher","Illuminate\/Foundation\/ViewPublisher.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $publishPath)","Create a new view publisher instance.",2],["ViewPublisher::publish","Illuminate\\Foundation\\ViewPublisher","Illuminate\/Foundation\/ViewPublisher.html#method_publish","(string $package, string $source)","Publish view files from a given path.",2],["ViewPublisher::publishPackage","Illuminate\\Foundation\\ViewPublisher","Illuminate\/Foundation\/ViewPublisher.html#method_publishPackage","(string $package, string $packagePath = null)","Publish the view files for a package.",2],["ViewPublisher::setPackagePath","Illuminate\\Foundation\\ViewPublisher","Illuminate\/Foundation\/ViewPublisher.html#method_setPackagePath","(string $packagePath)","Set the default package path.",2],["BcryptHasher::make","Illuminate\\Hashing\\BcryptHasher","Illuminate\/Hashing\/BcryptHasher.html#method_make","(string $value, array $options = array())","Hash the given value.",2],["BcryptHasher::check","Illuminate\\Hashing\\BcryptHasher","Illuminate\/Hashing\/BcryptHasher.html#method_check","(string $value, string $hashedValue, array $options = array())","Check the given plain value against a hash.",2],["BcryptHasher::needsRehash","Illuminate\\Hashing\\BcryptHasher","Illuminate\/Hashing\/BcryptHasher.html#method_needsRehash","(string $hashedValue, array $options = array())","Check if the given hash has been hashed using the given",2],["HashServiceProvider::register","Illuminate\\Hashing\\HashServiceProvider","Illuminate\/Hashing\/HashServiceProvider.html#method_register","()","Register the service provider.",2],["HashServiceProvider::provides","Illuminate\\Hashing\\HashServiceProvider","Illuminate\/Hashing\/HashServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["HasherInterface::make","Illuminate\\Hashing\\HasherInterface","Illuminate\/Hashing\/HasherInterface.html#method_make","(string $value, array $options = array())","Hash the given value.",2],["HasherInterface::check","Illuminate\\Hashing\\HasherInterface","Illuminate\/Hashing\/HasherInterface.html#method_check","(string $value, string $hashedValue, array $options = array())","Check the given plain value against a hash.",2],["HasherInterface::needsRehash","Illuminate\\Hashing\\HasherInterface","Illuminate\/Hashing\/HasherInterface.html#method_needsRehash","(string $hashedValue, array $options = array())","Check if the given hash has been hashed using the given",2],["FormBuilder::__construct","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method___construct","(<a href=\"Illuminate\/Html\/HtmlBuilder.html\"><abbr title=\"Illuminate\\Html\\HtmlBuilder\">HtmlBuilder<\/abbr><\/a> $html, <a href=\"Illuminate\/Routing\/UrlGenerator.html\"><abbr title=\"Illuminate\\Routing\\UrlGenerator\">UrlGenerator<\/abbr><\/a> $url, $csrfToken)","Create a new form builder instance.",2],["FormBuilder::open","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_open","(array $options = array())","Open up a new HTML form.",2],["FormBuilder::model","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_model","(mixed $model, array $options = array())","Create a new model based form builder.",2],["FormBuilder::setModel","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_setModel","(mixed $model)","Set the model instance on the form builder.",2],["FormBuilder::close","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_close","()","Close the current form.",2],["FormBuilder::token","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_token","()","Generate a hidden field with the current CSRF token.",2],["FormBuilder::label","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_label","(string $name, string $value = null, array $options = array())","Create a form label element.",2],["FormBuilder::input","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_input","(string $type, string $name, string $value = null, array $options = array())","Create a form input field.",2],["FormBuilder::text","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_text","(string $name, string $value = null, array $options = array())","Create a text input field.",2],["FormBuilder::password","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_password","(string $name, array $options = array())","Create a password input field.",2],["FormBuilder::hidden","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_hidden","(string $name, string $value = null, array $options = array())","Create a hidden input field.",2],["FormBuilder::email","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_email","(string $name, string $value = null, array $options = array())","Create an e-mail input field.",2],["FormBuilder::url","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_url","(string $name, string $value = null, array $options = array())","Create a url input field.",2],["FormBuilder::file","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_file","(string $name, array $options = array())","Create a file input field.",2],["FormBuilder::textarea","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_textarea","(string $name, string $value = null, array $options = array())","Create a textarea input field.",2],["FormBuilder::number","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_number","($name, $value = null, $options = array())","Create a number input field.",2],["FormBuilder::select","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_select","(string $name, array $list = array(), string $selected = null, array $options = array())","Create a select box field.",2],["FormBuilder::selectRange","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_selectRange","(string $name, string $begin, string $end, string $selected = null, array $options = array())","Create a select range field.",2],["FormBuilder::selectYear","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_selectYear","()","Create a select year field.",2],["FormBuilder::selectMonth","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_selectMonth","(string $name, string $selected = null, array $options = array(), string $format = &#039;%B&#039;)","Create a select month field.",2],["FormBuilder::getSelectOption","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_getSelectOption","(string $display, string $value, string $selected)","Get the select option for the given value.",2],["FormBuilder::checkbox","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_checkbox","(string $name, mixed $value = 1, bool $checked = null, array $options = array())","Create a checkbox input field.",2],["FormBuilder::radio","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_radio","(string $name, mixed $value = null, bool $checked = null, array $options = array())","Create a radio button input field.",2],["FormBuilder::reset","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_reset","(string $value, array $attributes = array())","Create a HTML reset input element.",2],["FormBuilder::image","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_image","(string $url, string $name = null, array $attributes = array())","Create a HTML image input element.",2],["FormBuilder::submit","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_submit","(string $value = null, array $options = array())","Create a submit button element.",2],["FormBuilder::button","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_button","(string $value = null, array $options = array())","Create a button element.",2],["FormBuilder::getIdAttribute","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_getIdAttribute","(string $name, array $attributes)","Get the ID attribute for a field name.",2],["FormBuilder::getValueAttribute","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_getValueAttribute","(string $name, string $value = null)","Get the value that should be assigned to the field.",2],["FormBuilder::old","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_old","(string $name)","Get a value from the session's old input.",2],["FormBuilder::oldInputIsEmpty","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_oldInputIsEmpty","()","Determine if the old input is empty.",2],["FormBuilder::getSessionStore","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_getSessionStore","()","Get the session store implementation.",2],["FormBuilder::setSessionStore","Illuminate\\Html\\FormBuilder","Illuminate\/Html\/FormBuilder.html#method_setSessionStore","(<a href=\"Illuminate\/Session\/Store.html\"><abbr title=\"Illuminate\\Session\\Store\">Store<\/abbr><\/a> $session)","Set the session store implementation.",2],["HtmlBuilder::__construct","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method___construct","(<a href=\"Illuminate\/Routing\/UrlGenerator.html\"><abbr title=\"Illuminate\\Routing\\UrlGenerator\">UrlGenerator<\/abbr><\/a> $url = null)","Create a new HTML builder instance.",2],["HtmlBuilder::entities","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_entities","(string $value)","Convert an HTML string to entities.",2],["HtmlBuilder::decode","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_decode","(string $value)","Convert entities to HTML characters.",2],["HtmlBuilder::script","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_script","(string $url, array $attributes = array(), bool $secure = null)","Generate a link to a JavaScript file.",2],["HtmlBuilder::style","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_style","(string $url, array $attributes = array(), bool $secure = null)","Generate a link to a CSS file.",2],["HtmlBuilder::image","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_image","(string $url, string $alt = null, array $attributes = array(), bool $secure = null)","Generate an HTML image element.",2],["HtmlBuilder::link","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_link","(string $url, string $title = null, array $attributes = array(), bool $secure = null)","Generate a HTML link.",2],["HtmlBuilder::secureLink","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_secureLink","(string $url, string $title = null, array $attributes = array())","Generate a HTTPS HTML link.",2],["HtmlBuilder::linkAsset","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_linkAsset","(string $url, string $title = null, array $attributes = array(), bool $secure = null)","Generate a HTML link to an asset.",2],["HtmlBuilder::linkSecureAsset","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_linkSecureAsset","(string $url, string $title = null, array $attributes = array())","Generate a HTTPS HTML link to an asset.",2],["HtmlBuilder::linkRoute","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_linkRoute","(string $name, string $title = null, array $parameters = array(), array $attributes = array())","Generate a HTML link to a named route.",2],["HtmlBuilder::linkAction","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_linkAction","(string $action, string $title = null, array $parameters = array(), array $attributes = array())","Generate a HTML link to a controller action.",2],["HtmlBuilder::mailto","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_mailto","(string $email, string $title = null, array $attributes = array())","Generate a HTML link to an email address.",2],["HtmlBuilder::email","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_email","(string $email)","Obfuscate an e-mail address to prevent spam-bots from",2],["HtmlBuilder::ol","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_ol","(array $list, array $attributes = array())","Generate an ordered list of items.",2],["HtmlBuilder::ul","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_ul","(array $list, array $attributes = array())","Generate an un-ordered list of items.",2],["HtmlBuilder::attributes","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_attributes","(array $attributes)","Build an HTML attribute string from an array.",2],["HtmlBuilder::obfuscate","Illuminate\\Html\\HtmlBuilder","Illuminate\/Html\/HtmlBuilder.html#method_obfuscate","(string $value)","Obfuscate a string to prevent spam-bots from sniffing",2],["HtmlServiceProvider::register","Illuminate\\Html\\HtmlServiceProvider","Illuminate\/Html\/HtmlServiceProvider.html#method_register","()","Register the service provider.",2],["HtmlServiceProvider::provides","Illuminate\\Html\\HtmlServiceProvider","Illuminate\/Html\/HtmlServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["FrameGuard::__construct","Illuminate\\Http\\FrameGuard","Illuminate\/Http\/FrameGuard.html#method___construct","(<abbr title=\"Symfony\\Component\\HttpKernel\\HttpKernelInterface\">HttpKernelInterface<\/abbr> $app)","Create a new FrameGuard instance.",2],["FrameGuard::handle","Illuminate\\Http\\FrameGuard","Illuminate\/Http\/FrameGuard.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Handle the given request and get the response.",2],["JsonResponse::__construct","Illuminate\\Http\\JsonResponse","Illuminate\/Http\/JsonResponse.html#method___construct","(mixed $data = null, int $status = 200, array $headers = array(), int $options)","Constructor.",2],["JsonResponse::getData","Illuminate\\Http\\JsonResponse","Illuminate\/Http\/JsonResponse.html#method_getData","(bool $assoc = false, int $depth = 512)","Get the json_decoded data from the response",2],["JsonResponse::setData","Illuminate\\Http\\JsonResponse","Illuminate\/Http\/JsonResponse.html#method_setData","($data = array())","{@inheritdoc}",2],["JsonResponse::getJsonOptions","Illuminate\\Http\\JsonResponse","Illuminate\/Http\/JsonResponse.html#method_getJsonOptions","()","Get the JSON encoding options.",2],["JsonResponse::setJsonOptions","Illuminate\\Http\\JsonResponse","Illuminate\/Http\/JsonResponse.html#method_setJsonOptions","(int $options)","Set the JSON encoding options.",2],["RedirectResponse::header","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_header","(string $key, string $value, bool $replace = true)","Set a header on the Response.",2],["RedirectResponse::with","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_with","(string $key, mixed $value = null)","Flash a piece of data to the session.",2],["RedirectResponse::withCookie","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_withCookie","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Cookie\">Cookie<\/abbr> $cookie)","Add a cookie to the response.",2],["RedirectResponse::withInput","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_withInput","(array $input = null)","Flash an array of input to the session.",2],["RedirectResponse::onlyInput","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_onlyInput","()","Flash an array of input to the session.",2],["RedirectResponse::exceptInput","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_exceptInput","()","Flash an array of input to the session.",2],["RedirectResponse::withErrors","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_withErrors","(<a href=\"Illuminate\/Support\/Contracts\/MessageProviderInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\MessageProviderInterface\">MessageProviderInterface<\/abbr><\/a>|array $provider, string $key = &#039;default&#039;)","Flash a container of errors to the session.",2],["RedirectResponse::getRequest","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_getRequest","()","Get the request instance.",2],["RedirectResponse::setRequest","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_setRequest","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Set the request instance.",2],["RedirectResponse::getSession","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_getSession","()","Get the session store implementation.",2],["RedirectResponse::setSession","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method_setSession","(<a href=\"Illuminate\/Session\/Store.html\"><abbr title=\"Illuminate\\Session\\Store\">Store<\/abbr><\/a> $session)","Set the session store implementation.",2],["RedirectResponse::__call","Illuminate\\Http\\RedirectResponse","Illuminate\/Http\/RedirectResponse.html#method___call","(string $method, array $parameters)","Dynamically bind flash data in the session.",2],["Request::instance","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_instance","()","Return the Request instance.",2],["Request::method","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_method","()","Get the request method.",2],["Request::root","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_root","()","Get the root URL for the application.",2],["Request::url","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_url","()","Get the URL (no query string) for the request.",2],["Request::fullUrl","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_fullUrl","()","Get the full URL for the request.",2],["Request::path","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_path","()","Get the current path info for the request.",2],["Request::decodedPath","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_decodedPath","()","Get the current encoded path info for the request.",2],["Request::segment","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_segment","(string $index, mixed $default = null)","Get a segment from the URI (1 based index).",2],["Request::segments","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_segments","()","Get all of the segments for the request path.",2],["Request::is","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_is","()","Determine if the current request URI matches a pattern.",2],["Request::ajax","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_ajax","()","Determine if the request is the result of an AJAX call.",2],["Request::secure","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_secure","()","Determine if the request is over HTTPS.",2],["Request::ip","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_ip","()","Returns the client IP address.",2],["Request::ips","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_ips","()","Returns the client IP addresses.",2],["Request::exists","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_exists","(string|array $key)","Determine if the request contains a given input item",2],["Request::has","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_has","(string|array $key)","Determine if the request contains a non-empty value",2],["Request::all","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_all","()","Get all of the input and files for the request.",2],["Request::input","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_input","(string $key = null, mixed $default = null)","Retrieve an input item from the request.",2],["Request::only","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_only","(array $keys)","Get a subset of the items from the input data.",2],["Request::except","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_except","(array $keys)","Get all of the input except for a specified array of",2],["Request::query","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_query","(string $key = null, mixed $default = null)","Retrieve a query string item from the request.",2],["Request::hasCookie","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_hasCookie","(string $key)","Determine if a cookie is set on the request.",2],["Request::cookie","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_cookie","(string $key = null, mixed $default = null)","Retrieve a cookie from the request.",2],["Request::file","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_file","(string $key = null, mixed $default = null)","Retrieve a file from the request.",2],["Request::hasFile","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_hasFile","(string $key)","Determine if the uploaded data contains a file.",2],["Request::header","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_header","(string $key = null, mixed $default = null)","Retrieve a header from the request.",2],["Request::server","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_server","(string $key = null, mixed $default = null)","Retrieve a server variable from the request.",2],["Request::old","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_old","(string $key = null, mixed $default = null)","Retrieve an old input item.",2],["Request::flash","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_flash","(string $filter = null, array $keys = array())","Flash the input for the current request to the session.",2],["Request::flashOnly","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_flashOnly","(mixed $keys)","Flash only some of the input to the session.",2],["Request::flashExcept","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_flashExcept","(mixed $keys)","Flash only some of the input to the session.",2],["Request::flush","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_flush","()","Flush all of the old input from the session.",2],["Request::merge","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_merge","(array $input)","Merge new input into the current request's input array.",2],["Request::replace","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_replace","(array $input)","Replace the input for the current request.",2],["Request::json","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_json","(string $key = null, mixed $default = null)","Get the JSON payload for the request.",2],["Request::isJson","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_isJson","()","Determine if the request is sending JSON.",2],["Request::wantsJson","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_wantsJson","()","Determine if the current request is asking for JSON",2],["Request::format","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_format","(string $default = &#039;html&#039;)","Get the data format expected in the response.",2],["Request::createFromBase","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_createFromBase","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Create an Illuminate request from a Symfony instance.",2],["Request::session","Illuminate\\Http\\Request","Illuminate\/Http\/Request.html#method_session","()","Get the session associated with the request.",2],["Response::setContent","Illuminate\\Http\\Response","Illuminate\/Http\/Response.html#method_setContent","(mixed $content)","Set the content on the response.",2],["Response::getOriginalContent","Illuminate\\Http\\Response","Illuminate\/Http\/Response.html#method_getOriginalContent","()","Get the original response content.",2],["ResponseTrait::header","Illuminate\\Http\\ResponseTrait","Illuminate\/Http\/ResponseTrait.html#method_header","(string $key, string $value, bool $replace = true)","Set a header on the Response.",2],["ResponseTrait::withCookie","Illuminate\\Http\\ResponseTrait","Illuminate\/Http\/ResponseTrait.html#method_withCookie","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Cookie\">Cookie<\/abbr> $cookie)","Add a cookie to the response.",2],["LogServiceProvider::register","Illuminate\\Log\\LogServiceProvider","Illuminate\/Log\/LogServiceProvider.html#method_register","()","Register the service provider.",2],["LogServiceProvider::provides","Illuminate\\Log\\LogServiceProvider","Illuminate\/Log\/LogServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Writer::__construct","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method___construct","(<abbr title=\"Monolog\\Logger\">Logger<\/abbr> $monolog, <a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $dispatcher = null)","Create a new log writer instance.",2],["Writer::useFiles","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_useFiles","(string $path, string $level = &#039;debug&#039;)","Register a file log handler.",2],["Writer::useDailyFiles","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_useDailyFiles","(string $path, int $days, string $level = &#039;debug&#039;)","Register a daily file log handler.",2],["Writer::useErrorLog","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_useErrorLog","(string $level = &#039;debug&#039;, integer $messageType = ErrorLogHandler::OPERATING_SYSTEM)","Register an error_log handler.",2],["Writer::listen","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_listen","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a new callback handler for whena log event is triggered.",2],["Writer::getMonolog","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_getMonolog","()","Get the underlying Monolog instance.",2],["Writer::getEventDispatcher","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_getEventDispatcher","()","Get the event dispatcher instance.",2],["Writer::setEventDispatcher","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_setEventDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $dispatcher)","Set the event dispatcher instance.",2],["Writer::write","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method_write","()","Dynamically pass log calls into the writer.",2],["Writer::__call","Illuminate\\Log\\Writer","Illuminate\/Log\/Writer.html#method___call","(string $method, mixed $parameters)","Dynamically handle error additions.",2],["MailServiceProvider::register","Illuminate\\Mail\\MailServiceProvider","Illuminate\/Mail\/MailServiceProvider.html#method_register","()","Register the service provider.",2],["MailServiceProvider::registerSwiftMailer","Illuminate\\Mail\\MailServiceProvider","Illuminate\/Mail\/MailServiceProvider.html#method_registerSwiftMailer","()","Register the Swift Mailer instance.",2],["MailServiceProvider::provides","Illuminate\\Mail\\MailServiceProvider","Illuminate\/Mail\/MailServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Mailer::__construct","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method___construct","(<a href=\"Illuminate\/View\/Factory.html\"><abbr title=\"Illuminate\\View\\Factory\">Factory<\/abbr><\/a> $views, <abbr title=\"Swift_Mailer\">Swift_Mailer<\/abbr> $swift, <a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events = null)","Create a new Mailer instance.",2],["Mailer::alwaysFrom","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_alwaysFrom","(string $address, string $name = null)","Set the global from address and name.",2],["Mailer::plain","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_plain","(string $view, array $data, mixed $callback)","Send a new message when only a plain part.",2],["Mailer::send","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_send","(string|array $view, array $data, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Send a new message using a view.",2],["Mailer::queue","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_queue","(string|array $view, array $data, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback, string $queue = null)","Queue a new e-mail message for sending.",2],["Mailer::queueOn","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_queueOn","(string $queue, string|array $view, array $data, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Queue a new e-mail message for sending on the given",2],["Mailer::later","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_later","(int $delay, string|array $view, array $data, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback, string $queue = null)","Queue a new e-mail message for sending after (n) seconds.",2],["Mailer::laterOn","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_laterOn","(string $queue, int $delay, string|array $view, array $data, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Queue a new e-mail message for sending after (n) seconds",2],["Mailer::handleQueuedMessage","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_handleQueuedMessage","(<a href=\"Illuminate\/Queue\/Jobs\/Job.html\"><abbr title=\"Illuminate\\Queue\\Jobs\\Job\">Job<\/abbr><\/a> $job, array $data)","Handle a queued e-mail message job.",2],["Mailer::pretend","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_pretend","(bool $value = true)","Tell the mailer to not really send messages.",2],["Mailer::isPretending","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_isPretending","()","Check if the mailer is pretending to send messages.",2],["Mailer::getViewFactory","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_getViewFactory","()","Get the view factory instance.",2],["Mailer::getSwiftMailer","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_getSwiftMailer","()","Get the Swift Mailer instance.",2],["Mailer::failures","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_failures","()","Get the array of failed recipients.",2],["Mailer::setSwiftMailer","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_setSwiftMailer","(<abbr title=\"Swift_Mailer\">Swift_Mailer<\/abbr> $swift)","Set the Swift Mailer instance.",2],["Mailer::setLogger","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_setLogger","(<a href=\"Illuminate\/Log\/Writer.html\"><abbr title=\"Illuminate\\Log\\Writer\">Writer<\/abbr><\/a> $logger)","Set the log writer instance.",2],["Mailer::setQueue","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_setQueue","(<a href=\"Illuminate\/Queue\/QueueManager.html\"><abbr title=\"Illuminate\\Queue\\QueueManager\">QueueManager<\/abbr><\/a> $queue)","Set the queue manager instance.",2],["Mailer::setContainer","Illuminate\\Mail\\Mailer","Illuminate\/Mail\/Mailer.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["Message::__construct","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method___construct","(<abbr title=\"Swift_Message\">Swift_Message<\/abbr> $swift)","Create a new message instance.",2],["Message::from","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_from","(string $address, string $name = null)","Add a \"from\" address to the message.",2],["Message::sender","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_sender","(string $address, string $name = null)","Set the \"sender\" of the message.",2],["Message::returnPath","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_returnPath","(string $address)","Set the \"return path\" of the message.",2],["Message::to","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_to","(string|array $address, string $name = null)","Add a recipient to the message.",2],["Message::cc","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_cc","(string $address, string $name = null)","Add a carbon copy to the message.",2],["Message::bcc","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_bcc","(string $address, string $name = null)","Add a blind carbon copy to the message.",2],["Message::replyTo","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_replyTo","(string $address, string $name = null)","Add a reply to address to the message.",2],["Message::subject","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_subject","(string $subject)","Set the subject of the message.",2],["Message::priority","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_priority","(int $level)","Set the message priority level.",2],["Message::attach","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_attach","(string $file, array $options = array())","Attach a file to the message.",2],["Message::attachData","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_attachData","(string $data, string $name, array $options = array())","Attach in-memory data as an attachment.",2],["Message::embed","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_embed","(string $file)","Embed a file in the message and get the CID.",2],["Message::embedData","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_embedData","(string $data, string $name, string $contentType = null)","Embed in-memory data in the message and get the CID.",2],["Message::getSwiftMessage","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method_getSwiftMessage","()","Get the underlying Swift Message instance.",2],["Message::__call","Illuminate\\Mail\\Message","Illuminate\/Mail\/Message.html#method___call","(string $method, array $parameters)","Dynamically pass missing methods to the Swift instance.",2],["LogTransport::__construct","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method___construct","(<abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger)","Create a new log transport instance.",2],["LogTransport::isStarted","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method_isStarted","()","{@inheritdoc}",2],["LogTransport::start","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method_start","()","{@inheritdoc}",2],["LogTransport::stop","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method_stop","()","{@inheritdoc}",2],["LogTransport::send","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method_send","(<abbr title=\"Swift_Mime_Message\">Swift_Mime_Message<\/abbr> $message, $failedRecipients = null)","{@inheritdoc}",2],["LogTransport::registerPlugin","Illuminate\\Mail\\Transport\\LogTransport","Illuminate\/Mail\/Transport\/LogTransport.html#method_registerPlugin","(<abbr title=\"Swift_Events_EventListener\">Swift_Events_EventListener<\/abbr> $plugin)","{@inheritdoc}",2],["MailgunTransport::__construct","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method___construct","(string $key, string $domain)","Create a new Mailgun transport instance.",2],["MailgunTransport::isStarted","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_isStarted","()","{@inheritdoc}",2],["MailgunTransport::start","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_start","()","{@inheritdoc}",2],["MailgunTransport::stop","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_stop","()","{@inheritdoc}",2],["MailgunTransport::send","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_send","(<abbr title=\"Swift_Mime_Message\">Swift_Mime_Message<\/abbr> $message, $failedRecipients = null)","{@inheritdoc}",2],["MailgunTransport::registerPlugin","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_registerPlugin","(<abbr title=\"Swift_Events_EventListener\">Swift_Events_EventListener<\/abbr> $plugin)","{@inheritdoc}",2],["MailgunTransport::getKey","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_getKey","()","Get the API key being used by the transport.",2],["MailgunTransport::setKey","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_setKey","(string $key)","Set the API key being used by the transport.",2],["MailgunTransport::getDomain","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_getDomain","()","Get the domain being used by the transport.",2],["MailgunTransport::setDomain","Illuminate\\Mail\\Transport\\MailgunTransport","Illuminate\/Mail\/Transport\/MailgunTransport.html#method_setDomain","(string $domain)","Set the domain being used by the transport.",2],["MandrillTransport::__construct","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method___construct","(string $key)","Create a new Mandrill transport instance.",2],["MandrillTransport::isStarted","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_isStarted","()","{@inheritdoc}",2],["MandrillTransport::start","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_start","()","{@inheritdoc}",2],["MandrillTransport::stop","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_stop","()","{@inheritdoc}",2],["MandrillTransport::send","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_send","(<abbr title=\"Swift_Mime_Message\">Swift_Mime_Message<\/abbr> $message, $failedRecipients = null)","{@inheritdoc}",2],["MandrillTransport::registerPlugin","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_registerPlugin","(<abbr title=\"Swift_Events_EventListener\">Swift_Events_EventListener<\/abbr> $plugin)","{@inheritdoc}",2],["MandrillTransport::getKey","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_getKey","()","Get the API key being used by the transport.",2],["MandrillTransport::setKey","Illuminate\\Mail\\Transport\\MandrillTransport","Illuminate\/Mail\/Transport\/MandrillTransport.html#method_setKey","(string $key)","Set the API key being used by the transport.",2],["BootstrapPresenter::getPageLinkWrapper","Illuminate\\Pagination\\BootstrapPresenter","Illuminate\/Pagination\/BootstrapPresenter.html#method_getPageLinkWrapper","(string $url, int $page, string $rel = null)","Get HTML wrapper for a page link.",2],["BootstrapPresenter::getDisabledTextWrapper","Illuminate\\Pagination\\BootstrapPresenter","Illuminate\/Pagination\/BootstrapPresenter.html#method_getDisabledTextWrapper","(string $text)","Get HTML wrapper for disabled text.",2],["BootstrapPresenter::getActivePageWrapper","Illuminate\\Pagination\\BootstrapPresenter","Illuminate\/Pagination\/BootstrapPresenter.html#method_getActivePageWrapper","(string $text)","Get HTML wrapper for active text.",2],["Factory::__construct","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method___construct","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, <a href=\"Illuminate\/View\/Factory.html\"><abbr title=\"Illuminate\\View\\Factory\">Factory<\/abbr><\/a> $view, <abbr title=\"Symfony\\Component\\Translation\\TranslatorInterface\">TranslatorInterface<\/abbr> $trans, string $pageName = &#039;page&#039;)","Create a new pagination factory.",2],["Factory::make","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_make","(array $items, int $total, int|null $perPage = null)","Get a new paginator instance.",2],["Factory::getPaginationView","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getPaginationView","(<a href=\"Illuminate\/Pagination\/Paginator.html\"><abbr title=\"Illuminate\\Pagination\\Paginator\">Paginator<\/abbr><\/a> $paginator, string $view = null)","Get the pagination view.",2],["Factory::getCurrentPage","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getCurrentPage","()","Get the number of the current page.",2],["Factory::setCurrentPage","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setCurrentPage","(int $number)","Set the number of the current page.",2],["Factory::getCurrentUrl","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getCurrentUrl","()","Get the root URL for the request.",2],["Factory::setBaseUrl","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setBaseUrl","(string $baseUrl)","Set the base URL in use by the paginator.",2],["Factory::setPageName","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setPageName","(string $pageName)","Set the input page parameter name used by the paginator.",2],["Factory::getPageName","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getPageName","()","Get the input page parameter name used by the paginator.",2],["Factory::getViewName","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getViewName","(string $view = null)","Get the name of the pagination view.",2],["Factory::setViewName","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setViewName","(string $viewName)","Set the name of the pagination view.",2],["Factory::getLocale","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getLocale","()","Get the locale of the paginator.",2],["Factory::setLocale","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setLocale","(string $locale)","Set the locale of the paginator.",2],["Factory::getRequest","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getRequest","()","Get the active request instance.",2],["Factory::setRequest","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setRequest","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Set the active request instance.",2],["Factory::getViewFactory","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getViewFactory","()","Get the current view factory.",2],["Factory::setViewFactory","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_setViewFactory","(<a href=\"Illuminate\/View\/Factory.html\"><abbr title=\"Illuminate\\View\\Factory\">Factory<\/abbr><\/a> $view)","Set the current view factory.",2],["Factory::getTranslator","Illuminate\\Pagination\\Factory","Illuminate\/Pagination\/Factory.html#method_getTranslator","()","Get the translator instance.",2],["PaginationServiceProvider::register","Illuminate\\Pagination\\PaginationServiceProvider","Illuminate\/Pagination\/PaginationServiceProvider.html#method_register","()","Register the service provider.",2],["PaginationServiceProvider::provides","Illuminate\\Pagination\\PaginationServiceProvider","Illuminate\/Pagination\/PaginationServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Paginator::__construct","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method___construct","(<a href=\"Illuminate\/Pagination\/Factory.html\"><abbr title=\"Illuminate\\Pagination\\Factory\">Factory<\/abbr><\/a> $factory, array $items, int $total, int|null $perPage = null)","Create a new Paginator instance.",2],["Paginator::setupPaginationContext","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_setupPaginationContext","()","Setup the pagination context (current and last page).",2],["Paginator::links","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_links","(string $view = null)","Get the pagination links view.",2],["Paginator::getUrl","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getUrl","(int $page)","Get a URL for a given page number.",2],["Paginator::fragment","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_fragment","(string|null $fragment = null)","Get \/ set the URL fragment to be appended to URLs.",2],["Paginator::appends","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_appends","(string $key, string $value = null)","Add a query string value to the paginator.",2],["Paginator::addQuery","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_addQuery","(string $key, string $value)","Add a query string value to the paginator.",2],["Paginator::isQuickPaginating","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_isQuickPaginating","()","Determine if the paginator is doing \"quick\" pagination.",2],["Paginator::getCurrentPage","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getCurrentPage","(int|null $total = null)","Get the current page for the request.",2],["Paginator::getLastPage","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getLastPage","()","Get the last page that should be available.",2],["Paginator::getFrom","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getFrom","()","Get the number of the first item on the paginator.",2],["Paginator::getTo","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getTo","()","Get the number of the last item on the paginator.",2],["Paginator::getPerPage","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getPerPage","()","Get the number of items to be displayed per page.",2],["Paginator::getCollection","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getCollection","()","Get a collection instance containing the items.",2],["Paginator::getItems","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getItems","()","Get the items being paginated.",2],["Paginator::setItems","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_setItems","(mixed $items)","Set the items being paginated.",2],["Paginator::getTotal","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getTotal","()","Get the total number of items in the collection.",2],["Paginator::setBaseUrl","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_setBaseUrl","(string $baseUrl)","Set the base URL in use by the paginator.",2],["Paginator::getFactory","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getFactory","()","Get the pagination factory.",2],["Paginator::getIterator","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_getIterator","()","Get an iterator for the items.",2],["Paginator::isEmpty","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_isEmpty","()","Determine if the list of items is empty or not.",2],["Paginator::count","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_count","()","Get the number of items for the current page.",2],["Paginator::offsetExists","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_offsetExists","(mixed $key)","Determine if the given item exists.",2],["Paginator::offsetGet","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_offsetGet","(mixed $key)","Get the item at the given offset.",2],["Paginator::offsetSet","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_offsetSet","(mixed $key, mixed $value)","Set the item at the given offset.",2],["Paginator::offsetUnset","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_offsetUnset","(mixed $key)","Unset the item at the given key.",2],["Paginator::toArray","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_toArray","()","Get the instance as an array.",2],["Paginator::toJson","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method_toJson","(int $options)","Convert the object to its JSON representation.",2],["Paginator::__call","Illuminate\\Pagination\\Paginator","Illuminate\/Pagination\/Paginator.html#method___call","(string $method, array $arguments)","Call a method on the underlying Collection",2],["Presenter::__construct","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method___construct","(<a href=\"Illuminate\/Pagination\/Paginator.html\"><abbr title=\"Illuminate\\Pagination\\Paginator\">Paginator<\/abbr><\/a> $paginator)","Create a new Presenter instance.",2],["Presenter::getPageLinkWrapper","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getPageLinkWrapper","(string $url, int $page, string $rel = null)","Get HTML wrapper for a page link.",2],["Presenter::getDisabledTextWrapper","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getDisabledTextWrapper","(string $text)","Get HTML wrapper for disabled text.",2],["Presenter::getActivePageWrapper","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getActivePageWrapper","(string $text)","Get HTML wrapper for active text.",2],["Presenter::render","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_render","()","Render the Pagination contents.",2],["Presenter::getPageRange","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getPageRange","(int $start, int $end)","Create a range of pagination links.",2],["Presenter::getAdjacentRange","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getAdjacentRange","()","Get the page range for the current page window.",2],["Presenter::getStart","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getStart","()","Create the beginning leader of a pagination slider.",2],["Presenter::getFinish","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getFinish","()","Create the ending cap of a pagination slider.",2],["Presenter::getPrevious","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getPrevious","(string $text = &#039;&amp;laquo;&#039;)","Get the previous page pagination element.",2],["Presenter::getNext","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getNext","(string $text = &#039;&amp;raquo;&#039;)","Get the next page pagination element.",2],["Presenter::getDots","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getDots","()","Get a pagination \"dot\" element.",2],["Presenter::getLink","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_getLink","(mixed $page)","Create a pagination slider link.",2],["Presenter::setCurrentPage","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_setCurrentPage","(int $page)","Set the value of the current page.",2],["Presenter::setLastPage","Illuminate\\Pagination\\Presenter","Illuminate\/Pagination\/Presenter.html#method_setLastPage","(int $page)","Set the value of the last page.",2],["BeanstalkdQueue::__construct","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method___construct","(<abbr title=\"Pheanstalk_Pheanstalk\">Pheanstalk_Pheanstalk<\/abbr> $pheanstalk, string $default, int $timeToRun)","Create a new Beanstalkd queue instance.",2],["BeanstalkdQueue::push","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["BeanstalkdQueue::pushRaw","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["BeanstalkdQueue::later","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["BeanstalkdQueue::pop","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["BeanstalkdQueue::deleteMessage","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_deleteMessage","(string $queue, string $id)","Delete a message from the Beanstalk queue.",2],["BeanstalkdQueue::getQueue","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_getQueue","(string|null $queue)","Get the queue or return the default.",2],["BeanstalkdQueue::getPheanstalk","Illuminate\\Queue\\BeanstalkdQueue","Illuminate\/Queue\/BeanstalkdQueue.html#method_getPheanstalk","()","Get the underlying Pheanstalk instance.",2],["Manager::__construct","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new queue capsule manager.",2],["Manager::connection","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_connection","(string $connection = null)","Get a connection instance from the global manager.",2],["Manager::push","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null, string $connection = null)","Push a new job onto the queue.",2],["Manager::bulk","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_bulk","(array $jobs, mixed $data = &#039;&#039;, string $queue = null, string $connection = null)","Push a new an array of jobs onto the queue.",2],["Manager::later","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null, string $connection = null)","Push a new job onto the queue after a delay.",2],["Manager::getConnection","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_getConnection","(string $name = null)","Get a registered connection instance.",2],["Manager::addConnection","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_addConnection","(array $config, string $name = &#039;default&#039;)","Register a connection with the manager.",2],["Manager::getQueueManager","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method_getQueueManager","()","Get the queue manager instance.",2],["Manager::__call","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method___call","(string $method, array $parameters)","Pass dynamic instance methods to the manager.",2],["Manager::__callStatic","Illuminate\\Queue\\Capsule\\Manager","Illuminate\/Queue\/Capsule\/Manager.html#method___callStatic","(string $method, array $parameters)","Dynamically pass methods to the default connection.",2],["BeanstalkdConnector::connect","Illuminate\\Queue\\Connectors\\BeanstalkdConnector","Illuminate\/Queue\/Connectors\/BeanstalkdConnector.html#method_connect","(array $config)","Establish a queue connection.",2],["ConnectorInterface::connect","Illuminate\\Queue\\Connectors\\ConnectorInterface","Illuminate\/Queue\/Connectors\/ConnectorInterface.html#method_connect","(array $config)","Establish a queue connection.",2],["IronConnector::__construct","Illuminate\\Queue\\Connectors\\IronConnector","Illuminate\/Queue\/Connectors\/IronConnector.html#method___construct","(<a href=\"Illuminate\/Encryption\/Encrypter.html\"><abbr title=\"Illuminate\\Encryption\\Encrypter\">Encrypter<\/abbr><\/a> $crypt, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Create a new Iron connector instance.",2],["IronConnector::connect","Illuminate\\Queue\\Connectors\\IronConnector","Illuminate\/Queue\/Connectors\/IronConnector.html#method_connect","(array $config)","Establish a queue connection.",2],["RedisConnector::__construct","Illuminate\\Queue\\Connectors\\RedisConnector","Illuminate\/Queue\/Connectors\/RedisConnector.html#method___construct","(<a href=\"Illuminate\/Redis\/Database.html\"><abbr title=\"Illuminate\\Redis\\Database\">Database<\/abbr><\/a> $redis, string|null $connection = null)","Create a new Redis queue connector instance.",2],["RedisConnector::connect","Illuminate\\Queue\\Connectors\\RedisConnector","Illuminate\/Queue\/Connectors\/RedisConnector.html#method_connect","(array $config)","Establish a queue connection.",2],["SqsConnector::connect","Illuminate\\Queue\\Connectors\\SqsConnector","Illuminate\/Queue\/Connectors\/SqsConnector.html#method_connect","(array $config)","Establish a queue connection.",2],["SyncConnector::connect","Illuminate\\Queue\\Connectors\\SyncConnector","Illuminate\/Queue\/Connectors\/SyncConnector.html#method_connect","(array $config)","Establish a queue connection.",2],["FailedTableCommand::__construct","Illuminate\\Queue\\Console\\FailedTableCommand","Illuminate\/Queue\/Console\/FailedTableCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new console command instance.",2],["FailedTableCommand::fire","Illuminate\\Queue\\Console\\FailedTableCommand","Illuminate\/Queue\/Console\/FailedTableCommand.html#method_fire","()","Execute the console command.",2],["FlushFailedCommand::fire","Illuminate\\Queue\\Console\\FlushFailedCommand","Illuminate\/Queue\/Console\/FlushFailedCommand.html#method_fire","()","Execute the console command.",2],["ForgetFailedCommand::fire","Illuminate\\Queue\\Console\\ForgetFailedCommand","Illuminate\/Queue\/Console\/ForgetFailedCommand.html#method_fire","()","Execute the console command.",2],["ListFailedCommand::fire","Illuminate\\Queue\\Console\\ListFailedCommand","Illuminate\/Queue\/Console\/ListFailedCommand.html#method_fire","()","Execute the console command.",2],["ListenCommand::__construct","Illuminate\\Queue\\Console\\ListenCommand","Illuminate\/Queue\/Console\/ListenCommand.html#method___construct","(<a href=\"Illuminate\/Queue\/Listener.html\"><abbr title=\"Illuminate\\Queue\\Listener\">Listener<\/abbr><\/a> $listener)","Create a new queue listen command.",2],["ListenCommand::fire","Illuminate\\Queue\\Console\\ListenCommand","Illuminate\/Queue\/Console\/ListenCommand.html#method_fire","()","Execute the console command.",2],["RestartCommand::fire","Illuminate\\Queue\\Console\\RestartCommand","Illuminate\/Queue\/Console\/RestartCommand.html#method_fire","()","Execute the console command.",2],["RetryCommand::fire","Illuminate\\Queue\\Console\\RetryCommand","Illuminate\/Queue\/Console\/RetryCommand.html#method_fire","()","Execute the console command.",2],["SubscribeCommand::fire","Illuminate\\Queue\\Console\\SubscribeCommand","Illuminate\/Queue\/Console\/SubscribeCommand.html#method_fire","()","Execute the console command.",2],["WorkCommand::__construct","Illuminate\\Queue\\Console\\WorkCommand","Illuminate\/Queue\/Console\/WorkCommand.html#method___construct","(<a href=\"Illuminate\/Queue\/Worker.html\"><abbr title=\"Illuminate\\Queue\\Worker\">Worker<\/abbr><\/a> $worker)","Create a new queue listen command.",2],["WorkCommand::fire","Illuminate\\Queue\\Console\\WorkCommand","Illuminate\/Queue\/Console\/WorkCommand.html#method_fire","()","Execute the console command.",2],["FailConsoleServiceProvider::register","Illuminate\\Queue\\FailConsoleServiceProvider","Illuminate\/Queue\/FailConsoleServiceProvider.html#method_register","()","Register the service provider.",2],["FailConsoleServiceProvider::provides","Illuminate\\Queue\\FailConsoleServiceProvider","Illuminate\/Queue\/FailConsoleServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["DatabaseFailedJobProvider::__construct","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method___construct","(<a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $resolver, string $database, string $table)","Create a new database failed job provider.",2],["DatabaseFailedJobProvider::log","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method_log","(string $connection, string $queue, string $payload)","Log a failed job into storage.",2],["DatabaseFailedJobProvider::all","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method_all","()","Get a list of all of the failed jobs.",2],["DatabaseFailedJobProvider::find","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method_find","(mixed $id)","Get a single failed job.",2],["DatabaseFailedJobProvider::forget","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method_forget","(mixed $id)","Delete a single failed job from storage.",2],["DatabaseFailedJobProvider::flush","Illuminate\\Queue\\Failed\\DatabaseFailedJobProvider","Illuminate\/Queue\/Failed\/DatabaseFailedJobProvider.html#method_flush","()","Flush all of the failed jobs from storage.",2],["FailedJobProviderInterface::log","Illuminate\\Queue\\Failed\\FailedJobProviderInterface","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html#method_log","(string $connection, string $queue, string $payload)","Log a failed job into storage.",2],["FailedJobProviderInterface::all","Illuminate\\Queue\\Failed\\FailedJobProviderInterface","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html#method_all","()","Get a list of all of the failed jobs.",2],["FailedJobProviderInterface::find","Illuminate\\Queue\\Failed\\FailedJobProviderInterface","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html#method_find","(mixed $id)","Get a single failed job.",2],["FailedJobProviderInterface::forget","Illuminate\\Queue\\Failed\\FailedJobProviderInterface","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html#method_forget","(mixed $id)","Delete a single failed job from storage.",2],["FailedJobProviderInterface::flush","Illuminate\\Queue\\Failed\\FailedJobProviderInterface","Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html#method_flush","()","Flush all of the failed jobs from storage.",2],["IronQueue::__construct","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method___construct","(<abbr title=\"IronMQ\">IronMQ<\/abbr> $iron, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, string $default, bool $shouldEncrypt = false)","Create a new IronMQ queue instance.",2],["IronQueue::push","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["IronQueue::pushRaw","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["IronQueue::recreate","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_recreate","(string $payload, string $queue = null, int $delay)","Push a raw payload onto the queue after encrypting",2],["IronQueue::later","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["IronQueue::pop","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["IronQueue::deleteMessage","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_deleteMessage","(string $queue, string $id)","Delete a message from the Iron queue.",2],["IronQueue::marshal","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_marshal","()","Marshal a push queue request and fire the job.",2],["IronQueue::getQueue","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_getQueue","(string|null $queue)","Get the queue or return the default.",2],["IronQueue::getIron","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_getIron","()","Get the underlying IronMQ instance.",2],["IronQueue::getRequest","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_getRequest","()","Get the request instance.",2],["IronQueue::setRequest","Illuminate\\Queue\\IronQueue","Illuminate\/Queue\/IronQueue.html#method_setRequest","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Set the request instance.",2],["BeanstalkdJob::__construct","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container, <abbr title=\"Pheanstalk_Pheanstalk\">Pheanstalk_Pheanstalk<\/abbr> $pheanstalk, <abbr title=\"Pheanstalk_Job\">Pheanstalk_Job<\/abbr> $job, string $queue)","Create a new job instance.",2],["BeanstalkdJob::fire","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_fire","()","Fire the job.",2],["BeanstalkdJob::getRawBody","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_getRawBody","()","Get the raw body string for the job.",2],["BeanstalkdJob::delete","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_delete","()","Delete the job from the queue.",2],["BeanstalkdJob::release","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_release","(int $delay)","Release the job back into the queue.",2],["BeanstalkdJob::bury","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_bury","()","Bury the job in the queue.",2],["BeanstalkdJob::attempts","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_attempts","()","Get the number of times the job has been attempted.",2],["BeanstalkdJob::getJobId","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_getJobId","()","Get the job identifier.",2],["BeanstalkdJob::getContainer","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_getContainer","()","Get the IoC container instance.",2],["BeanstalkdJob::getPheanstalk","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_getPheanstalk","()","Get the underlying Pheanstalk instance.",2],["BeanstalkdJob::getPheanstalkJob","Illuminate\\Queue\\Jobs\\BeanstalkdJob","Illuminate\/Queue\/Jobs\/BeanstalkdJob.html#method_getPheanstalkJob","()","Get the underlying Pheanstalk job.",2],["IronJob::__construct","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container, <a href=\"Illuminate\/Queue\/IronQueue.html\"><abbr title=\"Illuminate\\Queue\\IronQueue\">IronQueue<\/abbr><\/a> $iron, object $job, bool $pushed = false)","Create a new job instance.",2],["IronJob::fire","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_fire","()","Fire the job.",2],["IronJob::getRawBody","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getRawBody","()","Get the raw body string for the job.",2],["IronJob::delete","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_delete","()","Delete the job from the queue.",2],["IronJob::release","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_release","(int $delay)","Release the job back into the queue.",2],["IronJob::attempts","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_attempts","()","Get the number of times the job has been attempted.",2],["IronJob::getJobId","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getJobId","()","Get the job identifier.",2],["IronJob::getContainer","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getContainer","()","Get the IoC container instance.",2],["IronJob::getIron","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getIron","()","Get the underlying Iron queue instance.",2],["IronJob::getIronJob","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getIronJob","()","Get the underlying IronMQ job.",2],["IronJob::getQueue","Illuminate\\Queue\\Jobs\\IronJob","Illuminate\/Queue\/Jobs\/IronJob.html#method_getQueue","()","Get the name of the queue the job belongs to.",2],["Job::fire","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_fire","()","Fire the job.",2],["Job::delete","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_delete","()","Delete the job from the queue.",2],["Job::isDeleted","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_isDeleted","()","Determine if the job has been deleted.",2],["Job::release","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_release","(int $delay)","Release the job back into the queue.",2],["Job::attempts","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_attempts","()","Get the number of times the job has been attempted.",2],["Job::getRawBody","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_getRawBody","()","Get the raw body string for the job.",2],["Job::autoDelete","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_autoDelete","()","Determine if job should be auto-deleted.",2],["Job::getName","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_getName","()","Get the name of the queued job class.",2],["Job::getQueue","Illuminate\\Queue\\Jobs\\Job","Illuminate\/Queue\/Jobs\/Job.html#method_getQueue","()","Get the name of the queue the job belongs to.",2],["RedisJob::__construct","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container, <a href=\"Illuminate\/Queue\/RedisQueue.html\"><abbr title=\"Illuminate\\Queue\\RedisQueue\">RedisQueue<\/abbr><\/a> $redis, string $job, string $queue)","Create a new job instance.",2],["RedisJob::fire","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_fire","()","Fire the job.",2],["RedisJob::getRawBody","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_getRawBody","()","Get the raw body string for the job.",2],["RedisJob::delete","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_delete","()","Delete the job from the queue.",2],["RedisJob::release","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_release","(int $delay)","Release the job back into the queue.",2],["RedisJob::attempts","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_attempts","()","Get the number of times the job has been attempted.",2],["RedisJob::getJobId","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_getJobId","()","Get the job identifier.",2],["RedisJob::getContainer","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_getContainer","()","Get the IoC container instance.",2],["RedisJob::getRedisQueue","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_getRedisQueue","()","Get the underlying queue driver instance.",2],["RedisJob::getRedisJob","Illuminate\\Queue\\Jobs\\RedisJob","Illuminate\/Queue\/Jobs\/RedisJob.html#method_getRedisJob","()","Get the underlying Redis job.",2],["SqsJob::__construct","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container, <abbr title=\"Aws\\Sqs\\SqsClient\">SqsClient<\/abbr> $sqs, string $queue, array $job)","Create a new job instance.",2],["SqsJob::fire","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_fire","()","Fire the job.",2],["SqsJob::getRawBody","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_getRawBody","()","Get the raw body string for the job.",2],["SqsJob::delete","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_delete","()","Delete the job from the queue.",2],["SqsJob::release","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_release","(int $delay)","Release the job back into the queue.",2],["SqsJob::attempts","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_attempts","()","Get the number of times the job has been attempted.",2],["SqsJob::getJobId","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_getJobId","()","Get the job identifier.",2],["SqsJob::getContainer","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_getContainer","()","Get the IoC container instance.",2],["SqsJob::getSqs","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_getSqs","()","Get the underlying SQS client instance.",2],["SqsJob::getSqsJob","Illuminate\\Queue\\Jobs\\SqsJob","Illuminate\/Queue\/Jobs\/SqsJob.html#method_getSqsJob","()","Get the underlying raw SQS job.",2],["SyncJob::__construct","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method___construct","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container, string $job, string $data = &#039;&#039;)","Create a new job instance.",2],["SyncJob::fire","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method_fire","()","Fire the job.",2],["SyncJob::getRawBody","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method_getRawBody","()","Get the raw body string for the job.",2],["SyncJob::release","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method_release","(int $delay)","Release the job back into the queue.",2],["SyncJob::attempts","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method_attempts","()","Get the number of times the job has been attempted.",2],["SyncJob::getJobId","Illuminate\\Queue\\Jobs\\SyncJob","Illuminate\/Queue\/Jobs\/SyncJob.html#method_getJobId","()","Get the job identifier.",2],["Listener::__construct","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method___construct","(string $commandPath)","Create a new queue listener.",2],["Listener::listen","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_listen","(string $connection, string $queue, string $delay, string $memory, int $timeout = 60)","Listen to the given queue connection.",2],["Listener::runProcess","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_runProcess","(<abbr title=\"Symfony\\Component\\Process\\Process\">Process<\/abbr> $process, int $memory)","Run the given process.",2],["Listener::makeProcess","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_makeProcess","(string $connection, string $queue, int $delay, int $memory, int $timeout)","Create a new Symfony process for the worker.",2],["Listener::memoryExceeded","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_memoryExceeded","(int $memoryLimit)","Determine if the memory limit has been exceeded.",2],["Listener::stop","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_stop","()","Stop listening and bail out of the script.",2],["Listener::setOutputHandler","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_setOutputHandler","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $outputHandler)","Set the output handler callback.",2],["Listener::getEnvironment","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_getEnvironment","()","Get the current listener environment.",2],["Listener::setEnvironment","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_setEnvironment","(string $environment)","Set the current environment.",2],["Listener::getSleep","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_getSleep","()","Get the amount of seconds to wait before polling the",2],["Listener::setSleep","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_setSleep","(int $sleep)","Set the amount of seconds to wait before polling the",2],["Listener::setMaxTries","Illuminate\\Queue\\Listener","Illuminate\/Queue\/Listener.html#method_setMaxTries","(int $tries)","Set the amount of times to try a job before logging",2],["Queue::marshal","Illuminate\\Queue\\Queue","Illuminate\/Queue\/Queue.html#method_marshal","()","Marshal a push queue request and fire the job.",2],["Queue::bulk","Illuminate\\Queue\\Queue","Illuminate\/Queue\/Queue.html#method_bulk","(array $jobs, mixed $data = &#039;&#039;, string $queue = null)","Push a new an array of jobs onto the queue.",2],["Queue::getTime","Illuminate\\Queue\\Queue","Illuminate\/Queue\/Queue.html#method_getTime","()","Get the current UNIX timestamp.",2],["Queue::setContainer","Illuminate\\Queue\\Queue","Illuminate\/Queue\/Queue.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["Queue::setEncrypter","Illuminate\\Queue\\Queue","Illuminate\/Queue\/Queue.html#method_setEncrypter","(<a href=\"Illuminate\/Encryption\/Encrypter.html\"><abbr title=\"Illuminate\\Encryption\\Encrypter\">Encrypter<\/abbr><\/a> $crypt)","Set the encrypter instance.",2],["QueueInterface::push","Illuminate\\Queue\\QueueInterface","Illuminate\/Queue\/QueueInterface.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["QueueInterface::pushRaw","Illuminate\\Queue\\QueueInterface","Illuminate\/Queue\/QueueInterface.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["QueueInterface::later","Illuminate\\Queue\\QueueInterface","Illuminate\/Queue\/QueueInterface.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["QueueInterface::pop","Illuminate\\Queue\\QueueInterface","Illuminate\/Queue\/QueueInterface.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["QueueManager::__construct","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new queue manager instance.",2],["QueueManager::looping","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_looping","(mixed $callback)","Register an event listener for the daemon queue loop.",2],["QueueManager::failing","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_failing","(mixed $callback)","Register an event listener for the failed job event.",2],["QueueManager::stopping","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_stopping","(mixed $callback)","Register an event listener for the daemon queue stopping.",2],["QueueManager::connected","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_connected","(string $name = null)","Determine if the driver is connected.",2],["QueueManager::connection","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_connection","(string $name = null)","Resolve a queue connection instance.",2],["QueueManager::extend","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_extend","(string $driver, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver)","Add a queue connection resolver.",2],["QueueManager::addConnector","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_addConnector","(string $driver, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver)","Add a queue connection resolver.",2],["QueueManager::getDefaultDriver","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_getDefaultDriver","()","Get the name of the default queue connection.",2],["QueueManager::setDefaultDriver","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_setDefaultDriver","(string $name)","Set the name of the default queue connection.",2],["QueueManager::getName","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_getName","(string $connection = null)","Get the full name for the given connection.",2],["QueueManager::isDownForMaintenance","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method_isDownForMaintenance","()","Determine if the application is in maintenance mode.",2],["QueueManager::__call","Illuminate\\Queue\\QueueManager","Illuminate\/Queue\/QueueManager.html#method___call","(string $method, array $parameters)","Dynamically pass calls to the default connection.",2],["QueueServiceProvider::register","Illuminate\\Queue\\QueueServiceProvider","Illuminate\/Queue\/QueueServiceProvider.html#method_register","()","Register the service provider.",2],["QueueServiceProvider::registerRestartCommand","Illuminate\\Queue\\QueueServiceProvider","Illuminate\/Queue\/QueueServiceProvider.html#method_registerRestartCommand","()","Register the queue restart console command.",2],["QueueServiceProvider::registerConnectors","Illuminate\\Queue\\QueueServiceProvider","Illuminate\/Queue\/QueueServiceProvider.html#method_registerConnectors","(<a href=\"Illuminate\/Queue\/QueueManager.html\"><abbr title=\"Illuminate\\Queue\\QueueManager\">QueueManager<\/abbr><\/a> $manager)","Register the connectors on the queue manager.",2],["QueueServiceProvider::provides","Illuminate\\Queue\\QueueServiceProvider","Illuminate\/Queue\/QueueServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["RedisQueue::__construct","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method___construct","(<a href=\"Illuminate\/Redis\/Database.html\"><abbr title=\"Illuminate\\Redis\\Database\">Database<\/abbr><\/a> $redis, string $default = &#039;default&#039;, string $connection = null)","Create a new Redis queue instance.",2],["RedisQueue::push","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["RedisQueue::pushRaw","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["RedisQueue::later","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["RedisQueue::release","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_release","(string $queue, string $payload, int $delay, int $attempts)","Release a reserved job back onto the queue.",2],["RedisQueue::pop","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["RedisQueue::deleteReserved","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_deleteReserved","(string $queue, string $job)","Delete a reserved job from the queue.",2],["RedisQueue::migrateExpiredJobs","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_migrateExpiredJobs","(string $from, string $to)","Migrate the delayed jobs that are ready to the regular",2],["RedisQueue::getRedis","Illuminate\\Queue\\RedisQueue","Illuminate\/Queue\/RedisQueue.html#method_getRedis","()","Get the underlying Redis instance.",2],["SqsQueue::__construct","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method___construct","(<abbr title=\"Aws\\Sqs\\SqsClient\">SqsClient<\/abbr> $sqs, string $default)","Create a new Amazon SQS queue instance.",2],["SqsQueue::push","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["SqsQueue::pushRaw","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["SqsQueue::later","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["SqsQueue::pop","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["SqsQueue::getQueue","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_getQueue","(string|null $queue)","Get the queue or return the default.",2],["SqsQueue::getSqs","Illuminate\\Queue\\SqsQueue","Illuminate\/Queue\/SqsQueue.html#method_getSqs","()","Get the underlying SQS instance.",2],["SyncQueue::push","Illuminate\\Queue\\SyncQueue","Illuminate\/Queue\/SyncQueue.html#method_push","(string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue.",2],["SyncQueue::pushRaw","Illuminate\\Queue\\SyncQueue","Illuminate\/Queue\/SyncQueue.html#method_pushRaw","(string $payload, string $queue = null, array $options = array())","Push a raw payload onto the queue.",2],["SyncQueue::later","Illuminate\\Queue\\SyncQueue","Illuminate\/Queue\/SyncQueue.html#method_later","(<a href=\"http:\/\/php.net\/DateTime\"><abbr title=\"DateTime\">DateTime<\/abbr><\/a>|int $delay, string $job, mixed $data = &#039;&#039;, string $queue = null)","Push a new job onto the queue after a delay.",2],["SyncQueue::pop","Illuminate\\Queue\\SyncQueue","Illuminate\/Queue\/SyncQueue.html#method_pop","(string $queue = null)","Pop the next job off of the queue.",2],["Worker::__construct","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method___construct","(<a href=\"Illuminate\/Queue\/QueueManager.html\"><abbr title=\"Illuminate\\Queue\\QueueManager\">QueueManager<\/abbr><\/a> $manager, <a href=\"Illuminate\/Queue\/Failed\/FailedJobProviderInterface.html\"><abbr title=\"Illuminate\\Queue\\Failed\\FailedJobProviderInterface\">FailedJobProviderInterface<\/abbr><\/a> $failer = null, <a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events = null)","Create a new queue worker.",2],["Worker::daemon","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_daemon","(string $connectionName, string $queue = null, int $delay, int $memory = 128, int $sleep = 3, int $maxTries)","Listen to the given queue in a loop.",2],["Worker::pop","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_pop","(string $connectionName, string $queue = null, int $delay, int $sleep = 3, int $maxTries)","Listen to the given queue.",2],["Worker::process","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_process","(string $connection, <a href=\"Illuminate\/Queue\/Jobs\/Job.html\"><abbr title=\"Illuminate\\Queue\\Jobs\\Job\">Job<\/abbr><\/a> $job, int $maxTries, int $delay)","Process a given job from the queue.",2],["Worker::memoryExceeded","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_memoryExceeded","(int $memoryLimit)","Determine if the memory limit has been exceeded.",2],["Worker::stop","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_stop","()","Stop listening and bail out of the script.",2],["Worker::sleep","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_sleep","(int $seconds)","Sleep the script for a given number of seconds.",2],["Worker::setDaemonExceptionHandler","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_setDaemonExceptionHandler","(<a href=\"Illuminate\/Exception\/Handler.html\"><abbr title=\"Illuminate\\Exception\\Handler\">Handler<\/abbr><\/a> $handler)","Set the exception handler to use in Daemon mode.",2],["Worker::setCache","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_setCache","(<a href=\"Illuminate\/Cache\/Repository.html\"><abbr title=\"Illuminate\\Cache\\Repository\">Repository<\/abbr><\/a> $cache)","Set the cache repository implementation.",2],["Worker::getManager","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_getManager","()","Get the queue manager instance.",2],["Worker::setManager","Illuminate\\Queue\\Worker","Illuminate\/Queue\/Worker.html#method_setManager","(<a href=\"Illuminate\/Queue\/QueueManager.html\"><abbr title=\"Illuminate\\Queue\\QueueManager\">QueueManager<\/abbr><\/a> $manager)","Set the queue manager instance.",2],["Database::__construct","Illuminate\\Redis\\Database","Illuminate\/Redis\/Database.html#method___construct","(array $servers = array())","Create a new Redis connection instance.",2],["Database::connection","Illuminate\\Redis\\Database","Illuminate\/Redis\/Database.html#method_connection","(string $name = &#039;default&#039;)","Get a specific Redis connection instance.",2],["Database::command","Illuminate\\Redis\\Database","Illuminate\/Redis\/Database.html#method_command","(string $method, array $parameters = array())","Run a command against the Redis database.",2],["Database::__call","Illuminate\\Redis\\Database","Illuminate\/Redis\/Database.html#method___call","(string $method, array $parameters)","Dynamically make a Redis command.",2],["RedisServiceProvider::register","Illuminate\\Redis\\RedisServiceProvider","Illuminate\/Redis\/RedisServiceProvider.html#method_register","()","Register the service provider.",2],["RedisServiceProvider::provides","Illuminate\\Redis\\RedisServiceProvider","Illuminate\/Redis\/RedisServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Connection::__construct","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method___construct","($name, $host, $username, array $auth, <a href=\"Illuminate\/Remote\/GatewayInterface.html\"><abbr title=\"Illuminate\\Remote\\GatewayInterface\">GatewayInterface<\/abbr><\/a> $gateway = null)","Create a new SSH connection instance.",2],["Connection::define","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_define","(string $task, string|array $commands)","Define a set of commands as a task.",2],["Connection::task","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_task","(string $task, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a task against the connection.",2],["Connection::run","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_run","(string|array $commands, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a set of commands against the connection.",2],["Connection::get","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_get","(string $remote, string $local)","Download the contents of a remote file.",2],["Connection::getString","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_getString","(string $remote)","Get the contents of a remote file.",2],["Connection::put","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_put","(string $local, string $remote)","Upload a local file to the server.",2],["Connection::putString","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_putString","(string $remote, string $contents)","Upload a string to to the given file on the server.",2],["Connection::display","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_display","(string $line)","Display the given line using the default output.",2],["Connection::status","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_status","()","Get the exit status of the last command.",2],["Connection::getGateway","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_getGateway","()","Get the gateway implementation.",2],["Connection::getOutput","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_getOutput","()","Get the output implementation for the connection.",2],["Connection::setOutput","Illuminate\\Remote\\Connection","Illuminate\/Remote\/Connection.html#method_setOutput","(<abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","Set the output implementation.",2],["ConnectionInterface::define","Illuminate\\Remote\\ConnectionInterface","Illuminate\/Remote\/ConnectionInterface.html#method_define","(string $task, string|array $commands)","Define a set of commands as a task.",2],["ConnectionInterface::task","Illuminate\\Remote\\ConnectionInterface","Illuminate\/Remote\/ConnectionInterface.html#method_task","(string $task, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a task against the connection.",2],["ConnectionInterface::run","Illuminate\\Remote\\ConnectionInterface","Illuminate\/Remote\/ConnectionInterface.html#method_run","(string|array $commands, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a set of commands against the connection.",2],["ConnectionInterface::put","Illuminate\\Remote\\ConnectionInterface","Illuminate\/Remote\/ConnectionInterface.html#method_put","(string $local, string $remote)","Upload a local file to the server.",2],["ConnectionInterface::putString","Illuminate\\Remote\\ConnectionInterface","Illuminate\/Remote\/ConnectionInterface.html#method_putString","(string $remote, string $contents)","Upload a string to to the given file on the server.",2],["GatewayInterface::connect","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_connect","(string $username)","Connect to the SSH server.",2],["GatewayInterface::connected","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_connected","()","Determine if the gateway is connected.",2],["GatewayInterface::run","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_run","(string $command)","Run a command against the server (non-blocking).",2],["GatewayInterface::put","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_put","(string $local, string $remote)","Upload a local file to the server.",2],["GatewayInterface::putString","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_putString","(string $remote, string $contents)","Upload a string to to the given file on the server.",2],["GatewayInterface::nextLine","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_nextLine","()","Get the next line of output from the server.",2],["GatewayInterface::status","Illuminate\\Remote\\GatewayInterface","Illuminate\/Remote\/GatewayInterface.html#method_status","()","Get the exit status of the last command.",2],["MultiConnection::__construct","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method___construct","(array $connections)","The array of connections.",2],["MultiConnection::define","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method_define","(string $task, string|array $commands)","Define a set of commands as a task.",2],["MultiConnection::task","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method_task","(string $task, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a task against the connection.",2],["MultiConnection::run","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method_run","(string|array $commands, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Run a set of commands against the connection.",2],["MultiConnection::put","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method_put","(string $local, string $remote)","Upload a local file to the server.",2],["MultiConnection::putString","Illuminate\\Remote\\MultiConnection","Illuminate\/Remote\/MultiConnection.html#method_putString","(string $remote, string $contents)","Upload a string to to the given file on the server.",2],["RemoteManager::__construct","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new remote manager instance.",2],["RemoteManager::into","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_into","(string|array|mixed $name)","Get a remote connection instance.",2],["RemoteManager::connection","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_connection","(string|array $name = null)","Get a remote connection instance.",2],["RemoteManager::group","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_group","(string $name)","Get a connection group instance by name.",2],["RemoteManager::multiple","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_multiple","(array $names)","Resolve a multiple connection instance.",2],["RemoteManager::resolve","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_resolve","(string $name)","Resolve a remote connection instance.",2],["RemoteManager::getDefaultConnection","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_getDefaultConnection","()","Get the default connection name.",2],["RemoteManager::setDefaultConnection","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method_setDefaultConnection","(string $name)","Set the default connection name.",2],["RemoteManager::__call","Illuminate\\Remote\\RemoteManager","Illuminate\/Remote\/RemoteManager.html#method___call","(string $method, array $parameters)","Dynamically pass methods to the default connection.",2],["RemoteServiceProvider::register","Illuminate\\Remote\\RemoteServiceProvider","Illuminate\/Remote\/RemoteServiceProvider.html#method_register","()","Register the service provider.",2],["RemoteServiceProvider::provides","Illuminate\\Remote\\RemoteServiceProvider","Illuminate\/Remote\/RemoteServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["SecLibGateway::__construct","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method___construct","(string $host, array $auth, <a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new gateway implementation.",2],["SecLibGateway::connect","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_connect","(string $username)","Connect to the SSH server.",2],["SecLibGateway::connected","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_connected","()","Determine if the gateway is connected.",2],["SecLibGateway::run","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_run","(string $command)","Run a command against the server (non-blocking).",2],["SecLibGateway::get","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_get","(string $remote, string $local)","Download the contents of a remote file.",2],["SecLibGateway::getString","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getString","(string $remote)","Get the contents of a remote file.",2],["SecLibGateway::put","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_put","(string $local, string $remote)","Upload a local file to the server.",2],["SecLibGateway::putString","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_putString","(string $remote, string $contents)","Upload a string to to the given file on the server.",2],["SecLibGateway::nextLine","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_nextLine","()","Get the next line of output from the server.",2],["SecLibGateway::getAgent","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getAgent","()","Get a new SSH Agent instance.",2],["SecLibGateway::getNewKey","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getNewKey","()","Get a new RSA key instance.",2],["SecLibGateway::status","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_status","()","Get the exit status of the last command.",2],["SecLibGateway::getHost","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getHost","()","Get the host used by the gateway.",2],["SecLibGateway::getPort","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getPort","()","Get the port used by the gateway.",2],["SecLibGateway::getConnection","Illuminate\\Remote\\SecLibGateway","Illuminate\/Remote\/SecLibGateway.html#method_getConnection","()","Get the underlying Net_SFTP connection.",2],["MakeControllerCommand::__construct","Illuminate\\Routing\\Console\\MakeControllerCommand","Illuminate\/Routing\/Console\/MakeControllerCommand.html#method___construct","(<a href=\"Illuminate\/Routing\/Generators\/ControllerGenerator.html\"><abbr title=\"Illuminate\\Routing\\Generators\\ControllerGenerator\">ControllerGenerator<\/abbr><\/a> $generator, string $path)","Create a new make controller command instance.",2],["MakeControllerCommand::fire","Illuminate\\Routing\\Console\\MakeControllerCommand","Illuminate\/Routing\/Console\/MakeControllerCommand.html#method_fire","()","Execute the console command.",2],["Controller::beforeFilter","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_beforeFilter","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $filter, array $options = array())","Register a \"before\" filter on the controller.",2],["Controller::afterFilter","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_afterFilter","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $filter, array $options = array())","Register an \"after\" filter on the controller.",2],["Controller::forgetBeforeFilter","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_forgetBeforeFilter","(string $filter)","Remove the given before filter.",2],["Controller::forgetAfterFilter","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_forgetAfterFilter","(string $filter)","Remove the given after filter.",2],["Controller::getBeforeFilters","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_getBeforeFilters","()","Get the registered \"before\" filters.",2],["Controller::getAfterFilters","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_getAfterFilters","()","Get the registered \"after\" filters.",2],["Controller::getFilterer","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_getFilterer","()","Get the route filterer implementation.",2],["Controller::setFilterer","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_setFilterer","(<a href=\"Illuminate\/Routing\/RouteFiltererInterface.html\"><abbr title=\"Illuminate\\Routing\\RouteFiltererInterface\">RouteFiltererInterface<\/abbr><\/a> $filterer)","Set the route filterer implementation.",2],["Controller::callAction","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_callAction","(string $method, array $parameters)","Execute an action on the controller.",2],["Controller::missingMethod","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method_missingMethod","(array $parameters = array())","Handle calls to missing methods on the controller.",2],["Controller::__call","Illuminate\\Routing\\Controller","Illuminate\/Routing\/Controller.html#method___call","(string $method, array $parameters)","Handle calls to missing methods on the controller.",2],["ControllerDispatcher::__construct","Illuminate\\Routing\\ControllerDispatcher","Illuminate\/Routing\/ControllerDispatcher.html#method___construct","(<a href=\"Illuminate\/Routing\/RouteFiltererInterface.html\"><abbr title=\"Illuminate\\Routing\\RouteFiltererInterface\">RouteFiltererInterface<\/abbr><\/a> $filterer, <a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new controller dispatcher instance.",2],["ControllerDispatcher::dispatch","Illuminate\\Routing\\ControllerDispatcher","Illuminate\/Routing\/ControllerDispatcher.html#method_dispatch","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, string $controller, string $method)","Dispatch a request to a given controller and method.",2],["ControllerInspector::getRoutable","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_getRoutable","(string $controller, string $prefix)","Get the routable methods for a controller.",2],["ControllerInspector::isRoutable","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_isRoutable","(<a href=\"http:\/\/php.net\/ReflectionMethod\"><abbr title=\"ReflectionMethod\">ReflectionMethod<\/abbr><\/a> $method)","Determine if the given controller method is routable.",2],["ControllerInspector::getMethodData","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_getMethodData","(<a href=\"http:\/\/php.net\/ReflectionMethod\"><abbr title=\"ReflectionMethod\">ReflectionMethod<\/abbr><\/a> $method, string $prefix)","Get the method data for a given method.",2],["ControllerInspector::getVerb","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_getVerb","(string $name)","Extract the verb from a controller action.",2],["ControllerInspector::getPlainUri","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_getPlainUri","(string $name, string $prefix)","Determine the URI from the given method name.",2],["ControllerInspector::addUriWildcards","Illuminate\\Routing\\ControllerInspector","Illuminate\/Routing\/ControllerInspector.html#method_addUriWildcards","(string $uri)","Add wildcards to the given URI.",2],["ControllerServiceProvider::register","Illuminate\\Routing\\ControllerServiceProvider","Illuminate\/Routing\/ControllerServiceProvider.html#method_register","()","Register the service provider.",2],["ControllerServiceProvider::provides","Illuminate\\Routing\\ControllerServiceProvider","Illuminate\/Routing\/ControllerServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ControllerGenerator::__construct","Illuminate\\Routing\\Generators\\ControllerGenerator","Illuminate\/Routing\/Generators\/ControllerGenerator.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new controller generator instance.",2],["ControllerGenerator::make","Illuminate\\Routing\\Generators\\ControllerGenerator","Illuminate\/Routing\/Generators\/ControllerGenerator.html#method_make","(string $controller, string $path, array $options = array())","Create a new resourceful controller file.",2],["HostValidator::matches","Illuminate\\Routing\\Matching\\HostValidator","Illuminate\/Routing\/Matching\/HostValidator.html#method_matches","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Validate a given rule against a route and request.",2],["MethodValidator::matches","Illuminate\\Routing\\Matching\\MethodValidator","Illuminate\/Routing\/Matching\/MethodValidator.html#method_matches","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Validate a given rule against a route and request.",2],["SchemeValidator::matches","Illuminate\\Routing\\Matching\\SchemeValidator","Illuminate\/Routing\/Matching\/SchemeValidator.html#method_matches","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Validate a given rule against a route and request.",2],["UriValidator::matches","Illuminate\\Routing\\Matching\\UriValidator","Illuminate\/Routing\/Matching\/UriValidator.html#method_matches","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Validate a given rule against a route and request.",2],["ValidatorInterface::matches","Illuminate\\Routing\\Matching\\ValidatorInterface","Illuminate\/Routing\/Matching\/ValidatorInterface.html#method_matches","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Validate a given rule against a route and request.",2],["Redirector::__construct","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method___construct","(<a href=\"Illuminate\/Routing\/UrlGenerator.html\"><abbr title=\"Illuminate\\Routing\\UrlGenerator\">UrlGenerator<\/abbr><\/a> $generator)","Create a new Redirector instance.",2],["Redirector::home","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_home","(int $status = 302)","Create a new redirect response to the \"home\" route.",2],["Redirector::back","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_back","(int $status = 302, array $headers = array())","Create a new redirect response to the previous location.",2],["Redirector::refresh","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_refresh","(int $status = 302, array $headers = array())","Create a new redirect response to the current URI.",2],["Redirector::guest","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_guest","(string $path, int $status = 302, array $headers = array(), bool $secure = null)","Create a new redirect response, while putting the current",2],["Redirector::intended","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_intended","(string $default = &#039;\/&#039;, int $status = 302, array $headers = array(), bool $secure = null)","Create a new redirect response to the previously intended",2],["Redirector::to","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_to","(string $path, int $status = 302, array $headers = array(), bool $secure = null)","Create a new redirect response to the given path.",2],["Redirector::away","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_away","(string $path, int $status = 302, array $headers = array())","Create a new redirect response to an external URL (no",2],["Redirector::secure","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_secure","(string $path, int $status = 302, array $headers = array())","Create a new redirect response to the given HTTPS path.",2],["Redirector::route","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_route","(string $route, array $parameters = array(), int $status = 302, array $headers = array())","Create a new redirect response to a named route.",2],["Redirector::action","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_action","(string $action, array $parameters = array(), int $status = 302, array $headers = array())","Create a new redirect response to a controller action.",2],["Redirector::getUrlGenerator","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_getUrlGenerator","()","Get the URL generator instance.",2],["Redirector::setSession","Illuminate\\Routing\\Redirector","Illuminate\/Routing\/Redirector.html#method_setSession","(<a href=\"Illuminate\/Session\/Store.html\"><abbr title=\"Illuminate\\Session\\Store\">Store<\/abbr><\/a> $session)","Set the active session store.",2],["Route::__construct","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method___construct","(array $methods, string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array $action)","Create a new Route instance.",2],["Route::run","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_run","()","Run the route action and return the response.",2],["Route::matches","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_matches","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, bool $includingMethod = true)","Determine if the route matches given request.",2],["Route::beforeFilters","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_beforeFilters","()","Get the \"before\" filters for the route.",2],["Route::afterFilters","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_afterFilters","()","Get the \"after\" filters for the route.",2],["Route::parseFilters","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parseFilters","(string $filters)","Parse the given filter string.",2],["Route::parseFilter","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parseFilter","(string $filter)","Parse the given filter into name and parameters.",2],["Route::getParameter","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getParameter","(string $name, mixed $default = null)","Get a given parameter from the route.",2],["Route::parameter","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parameter","(string $name, mixed $default = null)","Get a given parameter from the route.",2],["Route::setParameter","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_setParameter","(string $name, mixed $value)","Set a parameter to the given value.",2],["Route::forgetParameter","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_forgetParameter","(string $name)","Unset a parameter on the route if it is set.",2],["Route::parameters","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parameters","()","Get the key \/ value list of parameters for the route.",2],["Route::parametersWithoutNulls","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parametersWithoutNulls","()","Get the key \/ value list of parameters without null",2],["Route::parameterNames","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_parameterNames","()","Get all of the parameter names for the route.",2],["Route::bind","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_bind","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Bind the route to a given request for execution.",2],["Route::bindParameters","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_bindParameters","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Extract the parameter list from the request.",2],["Route::getValidators","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getValidators","()","Get the route validators for the instance.",2],["Route::before","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_before","(string $filters)","Add before filters to the route.",2],["Route::after","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_after","(string $filters)","Add after filters to the route.",2],["Route::defaults","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_defaults","(string $key, mixed $value)","Set a default value for the route.",2],["Route::where","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_where","(array|string $name, string $expression = null)","Set a regular expression requirement on the route.",2],["Route::prefix","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_prefix","(string $prefix)","Add a prefix to the route URI.",2],["Route::getPath","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getPath","()","Get the URI associated with the route.",2],["Route::uri","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_uri","()","Get the URI associated with the route.",2],["Route::getMethods","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getMethods","()","Get the HTTP verbs the route responds to.",2],["Route::methods","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_methods","()","Get the HTTP verbs the route responds to.",2],["Route::httpOnly","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_httpOnly","()","Determine if the route only responds to HTTP requests.",2],["Route::httpsOnly","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_httpsOnly","()","Determine if the route only responds to HTTPS requests.",2],["Route::secure","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_secure","()","Determine if the route only responds to HTTPS requests.",2],["Route::domain","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_domain","()","Get the domain defined for the route.",2],["Route::getUri","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getUri","()","Get the URI that the route responds to.",2],["Route::setUri","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_setUri","(string $uri)","Set the URI that the route responds to.",2],["Route::getPrefix","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getPrefix","()","Get the prefix of the route instance.",2],["Route::getName","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getName","()","Get the name of the route instance.",2],["Route::getActionName","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getActionName","()","Get the action name for the route.",2],["Route::getAction","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getAction","()","Get the action array for the route.",2],["Route::setAction","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_setAction","(array $action)","Set the action array for the route.",2],["Route::getCompiled","Illuminate\\Routing\\Route","Illuminate\/Routing\/Route.html#method_getCompiled","()","Get the compiled version of the route.",2],["RouteCollection::add","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_add","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route)","Add a Route instance to the collection.",2],["RouteCollection::match","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_match","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Find the first route matching a given request.",2],["RouteCollection::hasNamedRoute","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_hasNamedRoute","(string $name)","Determine if the route collection contains a given",2],["RouteCollection::getByName","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_getByName","(string $name)","Get a route instance by its name.",2],["RouteCollection::getByAction","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_getByAction","(string $action)","Get a route instance by its controller action.",2],["RouteCollection::getRoutes","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_getRoutes","()","Get all of the routes in the collection.",2],["RouteCollection::getIterator","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_getIterator","()","Get an iterator for the items.",2],["RouteCollection::count","Illuminate\\Routing\\RouteCollection","Illuminate\/Routing\/RouteCollection.html#method_count","()","Count the number of items in the collection.",2],["RouteFiltererInterface::filter","Illuminate\\Routing\\RouteFiltererInterface","Illuminate\/Routing\/RouteFiltererInterface.html#method_filter","(string $name, mixed $callback)","Register a new filter with the router.",2],["RouteFiltererInterface::callRouteFilter","Illuminate\\Routing\\RouteFiltererInterface","Illuminate\/Routing\/RouteFiltererInterface.html#method_callRouteFilter","(string $filter, array $parameters, <a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, <a href=\"Illuminate\/Http\/Response.html\"><abbr title=\"Illuminate\\Http\\Response\">Response<\/abbr><\/a>|null $response = null)","Call the given route filter.",2],["Router::__construct","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method___construct","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events, <a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new Router instance.",2],["Router::get","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_get","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new GET route with the router.",2],["Router::post","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_post","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new POST route with the router.",2],["Router::put","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_put","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new PUT route with the router.",2],["Router::patch","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_patch","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new PATCH route with the router.",2],["Router::delete","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_delete","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new DELETE route with the router.",2],["Router::options","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_options","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new OPTIONS route with the router.",2],["Router::any","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_any","(string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new route responding to all verbs.",2],["Router::match","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_match","(array|string $methods, string $uri, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|array|string $action)","Register a new route with the given verbs.",2],["Router::controllers","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_controllers","(array $controllers)","Register an array of controllers with wildcard routing.",2],["Router::controller","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_controller","(string $uri, string $controller, array $names = array())","Route a controller to a URI with wildcard routing.",2],["Router::resource","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_resource","(string $name, string $controller, array $options = array())","Route a resource to a controller.",2],["Router::getResourceUri","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getResourceUri","(string $resource)","Get the base resource URI for a given resource.",2],["Router::getResourceWildcard","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getResourceWildcard","(string $value)","Format a resource wildcard for usage.",2],["Router::group","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_group","(array $attributes, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Create a route group with shared attributes.",2],["Router::mergeWithLastGroup","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_mergeWithLastGroup","(array $new)","Merge the given array with the last group stack.",2],["Router::mergeGroup","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_mergeGroup","(array $new, array $old)","Merge the given group attributes.",2],["Router::dispatch","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_dispatch","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Dispatch the request to the application.",2],["Router::dispatchToRoute","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_dispatchToRoute","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Dispatch the request to a route and return the response.",2],["Router::matched","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_matched","(string|callable $callback)","Register a route matched event listener.",2],["Router::before","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_before","(string|callable $callback)","Register a new \"before\" filter with the router.",2],["Router::after","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_after","(string|callable $callback)","Register a new \"after\" filter with the router.",2],["Router::filter","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_filter","(string $name, string|callable $callback)","Register a new filter with the router.",2],["Router::when","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_when","(string $pattern, string $name, array|null $methods = null)","Register a pattern-based filter with the router.",2],["Router::whenRegex","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_whenRegex","(string $pattern, string $name, array|null $methods = null)","Register a regular expression based filter with the",2],["Router::model","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_model","(string $key, string $class, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Register a model binder for a wildcard.",2],["Router::bind","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_bind","(string $key, string|callable $binder)","Add a new route parameter binder.",2],["Router::createClassBinding","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_createClassBinding","(string $binding)","Create a class based binding using the IoC container.",2],["Router::pattern","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_pattern","(string $key, string $pattern)","Set a global where pattern on all routes",2],["Router::patterns","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_patterns","(array $patterns)","Set a group of global where patterns on all routes",2],["Router::callRouteBefore","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_callRouteBefore","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Call the given route's before filters.",2],["Router::findPatternFilters","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_findPatternFilters","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Find the patterned filters matching a request.",2],["Router::callRouteAfter","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_callRouteAfter","(<a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, <a href=\"Illuminate\/Http\/Response.html\"><abbr title=\"Illuminate\\Http\\Response\">Response<\/abbr><\/a> $response)","Call the given route's before filters.",2],["Router::callRouteFilter","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_callRouteFilter","(string $filter, array $parameters, <a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request, <a href=\"Illuminate\/Http\/Response.html\"><abbr title=\"Illuminate\\Http\\Response\">Response<\/abbr><\/a>|null $response = null)","Call the given route filter.",2],["Router::withoutFilters","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_withoutFilters","(callable $callback)","Run a callback with filters disable on the router.",2],["Router::enableFilters","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_enableFilters","()","Enable route filtering on the router.",2],["Router::disableFilters","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_disableFilters","()","Disable route filtering on the router.",2],["Router::input","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_input","(string $key, string $default = null)","Get a route parameter for the current route.",2],["Router::getCurrentRoute","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getCurrentRoute","()","Get the currently dispatched route instance.",2],["Router::current","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_current","()","Get the currently dispatched route instance.",2],["Router::has","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_has","(string $name)","Check if a route with the given name exists.",2],["Router::currentRouteName","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_currentRouteName","()","Get the current route name.",2],["Router::is","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_is","()","Alias for the \"currentRouteNamed\" method.",2],["Router::currentRouteNamed","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_currentRouteNamed","(string $name)","Determine if the current route matches a given name.",2],["Router::currentRouteAction","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_currentRouteAction","()","Get the current route action.",2],["Router::uses","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_uses","()","Alias for the \"currentRouteUses\" method.",2],["Router::currentRouteUses","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_currentRouteUses","(string $action)","Determine if the current route action matches a given",2],["Router::getCurrentRequest","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getCurrentRequest","()","Get the request currently being dispatched.",2],["Router::getRoutes","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getRoutes","()","Get the underlying route collection.",2],["Router::getControllerDispatcher","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getControllerDispatcher","()","Get the controller dispatcher instance.",2],["Router::setControllerDispatcher","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_setControllerDispatcher","(<a href=\"Illuminate\/Routing\/ControllerDispatcher.html\"><abbr title=\"Illuminate\\Routing\\ControllerDispatcher\">ControllerDispatcher<\/abbr><\/a> $dispatcher)","Set the controller dispatcher instance.",2],["Router::getInspector","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getInspector","()","Get a controller inspector instance.",2],["Router::getPatterns","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_getPatterns","()","Get the global \"where\" patterns.",2],["Router::handle","Illuminate\\Routing\\Router","Illuminate\/Routing\/Router.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Get the response for a given request.",2],["RoutingServiceProvider::register","Illuminate\\Routing\\RoutingServiceProvider","Illuminate\/Routing\/RoutingServiceProvider.html#method_register","()","Register the service provider.",2],["UrlGenerator::__construct","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method___construct","(<a href=\"Illuminate\/Routing\/RouteCollection.html\"><abbr title=\"Illuminate\\Routing\\RouteCollection\">RouteCollection<\/abbr><\/a> $routes, <a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Create a new URL Generator instance.",2],["UrlGenerator::full","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_full","()","Get the full URL for the current request.",2],["UrlGenerator::current","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_current","()","Get the current URL for the request.",2],["UrlGenerator::previous","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_previous","()","Get the URL for the previous request.",2],["UrlGenerator::to","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_to","(string $path, mixed $extra = array(), bool|null $secure = null)","Generate a absolute URL to the given path.",2],["UrlGenerator::secure","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_secure","(string $path, array $parameters = array())","Generate a secure, absolute URL to the given path.",2],["UrlGenerator::asset","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_asset","(string $path, bool|null $secure = null)","Generate a URL to an application asset.",2],["UrlGenerator::secureAsset","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_secureAsset","(string $path)","Generate a URL to a secure asset.",2],["UrlGenerator::forceSchema","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_forceSchema","(string $schema)","Force the schema for URLs.",2],["UrlGenerator::route","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_route","(string $name, mixed $parameters = array(), bool $absolute = true, <a href=\"Illuminate\/Routing\/Route.html\"><abbr title=\"Illuminate\\Routing\\Route\">Route<\/abbr><\/a> $route = null)","Get the URL to a named route.",2],["UrlGenerator::action","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_action","(string $action, mixed $parameters = array(), bool $absolute = true)","Get the URL to a controller action.",2],["UrlGenerator::forceRootUrl","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_forceRootUrl","(string $root)","Set the forced root URL.",2],["UrlGenerator::isValidUrl","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_isValidUrl","(string $path)","Determine if the given path is a valid URL.",2],["UrlGenerator::getRequest","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_getRequest","()","Get the request instance.",2],["UrlGenerator::setRequest","Illuminate\\Routing\\UrlGenerator","Illuminate\/Routing\/UrlGenerator.html#method_setRequest","(<a href=\"Illuminate\/Http\/Request.html\"><abbr title=\"Illuminate\\Http\\Request\">Request<\/abbr><\/a> $request)","Set the current request instance.",2],["CacheBasedSessionHandler::__construct","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method___construct","(<a href=\"Illuminate\/Cache\/Repository.html\"><abbr title=\"Illuminate\\Cache\\Repository\">Repository<\/abbr><\/a> $cache, int $minutes)","Create a new cache driven handler instance.",2],["CacheBasedSessionHandler::open","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_open","($savePath, $sessionName)","{@inheritDoc}",2],["CacheBasedSessionHandler::close","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_close","()","{@inheritDoc}",2],["CacheBasedSessionHandler::read","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_read","($sessionId)","{@inheritDoc}",2],["CacheBasedSessionHandler::write","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_write","($sessionId, $data)","{@inheritDoc}",2],["CacheBasedSessionHandler::destroy","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_destroy","($sessionId)","{@inheritDoc}",2],["CacheBasedSessionHandler::gc","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_gc","($lifetime)","{@inheritDoc}",2],["CacheBasedSessionHandler::getCache","Illuminate\\Session\\CacheBasedSessionHandler","Illuminate\/Session\/CacheBasedSessionHandler.html#method_getCache","()","Get the underlying cache repository.",2],["CommandsServiceProvider::register","Illuminate\\Session\\CommandsServiceProvider","Illuminate\/Session\/CommandsServiceProvider.html#method_register","()","Register the service provider.",2],["CommandsServiceProvider::provides","Illuminate\\Session\\CommandsServiceProvider","Illuminate\/Session\/CommandsServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["SessionTableCommand::__construct","Illuminate\\Session\\Console\\SessionTableCommand","Illuminate\/Session\/Console\/SessionTableCommand.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new session table command instance.",2],["SessionTableCommand::fire","Illuminate\\Session\\Console\\SessionTableCommand","Illuminate\/Session\/Console\/SessionTableCommand.html#method_fire","()","Execute the console command.",2],["CookieSessionHandler::__construct","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method___construct","(<a href=\"Illuminate\/Cookie\/CookieJar.html\"><abbr title=\"Illuminate\\Cookie\\CookieJar\">CookieJar<\/abbr><\/a> $cookie, int $minutes)","Create a new cookie driven handler instance.",2],["CookieSessionHandler::open","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_open","($savePath, $sessionName)","{@inheritDoc}",2],["CookieSessionHandler::close","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_close","()","{@inheritDoc}",2],["CookieSessionHandler::read","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_read","($sessionId)","{@inheritDoc}",2],["CookieSessionHandler::write","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_write","($sessionId, $data)","{@inheritDoc}",2],["CookieSessionHandler::destroy","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_destroy","($sessionId)","{@inheritDoc}",2],["CookieSessionHandler::gc","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_gc","($lifetime)","{@inheritDoc}",2],["CookieSessionHandler::setRequest","Illuminate\\Session\\CookieSessionHandler","Illuminate\/Session\/CookieSessionHandler.html#method_setRequest","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Set the request instance.",2],["DatabaseSessionHandler::__construct","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method___construct","(<a href=\"Illuminate\/Database\/Connection.html\"><abbr title=\"Illuminate\\Database\\Connection\">Connection<\/abbr><\/a> $connection, string $table)","Create a new database session handler instance.",2],["DatabaseSessionHandler::open","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_open","($savePath, $sessionName)","{@inheritDoc}",2],["DatabaseSessionHandler::close","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_close","()","{@inheritDoc}",2],["DatabaseSessionHandler::read","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_read","($sessionId)","{@inheritDoc}",2],["DatabaseSessionHandler::write","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_write","($sessionId, $data)","{@inheritDoc}",2],["DatabaseSessionHandler::destroy","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_destroy","($sessionId)","{@inheritDoc}",2],["DatabaseSessionHandler::gc","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_gc","($lifetime)","{@inheritDoc}",2],["DatabaseSessionHandler::setExists","Illuminate\\Session\\DatabaseSessionHandler","Illuminate\/Session\/DatabaseSessionHandler.html#method_setExists","(bool $value)","Set the existence state for the session.",2],["ExistenceAwareInterface::setExists","Illuminate\\Session\\ExistenceAwareInterface","Illuminate\/Session\/ExistenceAwareInterface.html#method_setExists","(bool $value)","Set the existence state for the session.",2],["FileSessionHandler::__construct","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $path)","Create a new file driven handler instance.",2],["FileSessionHandler::open","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_open","($savePath, $sessionName)","{@inheritDoc}",2],["FileSessionHandler::close","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_close","()","{@inheritDoc}",2],["FileSessionHandler::read","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_read","($sessionId)","{@inheritDoc}",2],["FileSessionHandler::write","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_write","($sessionId, $data)","{@inheritDoc}",2],["FileSessionHandler::destroy","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_destroy","($sessionId)","{@inheritDoc}",2],["FileSessionHandler::gc","Illuminate\\Session\\FileSessionHandler","Illuminate\/Session\/FileSessionHandler.html#method_gc","($lifetime)","{@inheritDoc}",2],["Middleware::__construct","Illuminate\\Session\\Middleware","Illuminate\/Session\/Middleware.html#method___construct","(<abbr title=\"Symfony\\Component\\HttpKernel\\HttpKernelInterface\">HttpKernelInterface<\/abbr> $app, <a href=\"Illuminate\/Session\/SessionManager.html\"><abbr title=\"Illuminate\\Session\\SessionManager\">SessionManager<\/abbr><\/a> $manager, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $reject = null)","Create a new session middleware.",2],["Middleware::handle","Illuminate\\Session\\Middleware","Illuminate\/Session\/Middleware.html#method_handle","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request, int $type = HttpKernelInterface::MASTER_REQUEST, bool $catch = true)","Handle the given request and get the response.",2],["Middleware::checkRequestForArraySessions","Illuminate\\Session\\Middleware","Illuminate\/Session\/Middleware.html#method_checkRequestForArraySessions","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Check the request and reject callback for array sessions.",2],["Middleware::getSession","Illuminate\\Session\\Middleware","Illuminate\/Session\/Middleware.html#method_getSession","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Get the session implementation from the manager.",2],["SessionInterface::getHandler","Illuminate\\Session\\SessionInterface","Illuminate\/Session\/SessionInterface.html#method_getHandler","()","Get the session handler instance.",2],["SessionInterface::handlerNeedsRequest","Illuminate\\Session\\SessionInterface","Illuminate\/Session\/SessionInterface.html#method_handlerNeedsRequest","()","Determine if the session handler needs a request.",2],["SessionInterface::setRequestOnHandler","Illuminate\\Session\\SessionInterface","Illuminate\/Session\/SessionInterface.html#method_setRequestOnHandler","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Set the request on the handler instance.",2],["SessionManager::getSessionConfig","Illuminate\\Session\\SessionManager","Illuminate\/Session\/SessionManager.html#method_getSessionConfig","()","Get the session configuration.",2],["SessionManager::getDefaultDriver","Illuminate\\Session\\SessionManager","Illuminate\/Session\/SessionManager.html#method_getDefaultDriver","()","Get the default session driver name.",2],["SessionManager::setDefaultDriver","Illuminate\\Session\\SessionManager","Illuminate\/Session\/SessionManager.html#method_setDefaultDriver","(string $name)","Set the default session driver name.",2],["SessionServiceProvider::register","Illuminate\\Session\\SessionServiceProvider","Illuminate\/Session\/SessionServiceProvider.html#method_register","()","Register the service provider.",2],["Store::__construct","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method___construct","(string $name, <a href=\"http:\/\/php.net\/SessionHandlerInterface\"><abbr title=\"SessionHandlerInterface\">SessionHandlerInterface<\/abbr><\/a> $handler, string|null $id = null)","Create a new session instance.",2],["Store::start","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_start","()","{@inheritdoc}",2],["Store::getId","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getId","()","{@inheritdoc}",2],["Store::setId","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_setId","($id)","{@inheritdoc}",2],["Store::isValidId","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_isValidId","(string $id)","Determine if this is a valid session ID.",2],["Store::getName","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getName","()","{@inheritdoc}",2],["Store::setName","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_setName","($name)","{@inheritdoc}",2],["Store::invalidate","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_invalidate","($lifetime = null)","{@inheritdoc}",2],["Store::migrate","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_migrate","($destroy = false, $lifetime = null)","{@inheritdoc}",2],["Store::regenerate","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_regenerate","(bool $destroy = false)","Generate a new session identifier.",2],["Store::save","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_save","()","{@inheritdoc}",2],["Store::ageFlashData","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_ageFlashData","()","Age the flash data for the session.",2],["Store::has","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_has","($name)","{@inheritdoc}",2],["Store::get","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_get","($name, $default = null)","{@inheritdoc}",2],["Store::pull","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_pull","(string $key, string $default = null)","Get the value of a given key and then forget it.",2],["Store::hasOldInput","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_hasOldInput","(string $key = null)","Determine if the session contains old input.",2],["Store::getOldInput","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getOldInput","(string $key = null, mixed $default = null)","Get the requested item from the flashed input array.",2],["Store::set","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_set","($name, $value)","{@inheritdoc}",2],["Store::put","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_put","(string|array $key, mixed|null $value = null)","Put a key \/ value pair or array of key \/ value pairs",2],["Store::push","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_push","(string $key, mixed $value)","Push a value onto a session array.",2],["Store::flash","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_flash","(string $key, mixed $value)","Flash a key \/ value pair to the session.",2],["Store::flashInput","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_flashInput","(array $value)","Flash an input array to the session.",2],["Store::reflash","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_reflash","()","Reflash all of the session flash data.",2],["Store::keep","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_keep","(array|mixed $keys = null)","Reflash a subset of the current flash data.",2],["Store::all","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_all","()","{@inheritdoc}",2],["Store::replace","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_replace","(array $attributes)","{@inheritdoc}",2],["Store::remove","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_remove","($name)","{@inheritdoc}",2],["Store::forget","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_forget","(string $key)","Remove an item from the session.",2],["Store::clear","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_clear","()","{@inheritdoc}",2],["Store::flush","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_flush","()","Remove all of the items from the session.",2],["Store::isStarted","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_isStarted","()","{@inheritdoc}",2],["Store::registerBag","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_registerBag","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface\">SessionBagInterface<\/abbr> $bag)","{@inheritdoc}",2],["Store::getBag","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getBag","($name)","{@inheritdoc}",2],["Store::getMetadataBag","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getMetadataBag","()","{@inheritdoc}",2],["Store::getBagData","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getBagData","(string $name)","Get the raw bag data array for a given bag.",2],["Store::token","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_token","()","Get the CSRF token value.",2],["Store::getToken","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getToken","()","Get the CSRF token value.",2],["Store::regenerateToken","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_regenerateToken","()","Regenerate the CSRF token value.",2],["Store::setExists","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_setExists","(bool $value)","Set the existence of the session on the handler if",2],["Store::getHandler","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_getHandler","()","Get the underlying session handler implementation.",2],["Store::handlerNeedsRequest","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_handlerNeedsRequest","()","Determine if the session handler needs a request.",2],["Store::setRequestOnHandler","Illuminate\\Session\\Store","Illuminate\/Session\/Store.html#method_setRequestOnHandler","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","Set the request on the handler instance.",2],["Arr::add","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_add","(array $array, string $key, mixed $value)","Add an element to an array using \"dot\" notation if",2],["Arr::build","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_build","(array $array, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Build a new array using a callback.",2],["Arr::divide","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_divide","(array $array)","Divide an array into two arrays. One with keys and",2],["Arr::dot","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_dot","(array $array, string $prepend = &#039;&#039;)","Flatten a multi-dimensional associative array with",2],["Arr::except","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_except","(array $array, array|string $keys)","Get all of the given array except for a specified array",2],["Arr::fetch","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_fetch","(array $array, string $key)","Fetch a flattened array of a nested array element.",2],["Arr::first","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_first","(array $array, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, mixed $default = null)","Return the first element in an array passing a given",2],["Arr::last","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_last","(array $array, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, mixed $default = null)","Return the last element in an array passing a given",2],["Arr::flatten","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_flatten","(array $array)","Flatten a multi-dimensional array into a single level.",2],["Arr::forget","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_forget","(array $array, array|string $keys)","Remove one or many array items from a given array using",2],["Arr::get","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_get","(array $array, string $key, mixed $default = null)","Get an item from an array using \"dot\" notation.",2],["Arr::only","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_only","(array $array, array|string $keys)","Get a subset of the items from the given array.",2],["Arr::pluck","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_pluck","(array $array, string $value, string $key = null)","Pluck an array of values from an array.",2],["Arr::pull","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_pull","(array $array, string $key, mixed $default = null)","Get a value from the array, and remove it.",2],["Arr::set","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_set","(array $array, string $key, mixed $value)","Set an array item to a given value using \"dot\" notation.",2],["Arr::sort","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_sort","(array $array, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Sort the array using the given Closure.",2],["Arr::where","Illuminate\\Support\\Arr","Illuminate\/Support\/Arr.html#method_where","(array $array, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Filter the array using the given Closure.",2],["ClassLoader::load","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_load","(string $class)","Load the given class file.",2],["ClassLoader::normalizeClass","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_normalizeClass","(string $class)","Get the normal file name for a class.",2],["ClassLoader::register","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_register","()","Register the given class loader on the auto-loader",2],["ClassLoader::addDirectories","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_addDirectories","(string|array $directories)","Add directories to the class loader.",2],["ClassLoader::removeDirectories","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_removeDirectories","(string|array $directories = null)","Remove directories from the class loader.",2],["ClassLoader::getDirectories","Illuminate\\Support\\ClassLoader","Illuminate\/Support\/ClassLoader.html#method_getDirectories","()","Gets all the directories registered with the loader.",2],["Collection::__construct","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method___construct","(array $items = array())","Create a new collection.",2],["Collection::make","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_make","(mixed $items)","Create a new collection instance if the value isn't",2],["Collection::all","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_all","()","Get all of the items in the collection.",2],["Collection::collapse","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_collapse","()","Collapse the collection items into a single array.",2],["Collection::contains","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_contains","(mixed $value)","Determine if an item exists in the collection.",2],["Collection::diff","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_diff","(<a href=\"Illuminate\/Support\/Collection.html\"><abbr title=\"Illuminate\\Support\\Collection\">Collection<\/abbr><\/a>|<a href=\"Illuminate\/Support\/Contracts\/ArrayableInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\ArrayableInterface\">ArrayableInterface<\/abbr><\/a>|array $items)","Diff the collection with the given items.",2],["Collection::each","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_each","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Execute a callback over each item.",2],["Collection::fetch","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_fetch","(string $key)","Fetch a nested element of the collection.",2],["Collection::filter","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_filter","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Run a filter over each of the items.",2],["Collection::first","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_first","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null, mixed $default = null)","Get the first item from the collection.",2],["Collection::flatten","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_flatten","()","Get a flattened array of the items in the collection.",2],["Collection::flip","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_flip","()","Flip the items in the collection.",2],["Collection::forget","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_forget","(mixed $key)","Remove an item from the collection by key.",2],["Collection::get","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_get","(mixed $key, mixed $default = null)","Get an item from the collection by key.",2],["Collection::groupBy","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_groupBy","(callable|string $groupBy)","Group an associative array by a field or Closure value.",2],["Collection::keyBy","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_keyBy","(string $keyBy)","Key an associative array by a field.",2],["Collection::has","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_has","(mixed $key)","Determine if an item exists in the collection by key.",2],["Collection::implode","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_implode","(string $value, string $glue = null)","Concatenate values of a given key as a string.",2],["Collection::intersect","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_intersect","(<a href=\"Illuminate\/Support\/Collection.html\"><abbr title=\"Illuminate\\Support\\Collection\">Collection<\/abbr><\/a>|<a href=\"Illuminate\/Support\/Contracts\/ArrayableInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\ArrayableInterface\">ArrayableInterface<\/abbr><\/a>|array $items)","Intersect the collection with the given items.",2],["Collection::isEmpty","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_isEmpty","()","Determine if the collection is empty or not.",2],["Collection::keys","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_keys","()","Get the keys of the collection items.",2],["Collection::last","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_last","()","Get the last item from the collection.",2],["Collection::lists","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_lists","(string $value, string $key = null)","Get an array with the values of a given key.",2],["Collection::map","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_map","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Run a map over each of the items.",2],["Collection::merge","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_merge","(<a href=\"Illuminate\/Support\/Collection.html\"><abbr title=\"Illuminate\\Support\\Collection\">Collection<\/abbr><\/a>|<a href=\"Illuminate\/Support\/Contracts\/ArrayableInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\ArrayableInterface\">ArrayableInterface<\/abbr><\/a>|array $items)","Merge the collection with the given items.",2],["Collection::pop","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_pop","()","Get and remove the last item from the collection.",2],["Collection::prepend","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_prepend","(mixed $value)","Push an item onto the beginning of the collection.",2],["Collection::push","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_push","(mixed $value)","Push an item onto the end of the collection.",2],["Collection::pull","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_pull","(mixed $key, mixed $default = null)","Pulls an item from the collection.",2],["Collection::put","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_put","(mixed $key, mixed $value)","Put an item in the collection by key.",2],["Collection::random","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_random","(int $amount = 1)","Get one or more items randomly from the collection.",2],["Collection::reduce","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_reduce","(callable $callback, mixed $initial = null)","Reduce the collection to a single value.",2],["Collection::reject","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_reject","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|mixed $callback)","Create a collection of all elements that do not pass",2],["Collection::reverse","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_reverse","()","Reverse items order.",2],["Collection::search","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_search","(mixed $value, bool $strict = false)","Search the collection for a given value and return",2],["Collection::shift","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_shift","()","Get and remove the first item from the collection.",2],["Collection::shuffle","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_shuffle","()","Shuffle the items in the collection.",2],["Collection::slice","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_slice","(int $offset, int $length = null, bool $preserveKeys = false)","Slice the underlying collection array.",2],["Collection::chunk","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_chunk","(int $size, bool $preserveKeys = false)","Chunk the underlying collection array.",2],["Collection::sort","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_sort","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Sort through each item with a callback.",2],["Collection::sortBy","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_sortBy","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback, int $options = SORT_REGULAR, bool $descending = false)","Sort the collection using the given Closure.",2],["Collection::sortByDesc","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_sortByDesc","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback, int $options = SORT_REGULAR)","Sort the collection in descending order using the given",2],["Collection::splice","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_splice","(int $offset, int $length, mixed $replacement = array())","Splice portion of the underlying collection array.",2],["Collection::sum","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_sum","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Get the sum of the given values.",2],["Collection::take","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_take","(int $limit = null)","Take the first or last {$limit} items.",2],["Collection::transform","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_transform","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Transform each item in the collection using a callback.",2],["Collection::unique","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_unique","()","Return only unique items from the collection array.",2],["Collection::values","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_values","()","Reset the keys on the underlying array.",2],["Collection::toArray","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_toArray","()","Get the collection of items as a plain array.",2],["Collection::jsonSerialize","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_jsonSerialize","()","Convert the object into something JSON serializable.",2],["Collection::toJson","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_toJson","(int $options)","Get the collection of items as JSON.",2],["Collection::getIterator","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_getIterator","()","Get an iterator for the items.",2],["Collection::getCachingIterator","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_getCachingIterator","(int $flags = CachingIterator::CALL_TOSTRING)","Get a CachingIterator instance.",2],["Collection::count","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_count","()","Count the number of items in the collection.",2],["Collection::offsetExists","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_offsetExists","(mixed $key)","Determine if an item exists at an offset.",2],["Collection::offsetGet","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_offsetGet","(mixed $key)","Get an item at a given offset.",2],["Collection::offsetSet","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_offsetSet","(mixed $key, mixed $value)","Set the item at a given offset.",2],["Collection::offsetUnset","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method_offsetUnset","(string $key)","Unset the item at a given offset.",2],["Collection::__toString","Illuminate\\Support\\Collection","Illuminate\/Support\/Collection.html#method___toString","()","Convert the collection to its string representation.",2],["ArrayableInterface::toArray","Illuminate\\Support\\Contracts\\ArrayableInterface","Illuminate\/Support\/Contracts\/ArrayableInterface.html#method_toArray","()","Get the instance as an array.",2],["JsonableInterface::toJson","Illuminate\\Support\\Contracts\\JsonableInterface","Illuminate\/Support\/Contracts\/JsonableInterface.html#method_toJson","(int $options)","Convert the object to its JSON representation.",2],["MessageProviderInterface::getMessageBag","Illuminate\\Support\\Contracts\\MessageProviderInterface","Illuminate\/Support\/Contracts\/MessageProviderInterface.html#method_getMessageBag","()","Get the messages for the instance.",2],["RenderableInterface::render","Illuminate\\Support\\Contracts\\RenderableInterface","Illuminate\/Support\/Contracts\/RenderableInterface.html#method_render","()","Get the evaluated contents of the object.",2],["ResponsePreparerInterface::prepareResponse","Illuminate\\Support\\Contracts\\ResponsePreparerInterface","Illuminate\/Support\/Contracts\/ResponsePreparerInterface.html#method_prepareResponse","(mixed $value)","Prepare the given value as a Response object.",2],["ResponsePreparerInterface::readyForResponses","Illuminate\\Support\\Contracts\\ResponsePreparerInterface","Illuminate\/Support\/Contracts\/ResponsePreparerInterface.html#method_readyForResponses","()","Determine if provider is ready to return responses.",2],["Cookie::has","Illuminate\\Support\\Facades\\Cookie","Illuminate\/Support\/Facades\/Cookie.html#method_has","(string $key)","Determine if a cookie exists on the request.",2],["Cookie::get","Illuminate\\Support\\Facades\\Cookie","Illuminate\/Support\/Facades\/Cookie.html#method_get","(string $key = null, mixed $default = null)","Retrieve a cookie from the request.",2],["Facade::swap","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_swap","(mixed $instance)","Hotswap the underlying instance behind the facade.",2],["Facade::shouldReceive","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_shouldReceive","()","Initiate a mock expectation on the facade.",2],["Facade::getFacadeRoot","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_getFacadeRoot","()","Get the root object behind the facade.",2],["Facade::clearResolvedInstance","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_clearResolvedInstance","(string $name)","Clear a resolved facade instance.",2],["Facade::clearResolvedInstances","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_clearResolvedInstances","()","Clear all of the resolved instances.",2],["Facade::getFacadeApplication","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_getFacadeApplication","()","Get the application instance behind the facade.",2],["Facade::setFacadeApplication","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method_setFacadeApplication","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Set the application instance.",2],["Facade::__callStatic","Illuminate\\Support\\Facades\\Facade","Illuminate\/Support\/Facades\/Facade.html#method___callStatic","(string $method, array $args)","Handle dynamic, static calls to the object.",2],["Input::get","Illuminate\\Support\\Facades\\Input","Illuminate\/Support\/Facades\/Input.html#method_get","(string $key = null, mixed $default = null)","Get an item from the input data.",2],["Response::make","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_make","(string $content = &#039;&#039;, int $status = 200, array $headers = array())","Return a new response from the application.",2],["Response::view","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_view","(string $view, array $data = array(), int $status = 200, array $headers = array())","Return a new view response from the application.",2],["Response::json","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_json","(string|array $data = array(), int $status = 200, array $headers = array(), int $options)","Return a new JSON response from the application.",2],["Response::jsonp","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_jsonp","(string $callback, string|array $data = array(), int $status = 200, array $headers = array(), int $options)","Return a new JSONP response from the application.",2],["Response::stream","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_stream","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback, int $status = 200, array $headers = array())","Return a new streamed response from the application.",2],["Response::download","Illuminate\\Support\\Facades\\Response","Illuminate\/Support\/Facades\/Response.html#method_download","(<a href=\"http:\/\/php.net\/SplFileInfo\"><abbr title=\"SplFileInfo\">SplFileInfo<\/abbr><\/a>|string $file, string $name = null, array $headers = array(), null|string $disposition = &#039;attachment&#039;)","Create a new file download response.",2],["Schema::connection","Illuminate\\Support\\Facades\\Schema","Illuminate\/Support\/Facades\/Schema.html#method_connection","(string $name)","Get a schema builder instance for a connection.",2],["Fluent::__construct","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___construct","(array|object $attributes = array())","Create a new fluent container instance.",2],["Fluent::get","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_get","(string $key, mixed $default = null)","Get an attribute from the container.",2],["Fluent::getAttributes","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_getAttributes","()","Get the attributes from the container.",2],["Fluent::toArray","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_toArray","()","Convert the Fluent instance to an array.",2],["Fluent::jsonSerialize","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_jsonSerialize","()","Convert the object into something JSON serializable.",2],["Fluent::toJson","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_toJson","(int $options)","Convert the Fluent instance to JSON.",2],["Fluent::offsetExists","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_offsetExists","(string $offset)","Determine if the given offset exists.",2],["Fluent::offsetGet","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_offsetGet","(string $offset)","Get the value for a given offset.",2],["Fluent::offsetSet","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_offsetSet","(string $offset, mixed $value)","Set the value at the given offset.",2],["Fluent::offsetUnset","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method_offsetUnset","(string $offset)","Unset the value at the given offset.",2],["Fluent::__call","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___call","(string $method, array $parameters)","Handle dynamic calls to the container to set attributes.",2],["Fluent::__get","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___get","(string $key)","Dynamically retrieve the value of an attribute.",2],["Fluent::__set","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___set","(string $key, mixed $value)","Dynamically set the value of an attribute.",2],["Fluent::__isset","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___isset","(string $key)","Dynamically check if an attribute is set.",2],["Fluent::__unset","Illuminate\\Support\\Fluent","Illuminate\/Support\/Fluent.html#method___unset","(string $key)","Dynamically unset an attribute.",2],["Manager::__construct","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new manager instance.",2],["Manager::getDefaultDriver","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method_getDefaultDriver","()","Get the default driver name.",2],["Manager::driver","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method_driver","(string $driver = null)","Get a driver instance.",2],["Manager::extend","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method_extend","(string $driver, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback)","Register a custom driver creator Closure.",2],["Manager::getDrivers","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method_getDrivers","()","Get all of the created \"drivers\".",2],["Manager::__call","Illuminate\\Support\\Manager","Illuminate\/Support\/Manager.html#method___call","(string $method, array $parameters)","Dynamically call the default driver instance.",2],["MessageBag::__construct","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method___construct","(array $messages = array())","Create a new message bag instance.",2],["MessageBag::add","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_add","(string $key, string $message)","Add a message to the bag.",2],["MessageBag::merge","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_merge","(<a href=\"Illuminate\/Support\/Contracts\/MessageProviderInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\MessageProviderInterface\">MessageProviderInterface<\/abbr><\/a>|array $messages)","Merge a new array of messages into the bag.",2],["MessageBag::has","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_has","(string $key = null)","Determine if messages exist for a given key.",2],["MessageBag::first","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_first","(string $key = null, string $format = null)","Get the first message from the bag for a given key.",2],["MessageBag::get","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_get","(string $key, string $format = null)","Get all of the messages from the bag for a given key.",2],["MessageBag::all","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_all","(string $format = null)","Get all of the messages for every key in the bag.",2],["MessageBag::getMessages","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_getMessages","()","Get the raw messages in the container.",2],["MessageBag::getMessageBag","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_getMessageBag","()","Get the messages for the instance.",2],["MessageBag::getFormat","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_getFormat","()","Get the default message format.",2],["MessageBag::setFormat","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_setFormat","(string $format = &#039;:message&#039;)","Set the default message format.",2],["MessageBag::isEmpty","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_isEmpty","()","Determine if the message bag has any messages.",2],["MessageBag::any","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_any","()","Determine if the message bag has any messages.",2],["MessageBag::count","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_count","()","Get the number of messages in the container.",2],["MessageBag::toArray","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_toArray","()","Get the instance as an array.",2],["MessageBag::jsonSerialize","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_jsonSerialize","()","Convert the object into something JSON serializable.",2],["MessageBag::toJson","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method_toJson","(int $options)","Convert the object to its JSON representation.",2],["MessageBag::__toString","Illuminate\\Support\\MessageBag","Illuminate\/Support\/MessageBag.html#method___toString","()","Convert the message bag to its string representation.",2],["NamespacedItemResolver::parseKey","Illuminate\\Support\\NamespacedItemResolver","Illuminate\/Support\/NamespacedItemResolver.html#method_parseKey","(string $key)","Parse a key into namespace, group, and item.",2],["NamespacedItemResolver::setParsedKey","Illuminate\\Support\\NamespacedItemResolver","Illuminate\/Support\/NamespacedItemResolver.html#method_setParsedKey","(string $key, array $parsed)","Set the parsed value of a key.",2],["Pluralizer::singular","Illuminate\\Support\\Pluralizer","Illuminate\/Support\/Pluralizer.html#method_singular","(string $value)","Get the singular form of the given word.",2],["Pluralizer::plural","Illuminate\\Support\\Pluralizer","Illuminate\/Support\/Pluralizer.html#method_plural","(string $value, int $count = 2)","Get the plural form of the given word.",2],["SerializableClosure::getCode","Illuminate\\Support\\SerializableClosure","Illuminate\/Support\/SerializableClosure.html#method_getCode","()","Returns the code of the closure being serialized",2],["SerializableClosure::getVariables","Illuminate\\Support\\SerializableClosure","Illuminate\/Support\/SerializableClosure.html#method_getVariables","()","Returns the \"used\" variables of the closure being serialized",2],["ServiceProvider::__construct","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method___construct","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Create a new service provider instance.",2],["ServiceProvider::boot","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_boot","()","Bootstrap the application events.",2],["ServiceProvider::register","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_register","()","Register the service provider.",2],["ServiceProvider::package","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_package","(string $package, string $namespace = null, string $path = null)","Register the package's component namespaces.",2],["ServiceProvider::guessPackagePath","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_guessPackagePath","()","Guess the package path for the provider.",2],["ServiceProvider::commands","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_commands","(array $commands)","Register the package's custom Artisan commands.",2],["ServiceProvider::provides","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["ServiceProvider::when","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_when","()","Get the events that trigger this service provider to",2],["ServiceProvider::isDeferred","Illuminate\\Support\\ServiceProvider","Illuminate\/Support\/ServiceProvider.html#method_isDeferred","()","Determine if the provider is deferred.",2],["Str::ascii","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_ascii","(string $value)","Transliterate a UTF-8 value to ASCII.",2],["Str::camel","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_camel","(string $value)","Convert a value to camel case.",2],["Str::contains","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_contains","(string $haystack, string|array $needles)","Determine if a given string contains a given substring.",2],["Str::endsWith","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_endsWith","(string $haystack, string|array $needles)","Determine if a given string ends with a given substring.",2],["Str::finish","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_finish","(string $value, string $cap)","Cap a string with a single instance of a given value.",2],["Str::is","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_is","(string $pattern, string $value)","Determine if a given string matches a given pattern.",2],["Str::length","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_length","(string $value)","Return the length of the given string.",2],["Str::limit","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_limit","(string $value, int $limit = 100, string $end = &#039;...&#039;)","Limit the number of characters in a string.",2],["Str::lower","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_lower","(string $value)","Convert the given string to lower-case.",2],["Str::words","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_words","(string $value, int $words = 100, string $end = &#039;...&#039;)","Limit the number of words in a string.",2],["Str::parseCallback","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_parseCallback","(string $callback, string $default)","Parse a Class@method style callback into class and",2],["Str::plural","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_plural","(string $value, int $count = 2)","Get the plural form of an English word.",2],["Str::random","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_random","(int $length = 16)","Generate a more truly \"random\" alpha-numeric string.",2],["Str::quickRandom","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_quickRandom","(int $length = 16)","Generate a \"random\" alpha-numeric string.",2],["Str::upper","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_upper","(string $value)","Convert the given string to upper-case.",2],["Str::title","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_title","(string $value)","Convert the given string to title case.",2],["Str::singular","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_singular","(string $value)","Get the singular form of an English word.",2],["Str::slug","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_slug","(string $title, string $separator = &#039;-&#039;)","Generate a URL friendly \"slug\" from a given string.",2],["Str::snake","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_snake","(string $value, string $delimiter = &#039;_&#039;)","Convert a string to snake case.",2],["Str::startsWith","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_startsWith","(string $haystack, string|array $needles)","Determine if a given string starts with a given substring.",2],["Str::studly","Illuminate\\Support\\Str","Illuminate\/Support\/Str.html#method_studly","(string $value)","Convert a value to studly caps case.",2],["CapsuleManagerTrait::setAsGlobal","Illuminate\\Support\\Traits\\CapsuleManagerTrait","Illuminate\/Support\/Traits\/CapsuleManagerTrait.html#method_setAsGlobal","()","Make this capsule instance available globally.",2],["CapsuleManagerTrait::getContainer","Illuminate\\Support\\Traits\\CapsuleManagerTrait","Illuminate\/Support\/Traits\/CapsuleManagerTrait.html#method_getContainer","()","Get the IoC container instance.",2],["CapsuleManagerTrait::setContainer","Illuminate\\Support\\Traits\\CapsuleManagerTrait","Illuminate\/Support\/Traits\/CapsuleManagerTrait.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["MacroableTrait::macro","Illuminate\\Support\\Traits\\MacroableTrait","Illuminate\/Support\/Traits\/MacroableTrait.html#method_macro","(string $name, callable $macro)","Register a custom macro.",2],["MacroableTrait::hasMacro","Illuminate\\Support\\Traits\\MacroableTrait","Illuminate\/Support\/Traits\/MacroableTrait.html#method_hasMacro","(string $name)","Checks if macro is registered",2],["MacroableTrait::__callStatic","Illuminate\\Support\\Traits\\MacroableTrait","Illuminate\/Support\/Traits\/MacroableTrait.html#method___callStatic","(string $method, array $parameters)","Dynamically handle calls to the class.",2],["MacroableTrait::__call","Illuminate\\Support\\Traits\\MacroableTrait","Illuminate\/Support\/Traits\/MacroableTrait.html#method___call","(string $method, array $parameters)","Dynamically handle calls to the class.",2],["ViewErrorBag::hasBag","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method_hasBag","(string $key = &#039;default&#039;)","Checks if a named MessageBag exists in the bags.",2],["ViewErrorBag::getBag","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method_getBag","(string $key)","Get a MessageBag instance from the bags.",2],["ViewErrorBag::put","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method_put","(string $key, <a href=\"Illuminate\/Support\/MessageBag.html\"><abbr title=\"Illuminate\\Support\\MessageBag\">MessageBag<\/abbr><\/a> $bag)","Add a new MessageBag instance to the bags.",2],["ViewErrorBag::count","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method_count","()","Get the number of messages in the default bag.",2],["ViewErrorBag::__call","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method___call","(string $method, array $parameters)","Dynamically call methods on the default bag.",2],["ViewErrorBag::__get","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method___get","(string $key)","Dynamically access a view error bag.",2],["ViewErrorBag::__set","Illuminate\\Support\\ViewErrorBag","Illuminate\/Support\/ViewErrorBag.html#method___set","(string $key, <a href=\"Illuminate\/Support\/MessageBag.html\"><abbr title=\"Illuminate\\Support\\MessageBag\">MessageBag<\/abbr><\/a> $value)","Dynamically set a view error bag.",2],["FileLoader::__construct","Illuminate\\Translation\\FileLoader","Illuminate\/Translation\/FileLoader.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $path)","Create a new file loader instance.",2],["FileLoader::load","Illuminate\\Translation\\FileLoader","Illuminate\/Translation\/FileLoader.html#method_load","(string $locale, string $group, string $namespace = null)","Load the messages for the given locale.",2],["FileLoader::addNamespace","Illuminate\\Translation\\FileLoader","Illuminate\/Translation\/FileLoader.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["LoaderInterface::load","Illuminate\\Translation\\LoaderInterface","Illuminate\/Translation\/LoaderInterface.html#method_load","(string $locale, string $group, string $namespace = null)","Load the messages for the given locale.",2],["LoaderInterface::addNamespace","Illuminate\\Translation\\LoaderInterface","Illuminate\/Translation\/LoaderInterface.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["TranslationServiceProvider::register","Illuminate\\Translation\\TranslationServiceProvider","Illuminate\/Translation\/TranslationServiceProvider.html#method_register","()","Register the service provider.",2],["TranslationServiceProvider::provides","Illuminate\\Translation\\TranslationServiceProvider","Illuminate\/Translation\/TranslationServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Translator::__construct","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method___construct","(<a href=\"Illuminate\/Translation\/LoaderInterface.html\"><abbr title=\"Illuminate\\Translation\\LoaderInterface\">LoaderInterface<\/abbr><\/a> $loader, string $locale)","Create a new translator instance.",2],["Translator::has","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_has","(string $key, string $locale = null)","Determine if a translation exists.",2],["Translator::get","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_get","(string $key, array $replace = array(), string $locale = null)","Get the translation for the given key.",2],["Translator::choice","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_choice","(string $key, int $number, array $replace = array(), string $locale = null)","Get a translation according to an integer value.",2],["Translator::trans","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_trans","(string $id, array $parameters = array(), string $domain = &#039;messages&#039;, string $locale = null)","Get the translation for a given key.",2],["Translator::transChoice","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_transChoice","(string $id, int $number, array $parameters = array(), string $domain = &#039;messages&#039;, string $locale = null)","Get a translation according to an integer value.",2],["Translator::load","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_load","(string $namespace, string $group, string $locale)","Load the specified language group.",2],["Translator::addNamespace","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_addNamespace","(string $namespace, string $hint)","Add a new namespace to the loader.",2],["Translator::parseKey","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_parseKey","(string $key)","Parse a key into namespace, group, and item.",2],["Translator::getSelector","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_getSelector","()","Get the message selector instance.",2],["Translator::setSelector","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_setSelector","(<abbr title=\"Symfony\\Component\\Translation\\MessageSelector\">MessageSelector<\/abbr> $selector)","Set the message selector instance.",2],["Translator::getLoader","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_getLoader","()","Get the language line loader implementation.",2],["Translator::locale","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_locale","()","Get the default locale being used.",2],["Translator::getLocale","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_getLocale","()","Get the default locale being used.",2],["Translator::setLocale","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_setLocale","(string $locale)","Set the default locale.",2],["Translator::getFallback","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_getFallback","()","Get the fallback locale being used.",2],["Translator::setFallback","Illuminate\\Translation\\Translator","Illuminate\/Translation\/Translator.html#method_setFallback","(string $fallback)","Set the fallback locale being used.",2],["DatabasePresenceVerifier::__construct","Illuminate\\Validation\\DatabasePresenceVerifier","Illuminate\/Validation\/DatabasePresenceVerifier.html#method___construct","(<a href=\"Illuminate\/Database\/ConnectionResolverInterface.html\"><abbr title=\"Illuminate\\Database\\ConnectionResolverInterface\">ConnectionResolverInterface<\/abbr><\/a> $db)","Create a new database presence verifier.",2],["DatabasePresenceVerifier::getCount","Illuminate\\Validation\\DatabasePresenceVerifier","Illuminate\/Validation\/DatabasePresenceVerifier.html#method_getCount","(string $collection, string $column, string $value, int $excludeId = null, string $idColumn = null, array $extra = array())","Count the number of objects in a collection having",2],["DatabasePresenceVerifier::getMultiCount","Illuminate\\Validation\\DatabasePresenceVerifier","Illuminate\/Validation\/DatabasePresenceVerifier.html#method_getMultiCount","(string $collection, string $column, array $values, array $extra = array())","Count the number of objects in a collection with the",2],["DatabasePresenceVerifier::setConnection","Illuminate\\Validation\\DatabasePresenceVerifier","Illuminate\/Validation\/DatabasePresenceVerifier.html#method_setConnection","(string $connection)","Set the connection to be used.",2],["Factory::__construct","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method___construct","(<abbr title=\"Symfony\\Component\\Translation\\TranslatorInterface\">TranslatorInterface<\/abbr> $translator, <a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container = null)","Create a new Validator factory instance.",2],["Factory::make","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_make","(array $data, array $rules, array $messages = array(), array $customAttributes = array())","Create a new Validator instance.",2],["Factory::extend","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_extend","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $extension, string $message = null)","Register a custom validator extension.",2],["Factory::extendImplicit","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_extendImplicit","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $extension, string $message = null)","Register a custom implicit validator extension.",2],["Factory::replacer","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_replacer","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $replacer)","Register a custom implicit validator message replacer.",2],["Factory::resolver","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_resolver","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver)","Set the Validator instance resolver.",2],["Factory::getTranslator","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_getTranslator","()","Get the Translator implementation.",2],["Factory::getPresenceVerifier","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_getPresenceVerifier","()","Get the Presence Verifier implementation.",2],["Factory::setPresenceVerifier","Illuminate\\Validation\\Factory","Illuminate\/Validation\/Factory.html#method_setPresenceVerifier","(<a href=\"Illuminate\/Validation\/PresenceVerifierInterface.html\"><abbr title=\"Illuminate\\Validation\\PresenceVerifierInterface\">PresenceVerifierInterface<\/abbr><\/a> $presenceVerifier)","Set the Presence Verifier implementation.",2],["PresenceVerifierInterface::getCount","Illuminate\\Validation\\PresenceVerifierInterface","Illuminate\/Validation\/PresenceVerifierInterface.html#method_getCount","(string $collection, string $column, string $value, int $excludeId = null, string $idColumn = null, array $extra = array())","Count the number of objects in a collection having",2],["PresenceVerifierInterface::getMultiCount","Illuminate\\Validation\\PresenceVerifierInterface","Illuminate\/Validation\/PresenceVerifierInterface.html#method_getMultiCount","(string $collection, string $column, array $values, array $extra = array())","Count the number of objects in a collection with the",2],["ValidationServiceProvider::register","Illuminate\\Validation\\ValidationServiceProvider","Illuminate\/Validation\/ValidationServiceProvider.html#method_register","()","Register the service provider.",2],["ValidationServiceProvider::provides","Illuminate\\Validation\\ValidationServiceProvider","Illuminate\/Validation\/ValidationServiceProvider.html#method_provides","()","Get the services provided by the provider.",2],["Validator::__construct","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method___construct","(<abbr title=\"Symfony\\Component\\Translation\\TranslatorInterface\">TranslatorInterface<\/abbr> $translator, array $data, array $rules, array $messages = array(), array $customAttributes = array())","Create a new Validator instance.",2],["Validator::sometimes","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_sometimes","(string $attribute, string|array $rules, callable $callback)","Add conditions to a given field based on a Closure.",2],["Validator::each","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_each","(string $attribute, string|array $rules)","Define a set of rules that apply to each element in",2],["Validator::mergeRules","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_mergeRules","(string $attribute, string|array $rules)","Merge additional rules into a given attribute.",2],["Validator::passes","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_passes","()","Determine if the data passes the validation rules.",2],["Validator::fails","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_fails","()","Determine if the data fails the validation rules.",2],["Validator::valid","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_valid","()","Returns the data which was valid.",2],["Validator::invalid","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_invalid","()","Returns the data which was invalid.",2],["Validator::getDisplayableValue","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getDisplayableValue","(string $attribute, mixed $value)","Get the displayable name of the value.",2],["Validator::getExtensions","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getExtensions","()","Get the array of custom validator extensions.",2],["Validator::addExtensions","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addExtensions","(array $extensions)","Register an array of custom validator extensions.",2],["Validator::addImplicitExtensions","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addImplicitExtensions","(array $extensions)","Register an array of custom implicit validator extensions.",2],["Validator::addExtension","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addExtension","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $extension)","Register a custom validator extension.",2],["Validator::addImplicitExtension","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addImplicitExtension","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $extension)","Register a custom implicit validator extension.",2],["Validator::getReplacers","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getReplacers","()","Get the array of custom validator message replacers.",2],["Validator::addReplacers","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addReplacers","(array $replacers)","Register an array of custom validator message replacers.",2],["Validator::addReplacer","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addReplacer","(string $rule, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $replacer)","Register a custom validator message replacer.",2],["Validator::getData","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getData","()","Get the data under validation.",2],["Validator::setData","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setData","(array $data)","Set the data under validation.",2],["Validator::getRules","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getRules","()","Get the validation rules.",2],["Validator::setRules","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setRules","(array $rules)","Set the validation rules.",2],["Validator::setAttributeNames","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setAttributeNames","(array $attributes)","Set the custom attributes on the validator.",2],["Validator::setValueNames","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setValueNames","(array $values)","Set the custom values on the validator.",2],["Validator::getFiles","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getFiles","()","Get the files under validation.",2],["Validator::setFiles","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setFiles","(array $files)","Set the files under validation.",2],["Validator::getPresenceVerifier","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getPresenceVerifier","()","Get the Presence Verifier implementation.",2],["Validator::setPresenceVerifier","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setPresenceVerifier","(<a href=\"Illuminate\/Validation\/PresenceVerifierInterface.html\"><abbr title=\"Illuminate\\Validation\\PresenceVerifierInterface\">PresenceVerifierInterface<\/abbr><\/a> $presenceVerifier)","Set the Presence Verifier implementation.",2],["Validator::getTranslator","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getTranslator","()","Get the Translator implementation.",2],["Validator::setTranslator","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setTranslator","(<abbr title=\"Symfony\\Component\\Translation\\TranslatorInterface\">TranslatorInterface<\/abbr> $translator)","Set the Translator implementation.",2],["Validator::getCustomMessages","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getCustomMessages","()","Get the custom messages for the validator",2],["Validator::setCustomMessages","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setCustomMessages","(array $messages)","Set the custom messages for the validator",2],["Validator::getCustomAttributes","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getCustomAttributes","()","Get the custom attributes used by the validator.",2],["Validator::addCustomAttributes","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addCustomAttributes","(array $customAttributes)","Add custom attributes to the validator.",2],["Validator::getCustomValues","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getCustomValues","()","Get the custom values for the validator.",2],["Validator::addCustomValues","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_addCustomValues","(array $customValues)","Add the custom values for the validator.",2],["Validator::getFallbackMessages","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getFallbackMessages","()","Get the fallback messages for the validator.",2],["Validator::setFallbackMessages","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setFallbackMessages","(array $messages)","Set the fallback messages for the validator.",2],["Validator::failed","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_failed","()","Get the failed validation rules.",2],["Validator::messages","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_messages","()","Get the message container for the validator.",2],["Validator::errors","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_errors","()","An alternative more semantic shortcut to the message",2],["Validator::getMessageBag","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_getMessageBag","()","Get the messages for the instance.",2],["Validator::setContainer","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["Validator::__call","Illuminate\\Validation\\Validator","Illuminate\/Validation\/Validator.html#method___call","(string $method, array $parameters)","Handle dynamic calls to class methods.",2],["BladeCompiler::compile","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_compile","(string $path = null)","Compile the view at the given path.",2],["BladeCompiler::getPath","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_getPath","()","Get the path currently being compiled.",2],["BladeCompiler::setPath","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_setPath","(string $path)","Set the path currently being compiled.",2],["BladeCompiler::compileString","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_compileString","(string $value)","Compile the given Blade template contents.",2],["BladeCompiler::compileEchoDefaults","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_compileEchoDefaults","(string $value)","Compile the default values for the echo statement.",2],["BladeCompiler::extend","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_extend","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $compiler)","Register a custom Blade compiler.",2],["BladeCompiler::createMatcher","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_createMatcher","(string $function)","Get the regular expression for a generic Blade function.",2],["BladeCompiler::createOpenMatcher","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_createOpenMatcher","(string $function)","Get the regular expression for a generic Blade function.",2],["BladeCompiler::createPlainMatcher","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_createPlainMatcher","(string $function)","Create a plain Blade matcher.",2],["BladeCompiler::setContentTags","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_setContentTags","(string $openTag, string $closeTag, bool $escaped = false)","Sets the content tags used for the compiler.",2],["BladeCompiler::setEscapedContentTags","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_setEscapedContentTags","(string $openTag, string $closeTag)","Sets the escaped content tags used for the compiler.",2],["BladeCompiler::getContentTags","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_getContentTags","()","Gets the content tags used for the compiler.",2],["BladeCompiler::getEscapedContentTags","Illuminate\\View\\Compilers\\BladeCompiler","Illuminate\/View\/Compilers\/BladeCompiler.html#method_getEscapedContentTags","()","Gets the escaped content tags used for the compiler.",2],["Compiler::__construct","Illuminate\\View\\Compilers\\Compiler","Illuminate\/View\/Compilers\/Compiler.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, string $cachePath)","Create a new compiler instance.",2],["Compiler::getCompiledPath","Illuminate\\View\\Compilers\\Compiler","Illuminate\/View\/Compilers\/Compiler.html#method_getCompiledPath","(string $path)","Get the path to the compiled version of a view.",2],["Compiler::isExpired","Illuminate\\View\\Compilers\\Compiler","Illuminate\/View\/Compilers\/Compiler.html#method_isExpired","(string $path)","Determine if the view at the given path is expired.",2],["CompilerInterface::getCompiledPath","Illuminate\\View\\Compilers\\CompilerInterface","Illuminate\/View\/Compilers\/CompilerInterface.html#method_getCompiledPath","(string $path)","Get the path to the compiled version of a view.",2],["CompilerInterface::isExpired","Illuminate\\View\\Compilers\\CompilerInterface","Illuminate\/View\/Compilers\/CompilerInterface.html#method_isExpired","(string $path)","Determine if the given view is expired.",2],["CompilerInterface::compile","Illuminate\\View\\Compilers\\CompilerInterface","Illuminate\/View\/Compilers\/CompilerInterface.html#method_compile","(string $path)","Compile the view at the given path.",2],["CompilerEngine::__construct","Illuminate\\View\\Engines\\CompilerEngine","Illuminate\/View\/Engines\/CompilerEngine.html#method___construct","(<a href=\"Illuminate\/View\/Compilers\/CompilerInterface.html\"><abbr title=\"Illuminate\\View\\Compilers\\CompilerInterface\">CompilerInterface<\/abbr><\/a> $compiler)","Create a new Blade view engine instance.",2],["CompilerEngine::get","Illuminate\\View\\Engines\\CompilerEngine","Illuminate\/View\/Engines\/CompilerEngine.html#method_get","(string $path, array $data = array())","Get the evaluated contents of the view.",2],["CompilerEngine::getCompiler","Illuminate\\View\\Engines\\CompilerEngine","Illuminate\/View\/Engines\/CompilerEngine.html#method_getCompiler","()","Get the compiler implementation.",2],["Engine::getLastRendered","Illuminate\\View\\Engines\\Engine","Illuminate\/View\/Engines\/Engine.html#method_getLastRendered","()","Get the last view that was rendered.",2],["EngineInterface::get","Illuminate\\View\\Engines\\EngineInterface","Illuminate\/View\/Engines\/EngineInterface.html#method_get","(string $path, array $data = array())","Get the evaluated contents of the view.",2],["EngineResolver::register","Illuminate\\View\\Engines\\EngineResolver","Illuminate\/View\/Engines\/EngineResolver.html#method_register","(string $engine, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver)","Register a new engine resolver.",2],["EngineResolver::resolve","Illuminate\\View\\Engines\\EngineResolver","Illuminate\/View\/Engines\/EngineResolver.html#method_resolve","(string $engine)","Resolver an engine instance by name.",2],["PhpEngine::get","Illuminate\\View\\Engines\\PhpEngine","Illuminate\/View\/Engines\/PhpEngine.html#method_get","(string $path, array $data = array())","Get the evaluated contents of the view.",2],["Factory::__construct","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method___construct","(<a href=\"Illuminate\/View\/Engines\/EngineResolver.html\"><abbr title=\"Illuminate\\View\\Engines\\EngineResolver\">EngineResolver<\/abbr><\/a> $engines, <a href=\"Illuminate\/View\/ViewFinderInterface.html\"><abbr title=\"Illuminate\\View\\ViewFinderInterface\">ViewFinderInterface<\/abbr><\/a> $finder, <a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events)","Create a new view factory instance.",2],["Factory::make","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_make","(string $view, array $data = array(), array $mergeData = array())","Get the evaluated view contents for the given view.",2],["Factory::of","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_of","(string $view, mixed $data = array())","Get the evaluated view contents for a named view.",2],["Factory::name","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_name","(string $view, string $name)","Register a named view.",2],["Factory::alias","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_alias","(string $view, string $alias)","Add an alias for a view.",2],["Factory::exists","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_exists","(string $view)","Determine if a given view exists.",2],["Factory::renderEach","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_renderEach","(string $view, array $data, string $iterator, string $empty = &#039;raw|&#039;)","Get the rendered contents of a partial from a loop.",2],["Factory::getEngineFromPath","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getEngineFromPath","(string $path)","Get the appropriate view engine for the given path.",2],["Factory::share","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_share","(string $key, mixed $value = null)","Add a piece of shared data to the environment.",2],["Factory::creator","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_creator","(array|string $views, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback)","Register a view creator event.",2],["Factory::composers","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_composers","(array $composers)","Register multiple view composers via an array.",2],["Factory::composer","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_composer","(array|string $views, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a>|string $callback, int|null $priority = null)","Register a view composer event.",2],["Factory::callComposer","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_callComposer","(<a href=\"Illuminate\/View\/View.html\"><abbr title=\"Illuminate\\View\\View\">View<\/abbr><\/a> $view)","Call the composer for a given view.",2],["Factory::callCreator","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_callCreator","(<a href=\"Illuminate\/View\/View.html\"><abbr title=\"Illuminate\\View\\View\">View<\/abbr><\/a> $view)","Call the creator for a given view.",2],["Factory::startSection","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_startSection","(string $section, string $content = &#039;&#039;)","Start injecting content into a section.",2],["Factory::inject","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_inject","(string $section, string $content)","Inject inline content into a section.",2],["Factory::yieldSection","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_yieldSection","()","Stop injecting content into a section and return its",2],["Factory::stopSection","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_stopSection","(bool $overwrite = false)","Stop injecting content into a section.",2],["Factory::appendSection","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_appendSection","()","Stop injecting content into a section and append it.",2],["Factory::yieldContent","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_yieldContent","(string $section, string $default = &#039;&#039;)","Get the string contents of a section.",2],["Factory::flushSections","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_flushSections","()","Flush all of the section contents.",2],["Factory::flushSectionsIfDoneRendering","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_flushSectionsIfDoneRendering","()","Flush all of the section contents if done rendering.",2],["Factory::incrementRender","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_incrementRender","()","Increment the rendering counter.",2],["Factory::decrementRender","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_decrementRender","()","Decrement the rendering counter.",2],["Factory::doneRendering","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_doneRendering","()","Check if there are no active render operations.",2],["Factory::addLocation","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_addLocation","(string $location)","Add a location to the array of view locations.",2],["Factory::addNamespace","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_addNamespace","(string $namespace, string|array $hints)","Add a new namespace to the loader.",2],["Factory::prependNamespace","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_prependNamespace","(string $namespace, string|array $hints)","Prepend a new namespace to the loader.",2],["Factory::addExtension","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_addExtension","(string $extension, string $engine, <a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $resolver = null)","Register a valid view extension and its engine.",2],["Factory::getExtensions","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getExtensions","()","Get the extension to engine bindings.",2],["Factory::getEngineResolver","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getEngineResolver","()","Get the engine resolver instance.",2],["Factory::getFinder","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getFinder","()","Get the view finder instance.",2],["Factory::setFinder","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_setFinder","(<a href=\"Illuminate\/View\/ViewFinderInterface.html\"><abbr title=\"Illuminate\\View\\ViewFinderInterface\">ViewFinderInterface<\/abbr><\/a> $finder)","Set the view finder instance.",2],["Factory::getDispatcher","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getDispatcher","()","Get the event dispatcher instance.",2],["Factory::setDispatcher","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_setDispatcher","(<a href=\"Illuminate\/Events\/Dispatcher.html\"><abbr title=\"Illuminate\\Events\\Dispatcher\">Dispatcher<\/abbr><\/a> $events)","Set the event dispatcher instance.",2],["Factory::getContainer","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getContainer","()","Get the IoC container instance.",2],["Factory::setContainer","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_setContainer","(<a href=\"Illuminate\/Container\/Container.html\"><abbr title=\"Illuminate\\Container\\Container\">Container<\/abbr><\/a> $container)","Set the IoC container instance.",2],["Factory::shared","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_shared","(string $key, mixed $default = null)","Get an item from the shared data.",2],["Factory::getShared","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getShared","()","Get all of the shared data for the environment.",2],["Factory::getSections","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getSections","()","Get the entire array of sections.",2],["Factory::getNames","Illuminate\\View\\Factory","Illuminate\/View\/Factory.html#method_getNames","()","Get all of the registered named views in environment.",2],["FileViewFinder::__construct","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files, array $paths, array $extensions = null)","Create a new file view loader instance.",2],["FileViewFinder::find","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_find","(string $name)","Get the fully qualified location of the view.",2],["FileViewFinder::addLocation","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_addLocation","(string $location)","Add a location to the finder.",2],["FileViewFinder::addNamespace","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_addNamespace","(string $namespace, string|array $hints)","Add a namespace hint to the finder.",2],["FileViewFinder::prependNamespace","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_prependNamespace","(string $namespace, string|array $hints)","Prepend a namespace hint to the finder.",2],["FileViewFinder::addExtension","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_addExtension","(string $extension)","Register an extension with the view finder.",2],["FileViewFinder::hasHintInformation","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_hasHintInformation","(string $name)","Returns whether or not the view specify a hint information.",2],["FileViewFinder::getFilesystem","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_getFilesystem","()","Get the filesystem instance.",2],["FileViewFinder::getPaths","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_getPaths","()","Get the active view paths.",2],["FileViewFinder::getHints","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_getHints","()","Get the namespace to file path hints.",2],["FileViewFinder::getExtensions","Illuminate\\View\\FileViewFinder","Illuminate\/View\/FileViewFinder.html#method_getExtensions","()","Get registered extensions.",2],["View::__construct","Illuminate\\View\\View","Illuminate\/View\/View.html#method___construct","(<a href=\"Illuminate\/View\/Factory.html\"><abbr title=\"Illuminate\\View\\Factory\">Factory<\/abbr><\/a> $factory, <a href=\"Illuminate\/View\/Engines\/EngineInterface.html\"><abbr title=\"Illuminate\\View\\Engines\\EngineInterface\">EngineInterface<\/abbr><\/a> $engine, string $view, string $path, array $data = array())","Create a new view instance.",2],["View::render","Illuminate\\View\\View","Illuminate\/View\/View.html#method_render","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $callback = null)","Get the string contents of the view.",2],["View::renderSections","Illuminate\\View\\View","Illuminate\/View\/View.html#method_renderSections","()","Get the sections of the rendered view.",2],["View::with","Illuminate\\View\\View","Illuminate\/View\/View.html#method_with","(string|array $key, mixed $value = null)","Add a piece of data to the view.",2],["View::nest","Illuminate\\View\\View","Illuminate\/View\/View.html#method_nest","(string $key, string $view, array $data = array())","Add a view instance to the view data.",2],["View::withErrors","Illuminate\\View\\View","Illuminate\/View\/View.html#method_withErrors","(<a href=\"Illuminate\/Support\/Contracts\/MessageProviderInterface.html\"><abbr title=\"Illuminate\\Support\\Contracts\\MessageProviderInterface\">MessageProviderInterface<\/abbr><\/a>|array $provider)","Add validation errors to the view.",2],["View::getFactory","Illuminate\\View\\View","Illuminate\/View\/View.html#method_getFactory","()","Get the view factory instance.",2],["View::getEngine","Illuminate\\View\\View","Illuminate\/View\/View.html#method_getEngine","()","Get the view's rendering engine.",2],["View::getName","Illuminate\\View\\View","Illuminate\/View\/View.html#method_getName","()","Get the name of the view.",2],["View::getData","Illuminate\\View\\View","Illuminate\/View\/View.html#method_getData","()","Get the array of view data.",2],["View::getPath","Illuminate\\View\\View","Illuminate\/View\/View.html#method_getPath","()","Get the path to the view file.",2],["View::setPath","Illuminate\\View\\View","Illuminate\/View\/View.html#method_setPath","(string $path)","Set the path to the view.",2],["View::offsetExists","Illuminate\\View\\View","Illuminate\/View\/View.html#method_offsetExists","(string $key)","Determine if a piece of data is bound.",2],["View::offsetGet","Illuminate\\View\\View","Illuminate\/View\/View.html#method_offsetGet","(string $key)","Get a piece of bound data to the view.",2],["View::offsetSet","Illuminate\\View\\View","Illuminate\/View\/View.html#method_offsetSet","(string $key, mixed $value)","Set a piece of data on the view.",2],["View::offsetUnset","Illuminate\\View\\View","Illuminate\/View\/View.html#method_offsetUnset","(string $key)","Unset a piece of data from the view.",2],["View::__get","Illuminate\\View\\View","Illuminate\/View\/View.html#method___get","(string $key)","Get a piece of data from the view.",2],["View::__set","Illuminate\\View\\View","Illuminate\/View\/View.html#method___set","(string $key, mixed $value)","Set a piece of data on the view.",2],["View::__isset","Illuminate\\View\\View","Illuminate\/View\/View.html#method___isset","(string $key)","Check if a piece of data is bound to the view.",2],["View::__unset","Illuminate\\View\\View","Illuminate\/View\/View.html#method___unset","(string $key)","Remove a piece of bound data from the view.",2],["View::__call","Illuminate\\View\\View","Illuminate\/View\/View.html#method___call","(string $method, array $parameters)","Dynamically bind parameters to the view.",2],["View::__toString","Illuminate\\View\\View","Illuminate\/View\/View.html#method___toString","()","Get the string contents of the view.",2],["ViewFinderInterface::find","Illuminate\\View\\ViewFinderInterface","Illuminate\/View\/ViewFinderInterface.html#method_find","(string $view)","Get the fully qualified location of the view.",2],["ViewFinderInterface::addLocation","Illuminate\\View\\ViewFinderInterface","Illuminate\/View\/ViewFinderInterface.html#method_addLocation","(string $location)","Add a location to the finder.",2],["ViewFinderInterface::addNamespace","Illuminate\\View\\ViewFinderInterface","Illuminate\/View\/ViewFinderInterface.html#method_addNamespace","(string $namespace, string|array $hints)","Add a namespace hint to the finder.",2],["ViewFinderInterface::prependNamespace","Illuminate\\View\\ViewFinderInterface","Illuminate\/View\/ViewFinderInterface.html#method_prependNamespace","(string $namespace, string|array $hints)","Prepend a namespace hint to the finder.",2],["ViewFinderInterface::addExtension","Illuminate\\View\\ViewFinderInterface","Illuminate\/View\/ViewFinderInterface.html#method_addExtension","(string $extension)","Add a valid view extension to the finder.",2],["ViewServiceProvider::register","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_register","()","Register the service provider.",2],["ViewServiceProvider::registerEngineResolver","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_registerEngineResolver","()","Register the engine resolver instance.",2],["ViewServiceProvider::registerPhpEngine","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_registerPhpEngine","(<a href=\"Illuminate\/View\/Engines\/EngineResolver.html\"><abbr title=\"Illuminate\\View\\Engines\\EngineResolver\">EngineResolver<\/abbr><\/a> $resolver)","Register the PHP engine implementation.",2],["ViewServiceProvider::registerBladeEngine","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_registerBladeEngine","(<a href=\"Illuminate\/View\/Engines\/EngineResolver.html\"><abbr title=\"Illuminate\\View\\Engines\\EngineResolver\">EngineResolver<\/abbr><\/a> $resolver)","Register the Blade engine implementation.",2],["ViewServiceProvider::registerViewFinder","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_registerViewFinder","()","Register the view finder implementation.",2],["ViewServiceProvider::registerFactory","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_registerFactory","()","Register the view environment.",2],["ViewServiceProvider::sessionHasErrors","Illuminate\\View\\ViewServiceProvider","Illuminate\/View\/ViewServiceProvider.html#method_sessionHasErrors","(<a href=\"Illuminate\/Foundation\/Application.html\"><abbr title=\"Illuminate\\Foundation\\Application\">Application<\/abbr><\/a> $app)","Determine if the application session has errors.",2],["WorkbenchMakeCommand::__construct","Illuminate\\Workbench\\Console\\WorkbenchMakeCommand","Illuminate\/Workbench\/Console\/WorkbenchMakeCommand.html#method___construct","(<a href=\"Illuminate\/Workbench\/PackageCreator.html\"><abbr title=\"Illuminate\\Workbench\\PackageCreator\">PackageCreator<\/abbr><\/a> $creator)","Create a new make workbench command instance.",2],["WorkbenchMakeCommand::fire","Illuminate\\Workbench\\Console\\WorkbenchMakeCommand","Illuminate\/Workbench\/Console\/WorkbenchMakeCommand.html#method_fire","()","Execute the console command.",2],["Package::__construct","Illuminate\\Workbench\\Package","Illuminate\/Workbench\/Package.html#method___construct","(string $vendor, string $name, string $author, string $email)","Create a new package instance.",2],["Package::getFullName","Illuminate\\Workbench\\Package","Illuminate\/Workbench\/Package.html#method_getFullName","()","Get the full package name.",2],["PackageCreator::__construct","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method___construct","(<a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files)","Create a new package creator instance.",2],["PackageCreator::create","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_create","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $path, bool $plain = true)","Create a new package stub.",2],["PackageCreator::createWithResources","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_createWithResources","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $path)","Create a package with all resource directories.",2],["PackageCreator::writeSupportFiles","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writeSupportFiles","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory, bool $plain)","Write the support files to the package root.",2],["PackageCreator::writeIgnoreFile","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writeIgnoreFile","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory, bool $plain)","Write the stub .gitignore file for the package.",2],["PackageCreator::writeSupportDirectories","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writeSupportDirectories","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory)","Create the support directories for a package.",2],["PackageCreator::writePublicDirectory","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writePublicDirectory","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory, bool $plain)","Create the public directory for the package.",2],["PackageCreator::writeTestDirectory","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writeTestDirectory","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory)","Create the test directory for the package.",2],["PackageCreator::writeServiceProvider","Illuminate\\Workbench\\PackageCreator","Illuminate\/Workbench\/PackageCreator.html#method_writeServiceProvider","(<a href=\"Illuminate\/Workbench\/Package.html\"><abbr title=\"Illuminate\\Workbench\\Package\">Package<\/abbr><\/a> $package, string $directory, bool $plain)","Write the stub ServiceProvider for the package.",2],["Starter::start","Illuminate\\Workbench\\Starter","Illuminate\/Workbench\/Starter.html#method_start","(string $path, <abbr title=\"Symfony\\Component\\Finder\\Finder\">Finder<\/abbr> $finder = null, <a href=\"Illuminate\/Filesystem\/Filesystem.html\"><abbr title=\"Illuminate\\Filesystem\\Filesystem\">Filesystem<\/abbr><\/a> $files = null)","Load the workbench vendor auto-load files.",2],["WorkbenchServiceProvider::register","Illuminate\\Workbench\\WorkbenchServiceProvider","Illuminate\/Workbench\/WorkbenchServiceProvider.html#method_register","()","Register the service provider.",2],["WorkbenchServiceProvider::provides","Illuminate\\Workbench\\WorkbenchServiceProvider","Illuminate\/Workbench\/WorkbenchServiceProvider.html#method_provides","()","Get the services provided by the provider.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']